import React, { Component } from 'react';

class Network extends Component {

    render() {
        return (
            <div>
                <h2>Network</h2>
                <p>Now it's time to create a network:</p>
                <p><img src="https://s3-eu-west-1.amazonaws.com/b9-academy-assets/course-assets/HLF-0/network.png" /></p>
                <h3>Docker Compose</h3>
                <h3>Orderer</h3>
                <p>We start by writing <code className="hljs hl-inline">docker-compose-pcxchg.yaml</code> in <code className="hljs hl-inline">pcxchg/</code>. This file sets up our network. Let's start with the orderer and define the <code className="hljs hl-inline">orderer.pcxchg.com</code> container:</p>
                <pre><code className="hljs yaml">{"\n"}version: '2'{"\n"}{"\n"}networks:{"\n"}{"  "}pcxchg:{"\n"}{"\n"}services:{"\n"}{"  "}orderer.pcxchg.com:{"\n"}{"    "}image: hyperledger/fabric-orderer:x86_64-1.1.0{"\n"}{"    "}container_name: orderer.pcxchg.com{"\n"}{"    "}environment:{"\n"}{"      "}- ORDERER_GENERAL_LISTENADDRESS=0.0.0.0{"\n"}{"      "}- ORDERER_GENERAL_GENESISMETHOD=file{"\n"}{"      "}- ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block{"\n"}{"      "}- ORDERER_GENERAL_LOCALMSPID=OrdererMSP{"\n"}{"      "}- ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp{"\n"}{"    "}volumes:{"\n"}{"      "}- ./orderer/genesis.block:/var/hyperledger/orderer/orderer.genesis.block{"\n"}{"      "}- ./crypto-config/ordererOrganizations/pcxchg.com/orderers/orderer.pcxchg.com/msp:/var/hyperledger/orderer/msp{"\n"}{"    "}command: orderer{"\n"}{"    "}working_dir: /opt/gopath/src/github.com/hyperledger/fabric{"\n"}{"    "}ports:{"\n"}{"      "}- 7050:7050{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}</code></pre>
                <p>Good. Wait! This file does not end here. But let us discover some aspects of the orderer configuration, before we go on.</p>
                <p>Notice that we use the <code className="hljs hl-inline">genesis.block</code> we created in the previous section. And, we also use the certificates for the orderer.</p>
                <p>To understand the environment variables, explore <a href="https://github.com/hyperledger/fabric/blob/release-1.1/sampleconfig/orderer.yaml">orderer.yaml</a>. Study the comments in the configuration. We do not set TLS, so it is disabled. Show of hands, who wants to set up TLS?</p>
                <div className="b9-remember">
                We talked about the relation between environment settings and .yaml files in module 3, section dev mode. 
                </div>
                <h3>Peers</h3>
                <h4>Peer Template</h4>
                <p>There are a few environment variables that are common between the peers. In addition to <code className="hljs hl-inline">docker-compose-pcxchg.yaml</code> we can create a <code className="hljs hl-inline">peer.yaml</code> file for the common settings:</p>
                <pre><code className="hljs yaml">{"\n"}version: '2'{"\n"}{"\n"}services:{"\n"}{"  "}peer:{"\n"}{"    "}image: hyperledger/fabric-peer:x86_64-1.1.0{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock{"\n"}{"      "}- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=pcxchg_pcxchg{"\n"}{"      "}- CORE_PEER_ADDRESSAUTODETECT=true{"\n"}{"    "}working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer/{"\n"}{"    "}command: peer node start{"\n"}{"    "}volumes:{"\n"}{"    "}- /var/run/:/host/var/run/{"\n"}</code></pre>
                <p>Those variables allow us to start chaincode containers on the same network as the peers. (Also the volume <code className="hljs hl-inline">/var/run</code>) </p>
                <p>You can refer to <a href="https://github.com/hyperledger/fabric/blob/release-1.1/sampleconfig/core.yaml">core.yaml</a> to explore the meaning of the variables. </p>
                <p>Each peer will use the same orderer in this network, and there will be only one such. </p>
                <h4><code className="hljs hl-inline">peer0.Asus.com</code></h4>
                <p>Now, let's define this <code className="hljs hl-inline">peer0.Asus.com</code> container. This is the peer that belongs to, wait for it, Asus. Notice, that the configuration below must be placed in <code className="hljs hl-inline">docker-compose-pcxchg.yaml</code>, so, we continue editing it:</p>
                <pre><code className="hljs yaml">{"\n"}{"  "}peer0.Asus.com:{"\n"}{"    "}container_name: peer0.Asus.com{"\n"}{"    "}extends:{"\n"}{"      "}file: ./peer.yaml{"\n"}{"      "}service: peer{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer0.Asus.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Asus.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=AsusMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.Asus.com:7051{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Asus.com/peers/peer0.Asus.com/msp:/etc/hyperledger/msp/peer{"\n"}{"    "}ports:{"\n"}{"      "}- 7051:7051{"\n"}{"      "}- 7053:7053{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer.pcxchg.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}</code></pre>
                <p>This container <code className="hljs hl-inline">extends:</code> the <code className="hljs hl-inline">peer.yaml</code> we wrote before. We set some unique properties including the address and identity of the peer. This container starts after <code className="hljs hl-inline">orderer.pcxchg.com</code>.</p>
                <h3>CLIs</h3>
                <p>We will use separate CLI containers for each organisation. Here too, we can use a template to define common settings. Let us create <code className="hljs hl-inline">cli.yaml</code>:</p>
                <pre><code className="hljs yaml">{"\n"}version: '2'{"\n"}{"\n"}services:{"\n"}{"  "}cli:{"\n"}{"    "}tty: true{"\n"}{"    "}image: hyperledger/fabric-tools:x86_64-1.1.0{"\n"}{"    "}environment:{"\n"}{"      "}- GOPATH=/opt/gopath{"\n"}{"    "}working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer{"\n"}{"    "}volumes:{"\n"}{"      "}- ./orderer/:/opt/gopath/src/github.com/hyperledger/fabric/peer/orderer{"\n"}{"      "}- ./chaincode:/opt/gopath/src/{"\n"}{"      "}- ./channels/:/opt/gopath/src/github.com/hyperledger/fabric/peer/channels{"\n"}</code></pre>
                <h4><code className="hljs hl-inline">cli.Asus</code></h4>
                <p>Let's define the <code className="hljs hl-inline">cli.Asus</code> container as a client for Asus.</p>
                <pre><code className="hljs yaml">{"\n"}{"  "}cli.Asus:{"\n"}{"    "}extends:{"\n"}{"      "}file: ./cli.yaml{"\n"}{"      "}service: cli{"\n"}{"    "}container_name: cli.Asus{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=cli.Asus.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Asus.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=AsusMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@Asus.com/msp{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Asus.com:/etc/hyperledger/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer.pcxchg.com{"\n"}{"      "}- peer0.Asus.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}</code></pre>
                <h3>All together</h3>
                <p>We also have to set up the containers for the other organisations. 
                They are quite similar, so try it first yourself before moving on!</p>
                <p>Did you try yourself? At the end, <code className="hljs hl-inline">docker-compose-pcxchg.yaml</code> should look like:</p>
                <pre><code className="hljs yaml">{"\n"}version: '2'{"\n"}{"\n"}networks:{"\n"}{"  "}pcxchg:{"\n"}{"\n"}services:{"\n"}{"  "}orderer.pcxchg.com:{"\n"}{"    "}image: hyperledger/fabric-orderer:x86_64-1.1.0{"\n"}{"    "}container_name: orderer.pcxchg.com{"\n"}{"    "}environment:{"\n"}{"      "}- ORDERER_GENERAL_LISTENADDRESS=0.0.0.0{"\n"}{"      "}- ORDERER_GENERAL_GENESISMETHOD=file{"\n"}{"      "}- ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block{"\n"}{"      "}- ORDERER_GENERAL_LOCALMSPID=OrdererMSP{"\n"}{"      "}- ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp{"\n"}{"    "}volumes:{"\n"}{"      "}- ./orderer/genesis.block:/var/hyperledger/orderer/orderer.genesis.block{"\n"}{"      "}- ./crypto-config/ordererOrganizations/pcxchg.com/orderers/orderer.pcxchg.com/msp:/var/hyperledger/orderer/msp{"\n"}{"    "}command: orderer{"\n"}{"    "}working_dir: /opt/gopath/src/github.com/hyperledger/fabric{"\n"}{"    "}ports:{"\n"}{"      "}- 7050:7050{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}peer0.Asus.com:{"\n"}{"    "}container_name: peer0.Asus.com{"\n"}{"    "}extends:{"\n"}{"      "}file: ./peer.yaml{"\n"}{"      "}service: peer{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer0.Asus.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Asus.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=AsusMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.Asus.com:7051{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Asus.com/peers/peer0.Asus.com/msp:/etc/hyperledger/msp/peer{"\n"}{"    "}ports:{"\n"}{"      "}- 7051:7051{"\n"}{"      "}- 7053:7053{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer.pcxchg.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}peer0.Dell.com:{"\n"}{"    "}container_name: peer0.Dell.com{"\n"}{"    "}extends:{"\n"}{"      "}file: ./peer.yaml{"\n"}{"      "}service: peer{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer0.Dell.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Dell.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=DellMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.Dell.com:7051{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Dell.com/peers/peer0.Dell.com/msp:/etc/hyperledger/msp/peer{"\n"}{"    "}ports:{"\n"}{"      "}- 10051:7051{"\n"}{"      "}- 10053:7053{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer.pcxchg.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}peer0.HP.com:{"\n"}{"    "}container_name: peer0.HP.com{"\n"}{"    "}extends:{"\n"}{"      "}file: ./peer.yaml{"\n"}{"      "}service: peer{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer0.HP.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.HP.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=HPMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.HP.com:7051{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/HP.com/peers/peer0.HP.com/msp:/etc/hyperledger/msp/peer{"\n"}{"    "}ports:{"\n"}{"      "}- 9051:7051{"\n"}{"      "}- 9053:7053{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer.pcxchg.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}peer0.Amazon.com:{"\n"}{"    "}container_name: peer0.Amazon.com{"\n"}{"    "}extends:{"\n"}{"      "}file: ./peer.yaml{"\n"}{"      "}service: peer{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer0.Amazon.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Amazon.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=AmazonMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.Amazon.com:7051{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Amazon.com/peers/peer0.Amazon.com/msp:/etc/hyperledger/msp/peer{"\n"}{"    "}ports:{"\n"}{"      "}- 8051:7051{"\n"}{"      "}- 8053:7053{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer.pcxchg.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}cli.Asus:{"\n"}{"    "}extends:{"\n"}{"      "}file: ./cli.yaml{"\n"}{"      "}service: cli{"\n"}{"    "}container_name: cli.Asus{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=cli.Asus.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Asus.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=AsusMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@Asus.com/msp{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Asus.com:/etc/hyperledger/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer.pcxchg.com{"\n"}{"      "}- peer0.Asus.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}cli.Dell:{"\n"}{"    "}extends:{"\n"}{"      "}file: ./cli.yaml{"\n"}{"      "}service: cli{"\n"}{"    "}container_name: cli.Dell{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=cli.Dell.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Dell.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=DellMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@Dell.com/msp{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Dell.com:/etc/hyperledger/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer.pcxchg.com{"\n"}{"      "}- peer0.Dell.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}cli.HP:{"\n"}{"    "}extends:{"\n"}{"      "}file: ./cli.yaml{"\n"}{"      "}service: cli{"\n"}{"    "}container_name: cli.HP{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=cli.HP.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.HP.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=HPMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@HP.com/msp{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/HP.com:/etc/hyperledger/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer.pcxchg.com{"\n"}{"      "}- peer0.HP.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}cli.Amazon:{"\n"}{"    "}extends:{"\n"}{"      "}file: ./cli.yaml{"\n"}{"      "}service: cli{"\n"}{"    "}container_name: cli.Amazon{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=cli.Amazon.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Amazon.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=AmazonMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@Amazon.com/msp{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Amazon.com:/etc/hyperledger/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- peer0.Amazon.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}</code></pre>
                <p>You will need <code className="hljs hl-inline">peer.yaml</code> and <code className="hljs hl-inline">cli.yaml</code> in <code className="hljs hl-inline">pcxchg/</code> to start the network.</p>
                <h4>Run the network</h4>
                <p>Now, let's start the network with:</p>
                <pre><code className="hljs sh">{"\n"}docker-compose -f docker-compose-pcxchg.yaml up -d{"\n"}</code></pre>
                <p>Confirm that each container is indeed running with:</p>
                <pre><code className="hljs sh">{"\n"}docker ps{"\n"}</code></pre>
                <p>You should see those containers running:</p>
                <p><img src="https://s3-eu-west-1.amazonaws.com/b9-academy-assets/course-assets/HLF-0/container.png" /> </p>
                <p>You can stop the network with:</p>
                <pre><code className="hljs sh">{"\n"}docker-compose -f docker-compose-pcxchg.yaml down{"\n"}</code></pre>
                <p>Make sure the network is up for the next step. </p>
                <h3>Channels</h3>
                <div className="vert vert-1" data-id="block-v1:B9lab+HLF-12+2018-07+type@video+block@2b466ab443484c5c89707dbe3d8cfd7b">
                <div className="xblock xblock-student_view xblock-student_view-video xmodule_display xmodule_VideoModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="video" data-request-token="d6d442b096b311e8be120a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@video+block@2b466ab443484c5c89707dbe3d8cfd7b" data-type="Video" data-course-id="course-v1:B9lab+HLF-12+2018-07">
                    <h3 className="hd hd-2">Hyperledger Fabric Channels</h3>
                    <iframe src="https://www.youtube.com/embed/Cucrp7ZflhA" allow="autoplay; encrypted-media" allowFullScreen width={809} height={455} frameBorder={0} />
                </div>
                </div>
                <div className="vert vert-2" data-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@4fd0390446ad4b3a95af54aefc6eff81">
                <div className="xblock xblock-student_view xblock-student_view-html xmodule_display xmodule_HtmlModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="html" data-request-token="d6d442b096b311e8be120a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@4fd0390446ad4b3a95af54aefc6eff81" data-type="HTMLModule" data-course-id="course-v1:B9lab+HLF-12+2018-07">
                    <p>We have the network and configuration blocks, so we can now create the channels and let the peers join.</p>
                    <p>First, be sure, the network is running. Do not use the <code className="hljs hl-inline">-d</code> (detached) flag, so we can get some information, if something goes wrong.</p>
                    <p>Who can create and join all channels? Yes, Amazon, so run:</p>
                    <pre><code className="hljs sh">{"\n"}docker exec -it cli.Amazon bash{"\n"}</code></pre>
                    <p>To get into an interactive bash with <code className="hljs hl-inline">cli.Amazon</code>'s container. Then run:</p>
                    <pre><code className="hljs sh">{"\n"}peer channel create -c asus -f ./channels/Asus.tx -o orderer.pcxchg.com:7050{"\n"}{"\n"}peer channel create -c dell -f ./channels/Dell.tx -o orderer.pcxchg.com:7050{"\n"}{"\n"}peer channel create -c hp -f ./channels/HP.tx -o orderer.pcxchg.com:7050{"\n"}</code></pre>
                    <p>The orderer will send your peer genesis blocks for those channels. We can use them to join the peer to the channel:</p>
                    <pre><code className="hljs sh">{"\n"}peer channel join -b asus.block{"\n"}{"\n"}peer channel join -b dell.block{"\n"}{"\n"}peer channel join -b hp.block{"\n"}</code></pre>
                    <p>Ok, let us use another terminal or leave the container using <code className="hljs hl-inline">exit</code>. Join the other peers to the appropriate channels:</p>
                    <pre><code className="hljs sh">{"\n"}docker exec cli.Asus bash -c 'peer channel join -b asus.block'{"\n"}{"\n"}docker exec cli.HP bash -c 'peer channel join -b hp.block'{"\n"}{"\n"}docker exec cli.Dell bash -c 'peer channel join -b dell.block'{"\n"}</code></pre>
                    <p>At last, let us use the anchor peer update transactions:</p>
                    <pre><code className="hljs sh">{"\n"}docker exec cli.Asus bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c asus -f ./channels/asusanchor.tx'{"\n"}{"\n"}docker exec cli.Dell bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c dell -f ./channels/dellanchor.tx'{"\n"}{"\n"}docker exec cli.HP bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c hp -f ./channels/hpanchor.tx'{"\n"}{"\n"}docker exec cli.Amazon bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c asus -f ./channels/amazonanchorasus.tx'{"\n"}{"\n"}docker exec cli.Amazon bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c dell -f ./channels/amazonanchordell.tx'{"\n"}{"\n"}docker exec cli.Amazon bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c hp -f ./channels/amazonanchorhp.tx'{"\n"}{"\n"}</code></pre>
                    <div className="b9-tip">
                    <p>
                        The orderer will send the genesis block of the channel to the client, who creates the channel. We are working on one host, so we can easily share this file. <br />In production, you would fetch the genesis block for the channel. </p>
                    <p>E.g. for Asus: </p><code>docker exec cli.Asus bash -c 'peer channel fetch 0 -o orderer.pcxchg.com:7050 -c asus</code> <p> and </p> <code>docker exec cli.Asus bash -c 'peer channel join -b asus_0.block'</code> <p>after the channel block is received.</p>
                    </div>
                    <p>All set? We are ready to write chaincode for this network! </p>
                </div>
                </div>
                <div className="vert vert-3" data-id="block-v1:B9lab+HLF-12+2018-07+type@video+block@0db077f3e3494b078113fda0ac15e9cf">
                <div className="xblock xblock-student_view xblock-student_view-video xmodule_display xmodule_VideoModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="video" data-request-token="d6d442b096b311e8be120a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@video+block@0db077f3e3494b078113fda0ac15e9cf" data-type="Video" data-course-id="course-v1:B9lab+HLF-12+2018-07">
                    <h3 className="hd hd-2">Watch Rob set up the network</h3>
                    <iframe src="https://www.youtube.com/embed/EsyQsGW69Co" allow="autoplay; encrypted-media" allowFullScreen width={809} height={455} frameBorder={0} />
                </div>
                </div>
            </div>
        )
    }
}

export default Network;