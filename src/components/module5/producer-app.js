import React, { Component } from 'react';

class ProducerApp extends Component {

    render () {
        return (
            <div className="xblock xblock-student_view xblock-student_view-vertical" data-runtime-class="LmsRuntime" data-init="VerticalStudentView" data-course-id="course-v1:B9lab+HLF-12+2018-07" data-request-token="16e0fd2a9e8a11e8be140a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@vertical+block@90f402dd1f1e4c6fadb7a823b2a98e70" data-block-type="vertical">
                <div className="vert-mod">
                <div className="vert vert-0" data-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@f99c89b4f3304c6fbe0237c05a20cb63">
                    <div className="xblock xblock-student_view xblock-student_view-html xmodule_display xmodule_HtmlModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="html" data-request-token="16e0fd2a9e8a11e8be140a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@f99c89b4f3304c6fbe0237c05a20cb63" data-type="HTMLModule" data-course-id="course-v1:B9lab+HLF-12+2018-07">
                    <h2>producerApp</h2>
                    <p>Let us start with an overview of the functions we need to create for this client to work with the Hyperledger Fabric[1] network and our chaincode:</p>
                    <p><img src="https://s3-eu-west-1.amazonaws.com/b9-academy-assets/course-assets/HLF-0/produceroverview.png" /></p>
                    <p>You can get more information about those functions by searching in the <a href="https://fabric-sdk-node.github.io/">documentation</a>. </p>
                    <p>The most important functions, there, are:</p>
                    <ul>
                        <li><a href="https://fabric-sdk-node.github.io/Client.html#getUserContext__anchor">getUserContext</a> to get a <a href="https://fabric-sdk-node.github.io/User.html">user</a>. Notice, that the user needs to be enrolled. In the next section, we will use the <code className="hljs hl-inline">fabric-ca</code> client to enroll the user via the client.</li>
                        <li><a href="https://fabric-sdk-node.github.io/Channel.html#sendTransactionProposal">sendTransactionProposal</a> to send a transaction proposal. Notice, that you can also set a <code className="hljs hl-inline">timeout</code>.</li>
                        <li><a href="https://fabric-sdk-node.github.io/Channel.html#sendTransaction">sendTransaction</a> to send the proposal response to the orderer.</li>
                    </ul>
                    <div className="b9-remember">
                        Remember the transaction flow, which is shown on the right side of the above figure?
                        We first discussed it in module 2, section network.
                    </div>
                    <p>Create a folder for our first application, name it <code className="hljs hl-inline">producerApp</code>.</p>
                    <p>We can write a function for every task in the figure:</p>
                    <pre><code className="hljs javascript">{"\n"}'use strict'; // self-defence{"\n"}{"\n"}// Functions from figure{"\n"}const hfc = require('fabric-client');{"\n"}let channel;{"\n"}{"\n"}// Here we use local files to get a "User"{"\n"}const enrolUser = function(client, options) {"{"}{"\n"}{"  "}return hfc.newDefaultKeyValueStore({"{"} path: options.wallet_path {"}"}){"\n"}{"    "}.then(wallet =&gt; {"{"}{"\n"}{"      "}client.setStateStore(wallet);{"\n"}{"      "}return client.getUserContext(options.user_id, true);{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}{"\n"}// Here we define set our client, we define channel and peers etc.{"\n"}const initNetwork = function(client, options, target) {"{"}{"\n"}{"  "}let channel;{"\n"}{"  "}try {"{"}{"\n"}{"    "}channel = client.newChannel(options.channel_id);{"\n"}{"    "}const peer = client.newPeer(options.peer_url);{"\n"}{"    "}target.push(peer);{"\n"}{"    "}channel.addPeer(peer);{"\n"}{"    "}channel.addOrderer(client.newOrderer(options.orderer_url));{"\n"}{"  "}{"}"} catch(e) {"{"} // channel already exists{"\n"}{"    "}channel = client.getChannel(options.channel_id);{"\n"}{"  "}{"}"}{"\n"}{"  "}return channel;{"\n"}{"}"};{"\n"}{"\n"}const transactionProposal = function(client, channel, request) {"{"}{"\n"}{"  "}request.txId = client.newTransactionID();{"\n"}{"  "}return channel.sendTransactionProposal(request);{"\n"}{"}"};{"\n"}{"\n"}const responseInspect = function(results) {"{"}{"\n"}{"  "}if (results[0] &amp;&amp; results[0].length &gt; 0 &amp;&amp;{"\n"}{"    "}results[0][0].response &amp;&amp;{"\n"}{"    "}results[0][0].response.status === 200) {"{"}{"\n"}{"    "}return true;{"\n"}{"  "}{"}"}{"\n"}{"  "}return false;{"\n"}{"}"};{"\n"}{"\n"}const sendOrderer = function(channel, request) {"{"}{"\n"}{"  "}return channel.sendTransaction(request);{"\n"}{"}"};{"\n"}</code></pre>
                    <p>You can compare this with the two examples we discussed before. You can see, they both use the same flow to invoke a chaincode. So, we will do it in a similar fashion.</p>
                    <div className="b9-tip">
                        The structure of this client is not optimised for production, it is made for teaching. So, we have useless functions like <code>sendOrderer</code>. The client structure illustrates the transaction flow.
                    </div> 
                    <p>Now, we will use promises to control the order of execution of those functions:</p>
                    <pre><code className="hljs javascript">{"\n"}const target = [];{"\n"}const client = new hfc();{"\n"}{"\n"}// Function invokes createPC on pcxchg{"\n"}function invoke(opt, param) {"{"}{"\n"}{"  "}return enrolUser(client, opt){"\n"}{"    "}.then(user =&gt; {"{"}{"\n"}{"      "}if(typeof user === "undefined" || !user.isEnrolled()){"\n"}{"        "}throw "User not enrolled";{"\n"}{"\n"}{"      "}channel = initNetwork(client, opt, target);{"\n"}{"      "}const request = {"{"}{"\n"}{"          "}targets: target,{"\n"}{"          "}chaincodeId: opt.chaincode_id,{"\n"}{"          "}fcn: 'createPC',{"\n"}{"          "}args: param,{"\n"}{"          "}chainId: opt.channel_id,{"\n"}{"          "}txId: null{"\n"}{"      "}{"}"};{"\n"}{"      "}return transactionProposal(client, channel, request);{"\n"}{"    "}{"}"}){"\n"}{"    "}.then(results =&gt; {"{"}{"\n"}{"      "}if (responseInspect(results)) {"{"}{"\n"}{"        "}const request = {"{"}{"\n"}{"          "}proposalResponses: results[0],{"\n"}{"          "}proposal: results[1],{"\n"}{"          "}header: results[2]{"\n"}{"        "}{"}"};{"\n"}{"        "}return sendOrderer(channel, request);{"\n"}{"      "}{"}"} else {"{"}{"\n"}{"        "}throw "Response is bad";{"\n"}{"      "}{"}"}{"\n"}{"    "}{"}"}){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}console.log(err);{"\n"}{"      "}throw err;{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}</code></pre>
                    <p>So you see the <code className="hljs hl-inline">request</code> again. Here, the function named <code className="hljs hl-inline">createPC</code> is hard coded. However, it should not be a problem for you to change this.</p>
                    <p>We have to define the options e.g. peer address for the organisations:</p>
                    <pre><code className="hljs javascript">{"\n"}// Options{"\n"}const options = {"{"}{"\n"}{"  "}Asus : {"{"}{"\n"}{"    "}wallet_path: '&lt;YOUR APP PATH&gt;/producerApp/certs',{"\n"}{"    "}user_id: 'AsusAdmin',{"\n"}{"    "}channel_id: 'asus',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:7051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050'{"\n"}{"  "}{"}"},{"\n"}{"  "}HP : {"{"}{"\n"}{"    "}wallet_path: '&lt;YOUR APP PATH&gt;/producerApp/certs',{"\n"}{"    "}user_id: 'HPAdmin',{"\n"}{"    "}channel_id: 'hp',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:9051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050'{"\n"}{"  "}{"}"},{"\n"}{"  "}Dell : {"{"}{"\n"}{"    "}wallet_path: '&lt;YOUR APP PATH&gt;/producerApp/certs',{"\n"}{"    "}user_id: 'DellAdmin',{"\n"}{"    "}channel_id: 'dell',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:10051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050'{"\n"}{"  "}{"}"}{"\n"}{"}"};{"\n"}</code></pre>
                    <p>It makes no sense to have all our certs in a single folder. But this is a sample client for you to learn. In production, each organisation would have its own client and its own folders.</p>
                    <div className="b9-warning">
                        <p>Never ever share your private keys!</p>
                    </div>
                    <p>We need a <code className="hljs hl-inline">producerApp/certs</code> folder for the certificates and the keys. 
                        After you have created such a folder, update the <code className="hljs hl-inline">wallet_path</code>s values to match the corresponding path on your host.</p>
                    <p>We will interact with our client through a web server:</p>
                    <pre><code className="hljs javascript">{"\n"}// Server{"\n"}const express = require("express");{"\n"}const app = express();{"\n"}const http = require('http');{"\n"}const bodyParser = require('body-parser');{"\n"}{"\n"}const server = http.createServer(app).listen(4000, function() {"{"}{"}"});{"\n"}app.use(bodyParser.json());{"\n"}{"\n"}app.post('/invoke', function(req, res, next) {"{"}{"\n"}{"  "}const args = req.body.args;{"\n"}{"  "}invoke(options[args[0]], args.slice(1)){"\n"}{"    "}.then(() =&gt; res.send("Chaincode invoked")){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}res.status(500);{"\n"}{"      "}res.send(err.toString());{"\n"}{"    "}{"}"});{"\n"}{"}"});{"\n"}</code></pre>
                    <p>So, we do the same as in the first test. We use <code className="hljs hl-inline">express</code> to start a very simple webserver. We define a post request, where the first argument is the name of the producer. Our server listens on <code className="hljs hl-inline">localhost:4000</code>.</p>
                    <p>We still need to prepare our NodeJs dependencies. In the folder where you have your Javascript files, run:</p>
                    <pre><code className="hljs sh">{"\n"}npm init{"\n"}</code></pre>
                    <p>It asks you a few questions, you can go with the defaults, although you ought to give it the <code className="hljs hl-inline">producerApp</code> name and <code className="hljs hl-inline">producerApp.js</code> as its main file. Then run:</p>
                    <pre><code className="hljs sh">{"\n"}npm install fabric-client@^1.1.0 express@^4.15.2 body-parser@^1.17.1 --save{"\n"}</code></pre>
                    <p>You should end up with a <code className="hljs hl-inline">package.json</code> file that contains:</p>
                    <pre><code className="hljs json">{"\n"}{"{"}{"\n"}{"    "}"name": "producerapp",{"\n"}{"    "}"main": "producerApp.js",{"\n"}{"    "}"dependencies": {"{"}{"\n"}{"        "}"fabric-client": "^1.1.0",{"\n"}{"        "}"express": "^4.15.2",{"\n"}{"        "}"body-parser": "^1.17.1"{"\n"}{"    "}{"}"}{"\n"}{"}"}{"\n"}</code></pre>
                    <p>So, what's next? We still need some preparation to start our app. It is clear that the network must run. But we did not talk about <code className="hljs hl-inline">producerApp/certs</code>.</p>
                    <h3>Certificates</h3>
                    <p>Let us start with Asus. We will use the Admin. In this case, the cryptographic artifacts are located at:</p>
                    <pre><code className="hljs ">{"\n"}&lt;YOUR PCXCHG LOCATION&gt;/crypto-config/peerOrganizations/Asus.com/users/Admin{"\n"}</code></pre>
                    <p>So go to <code className="hljs hl-inline">producerApp/certs</code> and copy the Admin certificate and public key into it:</p>
                    <pre><code className="hljs sh">{"\n"}mkdir certs{"\n"}cd certs{"\n"}cp &lt;YOUR PCXCHG LOCATION&gt;/crypto-config/peerOrganizations/Asus.com/users/Admin\@Asus.com/msp/admincerts/Admin\@Asus.com-cert.pem ./{"\n"}cp &lt;YOUR PCXCHG LOCATION&gt;/crypto-config/peerOrganizations/Asus.com/users/Admin\@Asus.com/msp/keystore/* ./{"\n"}</code></pre>
                    <p>The <code className="hljs hl-inline">newDefaultKeyValueStore</code> needs some preparation to work correctly. Create a file <code className="hljs hl-inline">AsusAdmin</code> in <code className="hljs hl-inline">/producerApp/certs</code>:</p>
                    <pre><code className="hljs json">{"\n"}{"{"}{"\n"}{"   "}"name": "AsusAdmin",{"\n"}{"   "}"mspid": "AsusMSP",{"\n"}{"   "}"roles": null,{"\n"}{"   "}"affiliation": "",{"\n"}{"   "}"enrollmentSecret": "",{"\n"}{"   "}"enrollment": {"{"}{"\n"}{"      "}"signingIdentity": "",{"\n"}{"      "}"identity": {"{"}{"\n"}{"         "}"certificate": ""{"\n"}{"      "}{"}"}{"\n"}{"   "}{"}"}{"\n"}{"}"}{"\n"}</code></pre>
                    <p>First, let us fill in the <code className="hljs hl-inline">certificate</code> field. Therefore, run in <code className="hljs hl-inline">/producerApp/certs</code>:</p>
                    <pre><code className="hljs sh">{"\n"}awk '{"{"}printf "%s\\n", $0{"}"}' Admin\@Asus.com-cert.pem &gt; AsusAdminFormatted.pem{"\n"}</code></pre>
                    <p>This <code className="hljs hl-inline">awk</code> command replaces newlines with <code className="hljs hl-inline">\n</code>.</p>
                    <p>Open the <code className="hljs hl-inline">AsusAdminFormatted.pem</code> and copy-paste it into the <code className="hljs hl-inline">certificate</code> field of <code className="hljs hl-inline">AsusAdmin</code> file.</p>
                    <p>We also need to fill in the <code className="hljs hl-inline">signingIdentity</code> field. This is the name of the file from <code className="hljs hl-inline">/Admin\@Asus.com/msp/keystore/</code> without any suffix. So in the end, the <code className="hljs hl-inline">AsusAdmin</code> file should look like:</p>
                    <pre><code className="hljs json">{"\n"}{"{"}{"\n"}{"   "}"name": "AsusAdmin",{"\n"}{"   "}"mspid": "AsusMSP",{"\n"}{"   "}"roles": null,{"\n"}{"   "}"affiliation": "",{"\n"}{"   "}"enrollmentSecret": "",{"\n"}{"   "}"enrollment": {"{"}{"\n"}{"      "}"signingIdentity": "dc3adc23b09245fa98e3b56f728be84be059bec48adaed61a14f0cf34a35ec9f",{"\n"}{"      "}"identity": {"{"}{"\n"}{"         "}"certificate": "-----BEGIN CERTIFICATE-----\nMIICATCCAaegAwIBAgIQT3v7o+p//03xnQfb9dB59zAKBggqhkjOPQQDAjBjMQsw\nCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy\nYW5jaXNjbzERMA8GA1UEChMIQXN1cy5jb20xFDASBgNVBAMTC2NhLkFzdXMuY29t\nMB4XDTE3MDgzMTE1MTU0NFoXDTI3MDgyOTE1MTU0NFowUzELMAkGA1UEBhMCVVMx\nEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xFzAV\nBgNVBAMMDkFkbWluQEFzdXMuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE\n5wuHvwyKJZViGZ/gaNE7KLIQ1WsL5DfonihuhKhq5hkk+w/UrW3vHBe/f+FCdqOp\nMYS+VXnMWODktgzdnKQWAaNNMEswDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQC\nMAAwKwYDVR0jBCQwIoAgX55VvJuXVkxZN4GHDAPB9Vlcnad1tturRilnAkiLhdsw\nCgYIKoZIzj0EAwIDSAAwRQIhAMhMFxHB1LvsRhFAc7CS4XhlCRCkn5MAo62ePd1O\nYPV0AiBqqjAQhRvCM/tN8l8VIXSajQqAZBqhI18xNrII5ZU5Ag==\n-----END CERTIFICATE-----\n"{"\n"}{"      "}{"}"}{"\n"}{"   "}{"}"}{"\n"}{"}"}{"\n"}</code></pre>
                    <p>Notice the <code className="hljs hl-inline">\n</code> inserted in the <code className="hljs hl-inline">certificate</code> field.</p>
                    <p>Finally, we have to copy the private key into <code className="hljs hl-inline">~/.hfc-key-store/</code>:</p>
                    <pre><code className="hljs sh">{"\n"}cp ./dc3adc23b09245fa98e3b56f728be84be059bec48adaed61a14f0cf34a35ec9f_sk ~/.hfc-key-store/dc3adc23b09245fa98e3b56f728be84be059bec48adaed61a14f0cf34a35ec9f-priv{"\n"}</code></pre>
                    <p>Do not forget to adjust the name of the file with the name, or <code className="hljs hl-inline">signingIdentity</code>, of your private key above. Notice, we need to change the name suffix from <code className="hljs hl-inline">_sk</code> to <code className="hljs hl-inline">-priv</code>.</p>
                    <div className="b9-info">
                        As you can see, this is a tedious task. To make your life easier, you can try to write a script for this task and share it in the support channel. Another option is to do this directly in the client.
                    </div>
                    <p>We will test the client in this module only for Asus. So you will need to repeat the steps also for Dell and HP if you plan to test the client with those organisations too.</p>
                    <h3>Test</h3>
                    <p>It may be helpful to get an overview:</p>
                    <p><img src="https://s3-eu-west-1.amazonaws.com/b9-academy-assets/course-assets/HLF-0/producerappoverview.png" /></p>
                    <p>It seems, we are ready for a test. If you have not yet written a script to initialise the network, save the following as <code className="hljs hl-inline">network.sh</code> in your <code className="hljs hl-inline">pcxchg</code> folder:</p>
                    <pre><code className="hljs sh">{"\n"}docker exec cli.Amazon bash -c 'peer channel create -c asus -f ./channels/Asus.tx -o orderer.pcxchg.com:7050'{"\n"}docker exec cli.Amazon bash -c 'peer channel create -c dell -f ./channels/Dell.tx -o orderer.pcxchg.com:7050'{"\n"}docker exec cli.Amazon bash -c 'peer channel create -c hp -f ./channels/HP.tx -o orderer.pcxchg.com:7050'{"\n"}{"\n"}docker exec cli.Amazon bash -c 'peer channel join -b asus.block'{"\n"}docker exec cli.Amazon bash -c 'peer channel join -b dell.block'{"\n"}docker exec cli.Amazon bash -c 'peer channel join -b hp.block'{"\n"}{"\n"}docker exec cli.Asus bash -c 'peer channel join -b asus.block'{"\n"}docker exec cli.HP bash -c 'peer channel join -b hp.block'{"\n"}docker exec cli.Dell bash -c 'peer channel join -b dell.block'{"\n"}{"\n"}docker exec cli.Asus bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c asus -f ./channels/asusanchor.tx'{"\n"}docker exec cli.Dell bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c dell -f ./channels/dellanchor.tx'{"\n"}docker exec cli.HP bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c hp -f ./channels/hpanchor.tx'{"\n"}{"\n"}docker exec cli.Amazon bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c asus -f ./channels/amazonanchorasus.tx'{"\n"}docker exec cli.Amazon bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c dell -f ./channels/amazonanchordell.tx'{"\n"}docker exec cli.Amazon bash -c 'peer channel update -o orderer.pcxchg.com:7050 -c hp -f ./channels/amazonanchorhp.tx'{"\n"}{"\n"}docker exec cli.Asus bash -c 'peer chaincode install -p pcxchg -n pcxchg -v 0'{"\n"}docker exec cli.HP bash -c 'peer chaincode install -p pcxchg -n pcxchg -v 0'{"\n"}docker exec cli.Dell bash -c 'peer chaincode install -p pcxchg -n pcxchg -v 0'{"\n"}docker exec cli.Amazon bash -c 'peer chaincode install -p pcxchg -n pcxchg -v 0'{"\n"}{"\n"}docker exec cli.Asus bash -c "peer chaincode instantiate -C asus -n pcxchg -v 0 -c '{"{"}\"Args\":[]{"}"}'"{"\n"}docker exec cli.HP bash -c "peer chaincode instantiate -C hp -n pcxchg -v 0 -c '{"{"}\"Args\":[]{"}"}'"{"\n"}docker exec cli.Dell bash -c "peer chaincode instantiate -C dell -n pcxchg -v 0 -c '{"{"}\"Args\":[]{"}"}'"{"\n"}</code></pre>
                    <p>Then you can set up your network with:</p>
                    <pre><code className="hljs sh">{"\n"}docker-compose -f docker-compose-pcxchg.yaml up{"\n"}</code></pre>
                    <p>and, in another terminal, run:</p>
                    <pre><code className="hljs sh">{"\n"}chmod +x network.sh{"\n"}./network.sh{"\n"}</code></pre>
                    <p>Now go back to your client folder, and run:</p>
                    <pre><code className="hljs sh">{"\n"}npm install{"\n"}node producerApp.js{"\n"}</code></pre>
                    <p>Ok, now the network and the app are running. In addition, the channels are created, peers joined the channels and the chaincode is installed and instantiated. </p>
                    <p>We can test our app in another terminal using <code className="hljs hl-inline">curl</code> with:</p>
                    <pre><code className="hljs sh">{"\n"}curl -s -X POST{"  "}http://localhost:4000/invoke -H "content-type: application/json" -d '{"{"}"args":["Asus","Asus001","foo","bar"]{"}"}'{"\n"}</code></pre>
                    <p>You can save this one as <code className="hljs hl-inline">query.sh</code>:</p>
                    <pre><code className="hljs sh">{"\n"}docker exec cli.Amazon bash -c "peer chaincode query -C asus -n pcxchg -c '{"{"}\"Args\":[\"queryStock\"]{"}"}'"{"\n"}docker exec cli.Amazon bash -c "peer chaincode query -C hp -n pcxchg -c '{"{"}\"Args\":[\"queryStock\"]{"}"}'"{"\n"}docker exec cli.Amazon bash -c "peer chaincode query -C dell -n pcxchg -c '{"{"}\"Args\":[\"queryStock\"]{"}"}'"{"\n"}</code></pre>
                    <p>So, you can play and create different PCs and can quickly check the stock for each channel with:</p>
                    <pre><code className="hljs sh">{"\n"}chmod +x query.sh{"\n"}./query.sh{"\n"}</code></pre>
                    <p>If everything works, we can make our app a bit more user friendly.</p>
                    <div className="b9-warning">
                        This client is written for the vanilla <code>pcxchg.go</code> from the chaincode section. If you have tested the access control, please make sure to remove the image and install the right chaincode.
                    </div>
                    <h3>Basic UI</h3>
                    <p>Let us create a simple <code className="hljs hl-inline">producerApp/UI.html</code> for the interaction with our client:</p>
                    <pre><code className="hljs html">{"\n"}&lt;html&gt;{"\n"}&lt;body&gt;{"\n"}{"  "}&lt;form enctype="application/json" action="invoke" method="POST"&gt;{"\n"}{"    "}&lt;input name="args" value="Asus"&gt;{"\n"}{"    "}&lt;input name="args" value="Asus001"&gt;{"\n"}{"    "}&lt;input name="args" value="foo"&gt;{"\n"}{"    "}&lt;input name="args" value="bar"&gt;{"\n"}{"    "}&lt;button type="submit" name="action"&gt;createPC!&lt;/button&gt;{"\n"}{"  "}&lt;/form&gt;{"\n"}&lt;/body&gt;{"\n"}&lt;/html&gt;{"\n"}</code></pre>
                    <p>That will look like:</p>
                    <p><img src="https://s3-eu-west-1.amazonaws.com/b9-academy-assets/course-assets/HLF-0/ui.png" /></p>
                    <p>Very basic for sure, but it does a stellar job.</p>
                    <p>Now, we have to replace the server part of the code to talk to our <code className="hljs hl-inline">UI.html</code>:</p>
                    <pre><code className="hljs javascript">{"\n"}// Server{"\n"}const express = require("express");{"\n"}const app = express();{"\n"}const http = require('http');{"\n"}const bodyParser = require('body-parser');{"\n"}{"\n"}app.engine('html', require('ejs').renderFile);{"\n"}{"\n"}const server = http.createServer(app).listen(4000, function() {"{"}{"}"});{"\n"}app.use(bodyParser.json());{"\n"}app.use(bodyParser.urlencoded({"{"} extended: true {"}"}));{"\n"}app.use(express.static(__dirname));{"\n"}app.set('views', __dirname);{"\n"}{"\n"}app.post('/invoke', function(req, res, next) {"{"}{"\n"}{"  "}const args = req.body.args;{"\n"}{"  "}invoke(options[args[0]], args.slice(1)){"\n"}{"    "}.then(() =&gt; res.send("Chaincode invoked")){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}res.status(500);{"\n"}{"      "}res.send(err.toString());{"\n"}{"    "}{"}"});{"\n"}{"}"});{"\n"}{"\n"}app.get('/', function(req, res) {"{"}{"\n"}{"  "}res.render('UI.html');{"\n"}{"}"});{"\n"}</code></pre>
                    <p>To use this we need to add the <code className="hljs hl-inline">ejs</code> package, run in your app folder:</p>
                    <pre><code className="hljs sh">{"\n"}npm install ejs@^1.0.0 --save{"\n"}</code></pre>
                    <div className="b9-info">
                        We use <code>ejs</code> to render the html page. You can get more information <a href="http://ejs.co/">here</a>.
                    </div>
                    <p>Now, we can run again the <code className="hljs hl-inline">producerApp.js</code>:</p>
                    <pre><code className="hljs sh">{"\n"}node producerApp.js{"\n"}</code></pre>
                    <p>Open your browser to <a href="http://localhost:4000/">http://localhost:4000/</a>. After creating a PC, run <code className="hljs hl-inline">./query.sh</code> to see, if the PCs are added to the stock.</p>
                    <h4>All together</h4>
                    <p>It could be difficult to keep an eye on everything we talked about. 
                        So, the last version of <code className="hljs hl-inline">producerApp.js</code> should look like:</p>
                    <pre><code className="hljs javascript">{"\n"}'use strict'; // self-defence{"\n"}{"\n"}// Functions from figure{"\n"}const hfc = require('fabric-client');{"\n"}let channel;{"\n"}const enrolUser = function(client, options) {"{"}{"\n"}{"  "}return hfc.newDefaultKeyValueStore({"{"} path: options.wallet_path {"}"}){"\n"}{"    "}.then(wallet =&gt; {"{"}{"\n"}{"      "}client.setStateStore(wallet);{"\n"}{"      "}return client.getUserContext(options.user_id, true);{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}{"\n"}const initNetwork = function(client, options, target) {"{"}{"\n"}{"  "}let channel;{"\n"}{"  "}try {"{"}{"\n"}{"    "}channel = client.newChannel(options.channel_id);{"\n"}{"    "}const peer = client.newPeer(options.peer_url);{"\n"}{"    "}target.push(peer);{"\n"}{"    "}channel.addPeer(peer);{"\n"}{"    "}channel.addOrderer(client.newOrderer(options.orderer_url));{"\n"}{"  "}{"}"} catch(e) {"{"} // channel already exists{"\n"}{"    "}channel = client.getChannel(options.channel_id);{"\n"}{"  "}{"}"}{"\n"}{"  "}return channel;{"\n"}{"}"};{"\n"}{"\n"}const transactionProposal = function(client, channel, request) {"{"}{"\n"}{"  "}request.txId = client.newTransactionID();{"\n"}{"  "}return channel.sendTransactionProposal(request);{"\n"}{"}"};{"\n"}{"\n"}const responseInspect = function(results) {"{"}{"\n"}{"  "}const proposalResponses = results[0];{"\n"}{"  "}const proposal = results[1];{"\n"}{"  "}const header = results[2];{"\n"}{"\n"}{"  "}if (proposalResponses &amp;&amp; proposalResponses.length &gt; 0 &amp;&amp;{"\n"}{"    "}proposalResponses[0].response &amp;&amp;{"\n"}{"    "}proposalResponses[0].response.status === 200) {"{"}{"\n"}{"    "}return true;{"\n"}{"  "}{"}"}{"\n"}{"  "}return false;{"\n"}{"}"};{"\n"}{"\n"}const sendOrderer = function(channel, request) {"{"}{"\n"}{"  "}return channel.sendTransaction(request);{"\n"}{"}"};{"\n"}{"\n"}const target = [];{"\n"}const client = new hfc();{"\n"}{"\n"}// Function invokes createPC on pcxchg{"\n"}function invoke(opt, param) {"{"}{"\n"}{"  "}return enrolUser(client, opt){"\n"}{"    "}.then(user =&gt; {"{"}{"\n"}{"      "}if(typeof user === "undefined" || !user.isEnrolled()){"\n"}{"        "}throw "User not enrolled";{"\n"}{"\n"}{"      "}channel = initNetwork(client, opt, target);{"\n"}{"      "}const request = {"{"}{"\n"}{"          "}targets: target,{"\n"}{"          "}chaincodeId: opt.chaincode_id,{"\n"}{"          "}fcn: 'createPC',{"\n"}{"          "}args: param,{"\n"}{"          "}chainId: opt.channel_id,{"\n"}{"          "}txId: null{"\n"}{"      "}{"}"};{"\n"}{"      "}return transactionProposal(client, channel, request);{"\n"}{"    "}{"}"}){"\n"}{"    "}.then(results =&gt; {"{"}{"\n"}{"      "}if (responseInspect(results)) {"{"}{"\n"}{"        "}const request = {"{"}{"\n"}{"          "}proposalResponses: results[0],{"\n"}{"          "}proposal: results[1],{"\n"}{"          "}header: results[2]{"\n"}{"        "}{"}"};{"\n"}{"        "}return sendOrderer(channel, request);{"\n"}{"      "}{"}"} else {"{"}{"\n"}{"        "}throw "Response is bad";{"\n"}{"      "}{"}"}{"\n"}{"    "}{"}"}){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}console.log(err);{"\n"}{"      "}throw err;{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}{"\n"}// Options{"\n"}const options = {"{"}{"\n"}{"  "}Asus : {"{"}{"\n"}{"    "}wallet_path: '&lt;YOUR APP PATH&gt;/producerApp/certs',{"\n"}{"    "}user_id: 'AsusAdmin',{"\n"}{"    "}channel_id: 'asus',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:7051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050'{"\n"}{"  "}{"}"},{"\n"}{"  "}HP : {"{"}{"\n"}{"    "}wallet_path: '&lt;YOUR APP PATH&gt;/producerApp/certs',{"\n"}{"    "}user_id: 'HPAdmin',{"\n"}{"    "}channel_id: 'hp',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:9051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050'{"\n"}{"  "}{"}"},{"\n"}{"  "}Dell : {"{"}{"\n"}{"    "}wallet_path: '&lt;YOUR APP PATH&gt;/producerApp/certs',{"\n"}{"    "}user_id: 'DellAdmin',{"\n"}{"    "}channel_id: 'dell',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:10051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050'{"\n"}{"  "}{"}"}{"\n"}{"}"};{"\n"}{"\n"}{"\n"}// Server{"\n"}const express = require("express");{"\n"}const app = express();{"\n"}const http = require('http');{"\n"}const bodyParser = require('body-parser');{"\n"}const path = require('path');{"\n"}{"\n"}app.engine('html', require('ejs').renderFile);{"\n"}{"\n"}const server = http.createServer(app).listen(4000, function() {"{"}{"}"});{"\n"}app.use(bodyParser.json());{"\n"}app.use(bodyParser.urlencoded({"{"} extended: true {"}"}));{"\n"}app.use(express.static(__dirname));{"\n"}app.set('views', __dirname);{"\n"}{"\n"}app.post('/invoke', function(req, res, next) {"{"}{"\n"}{"  "}const args = req.body.args;{"\n"}{"  "}invoke(options[args[0]], args.slice(1)){"\n"}{"    "}.then(() =&gt; res.send("Chaincode invoked")){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}res.status(500);{"\n"}{"      "}res.send(err.toString());{"\n"}{"    "}{"}"});{"\n"}{"}"});{"\n"}{"\n"}app.get('/', function(req, res) {"{"}{"\n"}{"  "}res.render('UI.html');{"\n"}{"}"});{"\n"}</code></pre>
                    <p>In addition:</p>
                    <ul>
                        <li>You should have the certificates and the keys in the right folders. </li>
                        <li>You need to replace <code className="hljs hl-inline">&lt;YOUR APP PATH&gt;</code> into the corresponding folder on your host.</li>
                        <li>You need to initialise the network with <code className="hljs hl-inline">docker-compose up</code>.</li>
                        <li>You must run <code className="hljs hl-inline">./network.sh</code>(or the steps inside it) to set up the network.</li>
                    </ul>
                    <p>Would you like a recap?</p>
                    </div>
                </div>
                <div className="vert vert-1" data-id="block-v1:B9lab+HLF-12+2018-07+type@video+block@7b0c6407fff640f4a4df597a150575a7">
                    <div className="xblock xblock-student_view xblock-student_view-video xmodule_display xmodule_VideoModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="video" data-request-token="16e0fd2a9e8a11e8be140a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@video+block@7b0c6407fff640f4a4df597a150575a7" data-type="Video" data-course-id="course-v1:B9lab+HLF-12+2018-07">
                        <h3 className="hd hd-2">Watch Rob build the producerApp and UI on Ubuntu</h3>
                        <iframe width="809" height="455" src="https://www.youtube.com/embed/4O4AAgZ5tdM" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
                    </div>
                </div>
                
                <div className="vert vert-2" data-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@7212e8abdfe546e0b01467935560764f">
                    <div className="xblock xblock-student_view xblock-student_view-html xmodule_display xmodule_HtmlModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="html" data-request-token="16e0fd2a9e8a11e8be140a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@7212e8abdfe546e0b01467935560764f" data-type="HTMLModule" data-course-id="course-v1:B9lab+HLF-12+2018-07">
                    <p>[1] Contributed by IBM and Digital Asset Holdings, Hyperledger Fabric is one of five Hyperledger Projects hosted by The Linux Foundation.</p>
                    </div>
                </div>
                </div>
            </div>
        );
    }
}

export default ProducerApp;