import React, { Component } from 'react';

class Introduction extends Component {

    render () {
        return (
            <div className="xblock xblock-student_view xblock-student_view-vertical" data-runtime-class="LmsRuntime" data-init="VerticalStudentView" data-course-id="course-v1:B9lab+HLF-12+2018-07" data-request-token="aca400829e8a11e8be140a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@vertical+block@f7c10958d4e74741a192ccfea7b7509d" data-block-type="vertical">
                <div className="vert-mod">
                <div className="vert vert-0" data-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@b9177d1e01f44a0cb56ae946894d9f43">
                    <div className="xblock xblock-student_view xblock-student_view-html xmodule_display xmodule_HtmlModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="html" data-request-token="aca400829e8a11e8be140a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@b9177d1e01f44a0cb56ae946894d9f43" data-type="HTMLModule" data-course-id="course-v1:B9lab+HLF-12+2018-07">
                    <h2>marketApp</h2>
                    <p>Let us now write the <code className="hljs hl-inline">marketApp.js</code>. Invoking <code className="hljs hl-inline">buyPC</code> will be more or less the same as invoking <code className="hljs hl-inline">createPC</code> in <code className="hljs hl-inline">producerApp.js</code>. 
                        We will also include a minimal server to communicate with it.</p>
                    <p>This time, we also have a <code className="hljs hl-inline">query</code>. So, what do we need to do for a query?</p>
                    <p><img src="https://s3-eu-west-1.amazonaws.com/b9-academy-assets/course-assets/HLF-0/marketoverview.png" /></p>
                    <p>As you can see, the right side of the figure is much simpler than an invoke. 
                        We only need to use the <a href="https://fabric-sdk-node.github.io/Channel.html#queryByChaincode">queryByChaincode</a> function.</p>
                    <p>Ok, let us implement this:</p>
                    <pre><code className="hljs javascript">{"\n"}const query = function(opt, param, request) {"{"}{"\n"}{"  "}return enrolUser(client, opt){"\n"}{"    "}.then(user =&gt; {"{"}{"\n"}{"      "}if(typeof user === "undefined" || !user.isEnrolled()) {"{"}{"\n"}{"        "}throw "User not enrolled";{"\n"}{"      "}{"}"}{"\n"}{"      "}channel = initNetwork(client, opt, target);{"\n"}{"      "}request.chaincodeId = opt.chaincode_id;{"\n"}{"      "}request.chainId = opt.channel_id;{"\n"}{"      "}request.args = param;{"\n"}{"      "}request.txId = client.newTransactionID();{"\n"}{"      "}return channel.queryByChaincode(request);{"\n"}{"    "}{"}"}){"\n"}{"    "}.then(queryResponses =&gt; {"{"}{"\n"}{"      "}const result=[];{"\n"}{"\n"}{"      "}for(let i = 0; i &lt; queryResponses.length; i++) {"{"}{"\n"}{"        "}result.push( queryResponses[i].toString('utf8') );{"\n"}{"      "}{"}"}{"\n"}{"\n"}{"      "}return JSON.stringify({"{"} result {"}"});{"\n"}{"    "}{"}"}){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}console.log(err);{"\n"}{"      "}throw err;{"\n"}{"    "}{"}"});{"\n"}{"}"}{"\n"}</code></pre>
                    <p>So, this time we need not communicate with the orderer. Indeed, a query does not change the ledger. <code className="hljs hl-inline">queryByChaincode</code> gives us a list of query results from the peers.</p>
                    <p>We will respond to the queries with JSON, so as to make writing a UI easier.</p>
                    <div className="b9-warning">
                        Do not forget to go through the steps for the certificates. This time, we are going to need the certificates for Amazon, which happens to be our only market.
                        <ul>
                        <li>Create and fill a <code>AmazonAdmin</code> file in <code>/marketApp/certs</code></li>
                        <li>Copy key to <code>~/.hfc-key-store</code></li>
                        </ul>
                    </div>
                    <h3>All together</h3>
                    <p>We recommend that you write the <code className="hljs hl-inline">marketApp.js</code> yourself. Just try it! </p>
                    <p>It will take up time but there is no better way than DIY to learn. </p>
                    <p>Remember, you know how to:</p>
                    <ul>
                        <li>invoke a chaincode. This time we want to invoke <code className="hljs hl-inline">buyPC</code>.</li>
                        <li>set up the certificates. We will use the Admin of Amazon.</li>
                        <li>write a minimal server to interact with your app</li>
                    </ul>
                    <p>If you run into problems, here is our reference implementation for <code className="hljs hl-inline">marketApp.js</code>:</p>
                    <pre><code className="hljs javascript">{"\n"}'use strict'; // self-defence{"\n"}{"\n"}// Functions from figure{"\n"}const hfc = require('fabric-client');{"\n"}let channel;{"\n"}const enrolUser = function(client, options) {"{"}{"\n"}{"  "}return hfc.newDefaultKeyValueStore({"{"} path: options.wallet_path {"}"}){"\n"}{"    "}.then(wallet =&gt; {"{"}{"\n"}{"      "}client.setStateStore(wallet);{"\n"}{"      "}return client.getUserContext(options.user_id, true);{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}{"\n"}const initNetwork= function(client, options, target) {"{"}{"\n"}{"  "}try {"{"}{"\n"}{"    "}channel = client.newChannel(options.channel_id);{"\n"}{"    "}const peer = client.newPeer(options.peer_url);{"\n"}{"    "}target.push(peer);{"\n"}{"    "}channel.addPeer(peer);{"\n"}{"    "}channel.addOrderer(client.newOrderer(options.orderer_url));{"\n"}{"  "}{"}"} catch(e) {"{"} // channel already exists{"\n"}{"    "}channel = client.getChannel(options.channel_id);{"\n"}{"  "}{"}"}{"\n"}{"  "}return channel;{"\n"}{"}"};{"\n"}{"\n"}const transactionProposal = function(client, channel, request) {"{"}{"\n"}{"  "}request.txId = client.newTransactionID();{"\n"}{"  "}return channel.sendTransactionProposal(request);{"\n"}{"}"};{"\n"}{"\n"}const responseInspect = function(results) {"{"}{"\n"}{"  "}const proposalResponses = results[0];{"\n"}{"  "}const proposal = results[1];{"\n"}{"  "}const header = results[2];{"\n"}{"\n"}{"  "}if (proposalResponses &amp;&amp; proposalResponses.length &gt; 0 &amp;&amp;{"\n"}{"    "}proposalResponses[0].response &amp;&amp;{"\n"}{"    "}proposalResponses[0].response.status === 200) {"{"}{"\n"}{"    "}return true;{"\n"}{"  "}{"}"}{"\n"}{"  "}return false;{"\n"}{"}"};{"\n"}{"\n"}const sendOrderer = function(channel, request) {"{"}{"\n"}{"  "}return channel.sendTransaction(request);{"\n"}{"}"};{"\n"}{"\n"}const target = [];{"\n"}const client = new hfc();{"\n"}{"\n"}function invoke(opt, param) {"{"}{"\n"}{"  "}return enrolUser(client, opt){"\n"}{"    "}.then(user =&gt; {"{"}{"\n"}{"      "}if(typeof user === "undefined" || !user.isEnrolled()){"\n"}{"        "}throw "User not enrolled";{"\n"}{"\n"}{"      "}channel = initNetwork(client, opt, target);{"\n"}{"      "}const request = {"{"}{"\n"}{"          "}targets: target,{"\n"}{"          "}chaincodeId: opt.chaincode_id,{"\n"}{"          "}fcn: 'buyPC',{"\n"}{"          "}args: param,{"\n"}{"          "}chainId: opt.channel_id,{"\n"}{"          "}txId: null{"\n"}{"      "}{"}"};{"\n"}{"      "}return transactionProposal(client, channel, request);{"\n"}{"    "}{"}"}){"\n"}{"    "}.then(results =&gt; {"{"}{"\n"}{"      "}if (responseInspect(results)) {"{"}{"\n"}{"        "}const request = {"{"}{"\n"}{"          "}proposalResponses: results[0],{"\n"}{"          "}proposal: results[1],{"\n"}{"          "}header: results[2]{"\n"}{"        "}{"}"};{"\n"}{"        "}return sendOrderer(channel, request);{"\n"}{"      "}{"}"} else {"{"}{"\n"}{"        "}throw "Response is bad";{"\n"}{"      "}{"}"}{"\n"}{"    "}{"}"}){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}console.log(err);{"\n"}{"      "}throw err;{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}{"\n"}const query = function(opt, param, request) {"{"}{"\n"}{"  "}return enrolUser(client, opt){"\n"}{"    "}.then(user =&gt; {"{"}{"\n"}{"      "}if(typeof user === "undefined" || !user.isEnrolled()) {"{"}{"\n"}{"        "}throw "User not enrolled";{"\n"}{"      "}{"}"}{"\n"}{"      "}channel = initNetwork(client, opt, target);{"\n"}{"      "}request.chaincodeId = opt.chaincode_id;{"\n"}{"      "}request.chainId = opt.channel_id;{"\n"}{"      "}request.args = param;{"\n"}{"      "}request.txId = client.newTransactionID();{"\n"}{"      "}return channel.queryByChaincode(request);{"\n"}{"    "}{"}"}){"\n"}{"    "}.then(queryResponses =&gt; {"{"}{"\n"}{"      "}const result=[];{"\n"}{"\n"}{"      "}for(let i = 0; i &lt; queryResponses.length; i++) {"{"}{"\n"}{"        "}result.push( queryResponses[i].toString('utf8') );{"\n"}{"      "}{"}"}{"\n"}{"\n"}{"      "}return JSON.stringify({"{"} result {"}"});{"\n"}{"    "}{"}"}){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}console.log(err);{"\n"}{"      "}throw err;{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}{"\n"}// Options{"\n"}const options = {"{"}{"\n"}{"  "}Asus : {"{"}{"\n"}{"    "}wallet_path: '&lt;YOUR APP PATH&gt;/marketApp/certs',{"\n"}{"    "}user_id: 'AmazonAdmin',{"\n"}{"    "}channel_id: 'asus',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:8051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050'{"\n"}{"  "}{"}"},{"\n"}{"  "}Hp : {"{"}{"\n"}{"    "}wallet_path: '&lt;YOUR APP PATH&gt;/marketApp/certs',{"\n"}{"    "}user_id: 'AmazonAdmin',{"\n"}{"    "}channel_id: 'hp',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:8051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050'{"\n"}{"  "}{"}"},{"\n"}{"  "}Dell : {"{"}{"\n"}{"    "}wallet_path: '&lt;YOUR APP PATH&gt;/marketApp/certs',{"\n"}{"    "}user_id: 'AmazonAdmin',{"\n"}{"    "}channel_id: 'dell',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:8051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050'{"\n"}{"  "}{"}"}{"\n"}{"}"};{"\n"}{"\n"}const requests = {"{"}{"\n"}{"  "}buyPC: {"{"}{"\n"}{"    "}targets: null,{"\n"}{"    "}chaincodeId: null,{"\n"}{"    "}fcn: 'buyPC',{"\n"}{"    "}args: null,{"\n"}{"    "}chainId: null,{"\n"}{"    "}txId: null{"\n"}{"  "}{"}"},{"\n"}{"  "}queryDetail: {"{"}{"\n"}{"    "}targets: null,{"\n"}{"    "}chaincodeId: null,{"\n"}{"    "}fcn: 'queryDetail',{"\n"}{"    "}args: null,{"\n"}{"    "}chainId: null,{"\n"}{"    "}txId: null{"\n"}{"  "}{"}"},{"\n"}{"  "}queryStock: {"{"}{"\n"}{"    "}targets: null,{"\n"}{"    "}chaincodeId: null,{"\n"}{"    "}fcn: 'queryStock',{"\n"}{"    "}args: null,{"\n"}{"    "}chainId: null,{"\n"}{"    "}txId: null{"\n"}{"  "}{"}"}{"\n"}{"}"};{"\n"}{"\n"}// Server{"\n"}const express = require("express");{"\n"}const app = express();{"\n"}const http = require('http');{"\n"}const bodyParser = require('body-parser');{"\n"}const path = require('path');{"\n"}{"\n"}app.engine('html', require('ejs').renderFile);{"\n"}{"\n"}const server = http.createServer(app).listen(5000, function() {"{"}{"}"});{"\n"}app.use(bodyParser.urlencoded({"{"} extended: true {"}"}));{"\n"}app.use(express.static(__dirname));{"\n"}app.set('views', __dirname);{"\n"}{"\n"}app.post('/buyPC/invoke', function(req, res, next) {"{"}{"\n"}{"  "}const args = req.body.args;{"\n"}{"  "}invoke(options[args[0]], args.slice(1), requests["buyPC"]){"\n"}{"    "}.then(() =&gt; res.send("Chaincode invoked")){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}res.status(500);{"\n"}{"      "}res.send(err.toString());{"\n"}{"    "}{"}"});{"\n"}{"}"});{"\n"}{"\n"}app.get('/buyPC', function(req, res) {"{"}{"\n"}{"  "}res.render('buyPC.html');{"\n"}{"}"});{"\n"}{"\n"}app.get('/API/queryStock', function(req, res,next) {"{"}{"\n"}{"  "}query(options[req.query.producer], [''], requests["queryStock"]){"\n"}{"    "}.then(result =&gt; res.json(result)){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}res.status(500);{"\n"}{"      "}res.send(err.toString());{"\n"}{"    "}{"}"});{"\n"}{"}"});{"\n"}{"\n"}app.get('/API/queryDetails', function(req, res, next) {"{"}{"\n"}{"  "}query({"\n"}{"      "}options[req.query.producer],{"\n"}{"      "}[ req.query.serial.toString() ],{"\n"}{"      "}requests[ "queryDetail" ]){"\n"}{"    "}.then(result =&gt; res.json(result)){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}res.status(500);{"\n"}{"      "}res.send(err.toString());{"\n"}{"    "}{"}"});{"\n"}{"}"});{"\n"}</code></pre>
                    <div className="b9-info">
                        You see above, that the options and the requests are uneconomical. But we keep the options. This way, <code>marketApp</code> is more or less an extension of <code>producerApp</code>. And this should help you to undestand the code.
                    </div>
                    <p>Let us again create a minimal UI in HTML for <code className="hljs hl-inline">buyPC</code>:</p>
                    <pre><code className="hljs html">{"\n"}&lt;html&gt;{"\n"}&lt;body&gt;{"\n"}{"  "}&lt;form enctype="application/json" action="/buyPC/invoke" method="POST"&gt;{"\n"}{"    "}&lt;input name="args" value="Asus"&gt;{"\n"}{"    "}&lt;input name="args" value="Asus001"&gt;{"\n"}{"    "}&lt;button type="submit" name="action"&gt;buyPC!&lt;/button&gt;{"\n"}{"  "}&lt;/form&gt;{"\n"}&lt;/body&gt;{"\n"}&lt;/html&gt;{"\n"}</code></pre>
                    <p>and save it as <code className="hljs hl-inline">marketApp/buyPC.html</code>. </p>
                    <p>This overview about our client may be helpful for you:</p>
                    <p><img src="https://s3-eu-west-1.amazonaws.com/b9-academy-assets/course-assets/HLF-0/marketappoverview.png" /></p>
                    <h3>Test</h3>
                    <p>Before we test the <code className="hljs hl-inline">marketApp</code>, check:</p>
                    <ul>
                        <li><strong>PCXCHG</strong> network is running</li>
                        <li><code className="hljs hl-inline">./network.sh</code>:
                        <ul>
                            <li>Channels are created</li>
                            <li>Peers joined channels</li>
                            <li>Chaincode is installed on peers</li>
                            <li>Chaincode is instantiated on the channels</li>
                        </ul></li>
                        <li>Certificates and keys are in the right place</li>
                        <li>NodeJS modules are installed e.g. with <code className="hljs hl-inline">npm install fabric-client@^1.1.0 express@^4.15.2 body-parser@^1.17.1 ejs@^1.0.0 --save</code></li>
                    </ul>
                    <p>First run <code className="hljs hl-inline">producerApp.js</code> and create some PCs as Asus.</p>
                    <p>If you think, there are enough PCs to play with, run the <code className="hljs hl-inline">marketApp.js</code> and in your browser go to:</p>
                    <p><a href="http://localhost:5000/API/queryStock?producer=Asus">http://localhost:5000/API/queryStock?producer=Asus</a></p>
                    <p>Check details with:</p>
                    <p><a href="http://localhost:5000/API/queryDetails?producer=Asus&serial=REPLACE">http://localhost:5000/API/queryDetails?producer=Asus&amp;serial=REPLACE</a></p>
                    <p>At the moment, the JSON responses of <code className="hljs hl-inline">queryStock</code> and <code className="hljs hl-inline">queryDetails</code> are not well formatted, but we will set that implementation detail aside for simplicity's sake.</p>
                    <p>Now, it is time to buy a PC with:</p>
                    <pre><code className="hljs url">{"\n"}http://localhost:5000/buyPC{"\n"}</code></pre>
                    <p>in your browser. Do you see how it changes the status of a PC, if you check with <code className="hljs hl-inline">/API/queryDetails</code>?</p>
                    </div>
                </div>
                </div>
            </div>
        );
    }
}

export default Introduction;