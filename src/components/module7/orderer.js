'use strict';

import React, { Component } from 'react';

class Orderer extends Component {

    render () {
        return (
            <div className="xblock xblock-student_view xblock-student_view-vertical" data-runtime-class="LmsRuntime" data-init="VerticalStudentView" data-course-id="course-v1:B9lab+HLF-12+2018-07" data-request-token="9817342aaa5811e8be1d0a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@vertical+block@d80679de33ec4ef586efc1b4bb422703" data-block-type="vertical">
                <div className="vert-mod">
                <div className="vert vert-0" data-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@79f36e4e0e924a2ca43d493e92a4aee0">
                    <div className="xblock xblock-student_view xblock-student_view-html xmodule_display xmodule_HtmlModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="html" data-request-token="9817342aaa5811e8be1d0a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@79f36e4e0e924a2ca43d493e92a4aee0" data-type="HTMLModule" data-course-id="course-v1:B9lab+HLF-12+2018-07">
                    <h2>Orderer</h2>
                    <p>So far we have used only one orderer. It is time to change this and to explore more of them!</p>
                    <h3>Kafka</h3>
                    <p>Take your time to read the <a href="https://kafka.apache.org/intro.html">introduction</a> on Apache Kafka page. Make sure that you understand this figure:
                        <img src="https://s3-eu-west-1.amazonaws.com/b9-academy-assets/course-assets/HLF-0/kafka.png" /></p>
                    <p>If we use Kafka instead of SOLO we will have crash fault tolerance. As long as sBFT is not available, this is the only way to have more than one orderer.</p>
                    <div className="b9-info">
                        A Kafka server is also called Kafka broker.
                    </div>
                    <h4>ZooKeeper</h4>
                    <p>Apache Kafka uses <a href="https://zookeeper.apache.org/">Apache ZooKeeper</a>. ZooKeeper is a service for distributed applications. It offers various features. Kafka uses the configuration management. </p>
                    <div className="b9-info">
                        It is interesting how ZooKeeper works and how Kafka uses it. But for us, it is enough to know, that Kafka servers require ZooKeeper.
                    </div>
                    <h4>Images</h4>
                    <p>Hyperledger Fabric[1] provides images for Kafka and ZooKeeper. You have already pulled them by downloading the <code className="hljs hl-inline">fabric-samples</code>:</p>
                    <ul>
                        <li><a href="https://hub.docker.com/r/hyperledger/fabric-kafka/">fabric-kafka</a></li>
                        <li><a href="https://hub.docker.com/r/hyperledger/fabric-zookeeper/">fabric-zookeeper</a></li>
                    </ul>
                    <p>So, we can use them to extend our PCXCHG network. </p>
                    <h3>Kafka based Ordering Service(OS)</h3>
                    <p>Let us first briefly talk about how Kafka fits into Hyperledger Fabric[1]. As you now know, there are topics in Kafka. </p>
                    <p>Each Hyperledger Fabric[1] channel will be mapped to a topic with a single partition. Orderers of the Ordering Service relay transactions to the corresponding partition. These partitions will correspond to producera. The blocks are still created by the orderers which are also consumers. The orderers do not communicate with each other directly. They get an ordered list of transactions from Kafka. </p>
                    <p>Remember the orderer configuration:</p>
                    <pre><code className="hljs yaml">{"\n"}################################################################################{"\n"}#{"\n"}#{"   "}SECTION: Orderer{"\n"}#{"\n"}#{"   "}- This section defines the values to encode into a config transaction or{"\n"}#{"   "}genesis block for orderer related parameters{"\n"}#{"\n"}################################################################################{"\n"}Orderer: &amp;OrdererDefaults{"\n"}{"\n"}{"    "}# Orderer Type: The orderer implementation to start{"\n"}{"    "}# Available types are "solo" and "kafka"{"\n"}{"    "}OrdererType: solo{"\n"}{"\n"}{"    "}Addresses:{"\n"}{"        "}- orderer.example.com:7050{"\n"}{"\n"}{"    "}# Batch Timeout: The amount of time to wait before creating a batch{"\n"}{"    "}BatchTimeout: 2s{"\n"}{"\n"}{"    "}# Batch Size: Controls the number of messages batched into a block{"\n"}{"    "}BatchSize:{"\n"}{"\n"}{"        "}# Max Message Count: The maximum number of messages to permit in a batch{"\n"}{"        "}MaxMessageCount: 10{"\n"}{"\n"}{"        "}# Absolute Max Bytes: The absolute maximum number of bytes allowed for{"\n"}{"        "}# the serialized messages in a batch.{"\n"}{"        "}AbsoluteMaxBytes: 99 MB{"\n"}{"\n"}{"        "}# Preferred Max Bytes: The preferred maximum number of bytes allowed for{"\n"}{"        "}# the serialized messages in a batch. A message larger than the preferred{"\n"}{"        "}# max bytes will result in a batch larger than preferred max bytes.{"\n"}{"        "}PreferredMaxBytes: 512 KB{"\n"}{"\n"}{"    "}Kafka:{"\n"}{"        "}# Brokers: A list of Kafka brokers to which the orderer connects{"\n"}{"        "}# NOTE: Use IP:port notation{"\n"}{"        "}Brokers:{"\n"}{"            "}- 127.0.0.1:9092{"\n"}{"\n"}{"    "}# Organizations is the list of orgs which are defined as participants on{"\n"}{"    "}# the orderer side of the network{"\n"}{"    "}Organizations:{"\n"}</code></pre>
                    <p>Read the <a href="https://docs.google.com/document/d/19JihmW-8blTzN99lAubOfseLUZqdrB6sBR0HsRgCAnY/edit">design documentation for kafka-based OS</a> and shift your attention to the list of problems and solutions. The first are solved with the options above. </p>
                    <p>Another useful document is the <a href="http://hyperledger-fabric.readthedocs.io/en/latest/kafka.html">offical documentation</a> of Hyperledger Fabric[1].
                        It tells you to have at least 4 Kafka brokers for crash fault tolerance. It also tells you to have 3,5 or 7 ZooKeeper Servers.</p>
                    <p>Ok, let's give it a try!</p>
                    <h3>Decentralized PCXCHG OS</h3>
                    <p>We will extend our PCXCHG network. What do we want to add?</p>
                    <ul>
                        <li>We will use 3 orderers</li>
                        <li>We will use 3 ZooKeeper servers</li>
                        <li>We will use 4 Kafka brokers</li>
                    </ul>
                    <p>So, the first thing we need to do is to generate more certificates for the orderers. The easiest way to do so is by removing your <code className="hljs hl-inline">crypto-config</code> folder and changing the number of orderers in <code className="hljs hl-inline">crypto.sh</code>:</p>
                    <pre><code className="hljs sh">{"\n"}ORGS="\{"\n"}{"   "}orderer:pcxchg.com:7100:7101:3 \{"\n"}{"   "}peer:Asus.com:7102:7103:2 \{"\n"}{"   "}peer:Amazon.com:7104:7105:2 \{"\n"}{"   "}peer:HP.com:7106:7107:2 \{"\n"}{"   "}peer:Dell.com:7108:7109:2 \{"\n"}"{"\n"}</code></pre>
                    <p>save it and run:</p>
                    <pre><code className="hljs sh">{"\n"}./crypto.sh{"\n"}</code></pre>
                    <p>Next, open <code className="hljs hl-inline">configtx.yaml</code> and replace it with:</p>
                    <pre><code className="hljs yaml">{"\n"}Profiles:{"\n"}{"\n"}{"    "}PCXCHGOrdererGenesis:{"\n"}{"        "}Orderer:{"\n"}{"            "}&lt;&lt;: *OrdererDefaults{"\n"}{"            "}Organizations:{"\n"}{"                "}- *OrdererOrg{"\n"}{"        "}Consortiums:{"\n"}{"            "}PCXCHG:{"\n"}{"                "}Organizations:{"\n"}{"                    "}- *Asus{"\n"}{"                    "}- *Dell{"\n"}{"                    "}- *HP{"\n"}{"                    "}- *Amazon{"\n"}{"\n"}{"    "}AsusChannel:{"\n"}{"        "}Consortium: PCXCHG{"\n"}{"        "}Application:{"\n"}{"            "}&lt;&lt;: *ApplicationDefaults{"\n"}{"            "}Organizations:{"\n"}{"                "}- *Asus{"\n"}{"                "}- *Amazon{"\n"}{"    "}DellChannel:{"\n"}{"        "}Consortium: PCXCHG{"\n"}{"        "}Application:{"\n"}{"            "}&lt;&lt;: *ApplicationDefaults{"\n"}{"            "}Organizations:{"\n"}{"                "}- *Dell{"\n"}{"                "}- *Amazon{"\n"}{"    "}HPChannel:{"\n"}{"        "}Consortium: PCXCHG{"\n"}{"        "}Application:{"\n"}{"            "}&lt;&lt;: *ApplicationDefaults{"\n"}{"            "}Organizations:{"\n"}{"                "}- *HP{"\n"}{"                "}- *Amazon{"\n"}{"\n"}Organizations:{"\n"}{"\n"}{"    "}- &amp;OrdererOrg{"\n"}{"        "}Name: OrdererMSP{"\n"}{"        "}ID: OrdererMSP{"\n"}{"\n"}{"        "}MSPDir: crypto-config/ordererOrganizations/pcxchg.com/msp{"\n"}{"\n"}{"    "}- &amp;Asus{"\n"}{"        "}Name: AsusMSP{"\n"}{"        "}ID: AsusMSP{"\n"}{"\n"}{"        "}MSPDir: crypto-config/peerOrganizations/Asus.com/msp{"\n"}{"\n"}{"        "}AnchorPeers:{"\n"}{"            "}- Host: peer0.Asus.com{"\n"}{"              "}Port: 7051{"\n"}{"\n"}{"    "}- &amp;Amazon{"\n"}{"        "}Name: AmazonMSP{"\n"}{"        "}ID: AmazonMSP{"\n"}{"\n"}{"        "}MSPDir: crypto-config/peerOrganizations/Amazon.com/msp{"\n"}{"\n"}{"        "}AnchorPeers:{"\n"}{"            "}- Host: peer0.Amazon.com{"\n"}{"              "}Port: 7051{"\n"}{"\n"}{"    "}- &amp;Dell{"\n"}{"        "}Name: DellMSP{"\n"}{"        "}ID: DellMSP{"\n"}{"\n"}{"        "}MSPDir: crypto-config/peerOrganizations/Dell.com/msp{"\n"}{"\n"}{"        "}AnchorPeers:{"\n"}{"            "}- Host: peer0.Dell.com{"\n"}{"              "}Port: 7051{"\n"}{"\n"}{"    "}- &amp;HP{"\n"}{"        "}Name: HPMSP{"\n"}{"        "}ID: HPMSP{"\n"}{"\n"}{"        "}MSPDir: crypto-config/peerOrganizations/HP.com/msp{"\n"}{"\n"}{"        "}AnchorPeers:{"\n"}{"            "}- Host: peer0.HP.com{"\n"}{"              "}Port: 7051{"\n"}{"\n"}Orderer: &amp;OrdererDefaults{"\n"}{"    "}OrdererType: kafka{"\n"}{"\n"}{"    "}Addresses:{"\n"}{"        "}- orderer0.pcxchg.com:7050{"\n"}{"        "}- orderer1.pcxchg.com:7050{"\n"}{"        "}- orderer2.pcxchg.com:7050{"\n"}{"\n"}{"    "}BatchTimeout: 2s{"\n"}{"\n"}{"    "}BatchSize:{"\n"}{"\n"}{"        "}MaxMessageCount: 10{"\n"}{"        "}AbsoluteMaxBytes: 99 MB{"\n"}{"        "}PreferredMaxBytes: 512 KB{"\n"}{"\n"}{"\n"}{"    "}Kafka:{"\n"}{"        "}Brokers:{"\n"}{"            "}- kafka0:9092{"\n"}{"            "}- kafka1:9092{"\n"}{"            "}- kafka2:9092{"\n"}{"            "}- kafka3:9092{"\n"}{"\n"}{"    "}Organizations:{"\n"}{"\n"}{"\n"}Application: &amp;ApplicationDefaults{"\n"}{"    "}Organizations:{"\n"}</code></pre>
                    <p>Do you see, what is different now? Remember, we will test the minimum case of 4 Kafka brokers and we have 3 orderers. </p>
                    <div className="b9-info">
                        These settings will be applied for each orderer.
                    </div>
                    <p>It is time to recreate the <code className="hljs hl-inline">genesis.block</code> and the channel configuration transactions. Therefore, you can use <code className="hljs hl-inline">setup.sh</code> from last section:</p>
                    <pre><code className="hljs sh">{"\n"}./setup.sh{"\n"}</code></pre>
                    <p>That was the easy part. Save this as <code className="hljs hl-inline">kafka.yaml</code> in your <code className="hljs hl-inline">pcxchg</code> folder:</p>
                    <pre><code className="hljs yaml">{"\n"}version: '2'{"\n"}{"\n"}services:{"\n"}{"\n"}{"  "}zookeeper:{"\n"}{"    "}image: hyperledger/fabric-zookeeper{"\n"}{"    "}restart: always{"\n"}{"    "}ports:{"\n"}{"      "}- '2181'{"\n"}{"      "}- '2888'{"\n"}{"      "}- '3888'{"\n"}{"\n"}{"  "}kafka:{"\n"}{"    "}image: hyperledger/fabric-kafka{"\n"}{"    "}restart: always{"\n"}{"    "}environment:{"\n"}{"      "}- KAFKA_MESSAGE_MAX_BYTES=103809024{"\n"}{"      "}- KAFKA_REPLICA_FETCH_MAX_BYTES=103809024{"\n"}{"      "}- KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false{"\n"}</code></pre>
                    <p>You can find the original file <a href="https://github.com/hyperledger/fabric/blob/release-1.1/bddtests/dc-orderer-kafka-base.yml">here</a>. Have a look at it, the comments tell you what the environment variables are good for.</p>
                    <p>Next, we will change <a href="https://github.com/hyperledger/fabric/blob/release-1.1/bddtests/dc-orderer-base.yml">this</a> and save it as <code className="hljs hl-inline">orderer.yaml</code> in <code className="hljs hl-inline">pcxchg</code> folder:</p>
                    <pre><code className="hljs yaml">{"\n"}version: '2'{"\n"}{"\n"}services:{"\n"}{"\n"}{"  "}orderer:{"\n"}{"    "}image: hyperledger/fabric-orderer:x86_64-1.1.0{"\n"}{"    "}environment:{"\n"}{"      "}- ORDERER_GENERAL_LISTENADDRESS=0.0.0.0{"\n"}{"      "}- ORDERER_GENERAL_GENESISMETHOD=file{"\n"}{"      "}- ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block{"\n"}{"      "}- ORDERER_GENERAL_LOCALMSPID=OrdererMSP{"\n"}{"      "}- ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp{"\n"}{"\n"}{"      "}- ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s{"\n"}{"      "}- ORDERER_KAFKA_RETRY_SHORTTOTAL=30s{"\n"}{"      "}- ORDERER_KAFKA_VERBOSE=true{"\n"}{"    "}volumes:{"\n"}{"      "}- ./orderer/genesis.block:/var/hyperledger/orderer/orderer.genesis.block{"\n"}{"    "}command: orderer{"\n"}{"    "}working_dir: /opt/gopath/src/github.com/hyperledger/fabric{"\n"}{"    "}ports:{"\n"}{"      "}- '7050'{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}</code></pre>
                    <p>Finally, there is a network <a href="https://github.com/hyperledger/fabric/blob/release-1.1/bddtests/dc-orderer-kafka.yml">configuration</a> in the repository. We will change and use it to extend our <code className="hljs hl-inline">docker-compose-pcxchg.yaml</code>. </p>
                    <p>Here an overview of the new consensus we use:
                        <img src="https://s3-eu-west-1.amazonaws.com/b9-academy-assets/course-assets/HLF-0/consensus.png" /></p>
                    <div className="b9-warning">
                        You can use the following configuration, but we recommend to try it first by yourself. At least, try to understand the changes we made and read the comments in the repository.
                    </div>
                    <p>So, our reference implementation for <code className="hljs hl-inline">docker-compose-pcxchg.yaml</code> is:</p>
                    <pre><code className="hljs yaml">{"\n"}version: '2'{"\n"}{"\n"}networks:{"\n"}{"  "}pcxchg:{"\n"}{"\n"}services:{"\n"}{"\n"}{"  "}zookeeper0:{"\n"}{"    "}container_name: zookeeper0{"\n"}{"    "}extends:{"\n"}{"      "}file: kafka.yaml{"\n"}{"      "}service: zookeeper{"\n"}{"    "}environment:{"\n"}{"      "}- ZOO_MY_ID=1{"\n"}{"      "}- ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}zookeeper1:{"\n"}{"    "}container_name: zookeeper1{"\n"}{"    "}extends:{"\n"}{"      "}file: kafka.yaml{"\n"}{"      "}service: zookeeper{"\n"}{"    "}environment:{"\n"}{"      "}- ZOO_MY_ID=2{"\n"}{"      "}- ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}zookeeper2:{"\n"}{"    "}container_name: zookeeper2{"\n"}{"    "}extends:{"\n"}{"      "}file: kafka.yaml{"\n"}{"      "}service: zookeeper{"\n"}{"    "}environment:{"\n"}{"      "}- ZOO_MY_ID=3{"\n"}{"      "}- ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}kafka0:{"\n"}{"    "}container_name: kafka0{"\n"}{"    "}extends:{"\n"}{"      "}file: kafka.yaml{"\n"}{"      "}service: kafka{"\n"}{"    "}environment:{"\n"}{"      "}- KAFKA_BROKER_ID=0{"\n"}{"      "}- KAFKA_MIN_INSYNC_REPLICAS=2{"\n"}{"      "}- KAFKA_DEFAULT_REPLICATION_FACTOR=3{"\n"}{"      "}- KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181{"\n"}{"    "}depends_on:{"\n"}{"      "}- zookeeper0{"\n"}{"      "}- zookeeper1{"\n"}{"      "}- zookeeper2{"\n"}{"    "}ports:{"\n"}{"      "}- 9092:9092{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}kafka1:{"\n"}{"    "}container_name: kafka1{"\n"}{"    "}extends:{"\n"}{"      "}file: kafka.yaml{"\n"}{"      "}service: kafka{"\n"}{"    "}environment:{"\n"}{"      "}- KAFKA_BROKER_ID=1{"\n"}{"      "}- KAFKA_DEFAULT_REPLICATION_FACTOR=3{"\n"}{"      "}- KAFKA_MIN_INSYNC_REPLICAS=2{"\n"}{"      "}- KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181{"\n"}{"    "}depends_on:{"\n"}{"      "}- zookeeper0{"\n"}{"      "}- zookeeper1{"\n"}{"      "}- zookeeper2{"\n"}{"    "}ports:{"\n"}{"      "}- 10092:9092{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}kafka2:{"\n"}{"    "}container_name: kafka2{"\n"}{"    "}extends:{"\n"}{"      "}file: kafka.yaml{"\n"}{"      "}service: kafka{"\n"}{"    "}environment:{"\n"}{"      "}- KAFKA_BROKER_ID=2{"\n"}{"      "}- KAFKA_DEFAULT_REPLICATION_FACTOR=3{"\n"}{"      "}- KAFKA_MIN_INSYNC_REPLICAS=2{"\n"}{"      "}- KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181{"\n"}{"    "}depends_on:{"\n"}{"      "}- zookeeper0{"\n"}{"      "}- zookeeper1{"\n"}{"      "}- zookeeper2{"\n"}{"    "}ports:{"\n"}{"      "}- 11092:9092{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}kafka3:{"\n"}{"    "}container_name: kafka3{"\n"}{"    "}extends:{"\n"}{"      "}file: kafka.yaml{"\n"}{"      "}service: kafka{"\n"}{"    "}environment:{"\n"}{"      "}- KAFKA_BROKER_ID=3{"\n"}{"      "}- KAFKA_DEFAULT_REPLICATION_FACTOR=3{"\n"}{"      "}- KAFKA_MIN_INSYNC_REPLICAS=2{"\n"}{"      "}- KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181{"\n"}{"    "}depends_on:{"\n"}{"      "}- zookeeper0{"\n"}{"      "}- zookeeper1{"\n"}{"      "}- zookeeper2{"\n"}{"    "}ports:{"\n"}{"      "}- 12092:9092{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}orderer0.pcxchg.com:{"\n"}{"    "}container_name: orderer0.pcxchg.com{"\n"}{"    "}extends:{"\n"}{"      "}file: orderer.yaml{"\n"}{"      "}service: orderer{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/ordererOrganizations/pcxchg.com/orderers/orderer0.pcxchg.com/msp:/var/hyperledger/orderer/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- zookeeper0{"\n"}{"      "}- zookeeper1{"\n"}{"      "}- zookeeper2{"\n"}{"      "}- kafka0{"\n"}{"      "}- kafka1{"\n"}{"      "}- kafka2{"\n"}{"      "}- kafka3{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}orderer1.pcxchg.com:{"\n"}{"    "}container_name: orderer1.pcxchg.com{"\n"}{"    "}extends:{"\n"}{"      "}file: orderer.yaml{"\n"}{"      "}service: orderer{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/ordererOrganizations/pcxchg.com/orderers/orderer1.pcxchg.com/msp:/var/hyperledger/orderer/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- zookeeper0{"\n"}{"      "}- zookeeper1{"\n"}{"      "}- zookeeper2{"\n"}{"      "}- kafka0{"\n"}{"      "}- kafka1{"\n"}{"      "}- kafka2{"\n"}{"      "}- kafka3{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}orderer2.pcxchg.com:{"\n"}{"    "}container_name: orderer2.pcxchg.com{"\n"}{"    "}extends:{"\n"}{"      "}file: orderer.yaml{"\n"}{"      "}service: orderer{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/ordererOrganizations/pcxchg.com/orderers/orderer2.pcxchg.com/msp:/var/hyperledger/orderer/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- zookeeper0{"\n"}{"      "}- zookeeper1{"\n"}{"      "}- zookeeper2{"\n"}{"      "}- kafka0{"\n"}{"      "}- kafka1{"\n"}{"      "}- kafka2{"\n"}{"      "}- kafka3{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}peer0.Asus.com:{"\n"}{"    "}container_name: peer0.Asus.com{"\n"}{"    "}extends:{"\n"}{"      "}file: ./peer.yaml{"\n"}{"      "}service: peer{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer0.Asus.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Asus.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=AsusMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.Asus.com:7051{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Asus.com/peers/peer0.Asus.com/msp:/etc/hyperledger/msp/peer{"\n"}{"    "}ports:{"\n"}{"      "}- 7051:7051{"\n"}{"      "}- 7053:7053{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer0.pcxchg.com{"\n"}{"      "}- orderer1.pcxchg.com{"\n"}{"      "}- orderer2.pcxchg.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}peer0.Dell.com:{"\n"}{"    "}container_name: peer0.Dell.com{"\n"}{"    "}extends:{"\n"}{"      "}file: ./peer.yaml{"\n"}{"      "}service: peer{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer0.Dell.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Dell.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=DellMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.Dell.com:7051{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Dell.com/peers/peer0.Dell.com/msp:/etc/hyperledger/msp/peer{"\n"}{"    "}ports:{"\n"}{"      "}- 10051:7051{"\n"}{"      "}- 10053:7053{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer0.pcxchg.com{"\n"}{"      "}- orderer1.pcxchg.com{"\n"}{"      "}- orderer2.pcxchg.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}peer0.HP.com:{"\n"}{"    "}container_name: peer0.HP.com{"\n"}{"    "}extends:{"\n"}{"      "}file: ./peer.yaml{"\n"}{"      "}service: peer{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer0.HP.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.HP.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=HPMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.HP.com:7051{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/HP.com/peers/peer0.HP.com/msp:/etc/hyperledger/msp/peer{"\n"}{"    "}ports:{"\n"}{"      "}- 9051:7051{"\n"}{"      "}- 9053:7053{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer0.pcxchg.com{"\n"}{"      "}- orderer1.pcxchg.com{"\n"}{"      "}- orderer2.pcxchg.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}peer0.Amazon.com:{"\n"}{"    "}container_name: peer0.Amazon.com{"\n"}{"    "}extends:{"\n"}{"      "}file: ./peer.yaml{"\n"}{"      "}service: peer{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer0.Amazon.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Amazon.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=AmazonMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.Amazon.com:7051{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Amazon.com/peers/peer0.Amazon.com/msp:/etc/hyperledger/msp/peer{"\n"}{"    "}ports:{"\n"}{"      "}- 8051:7051{"\n"}{"      "}- 8053:7053{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer0.pcxchg.com{"\n"}{"      "}- orderer1.pcxchg.com{"\n"}{"      "}- orderer2.pcxchg.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}cli.Asus:{"\n"}{"    "}extends:{"\n"}{"      "}file: ./cli.yaml{"\n"}{"      "}service: cli{"\n"}{"    "}container_name: cli.Asus{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=cli.Asus.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Asus.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=AsusMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@Asus.com/msp{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Asus.com:/etc/hyperledger/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- peer0.Asus.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}cli.Dell:{"\n"}{"    "}extends:{"\n"}{"      "}file: ./cli.yaml{"\n"}{"      "}service: cli{"\n"}{"    "}container_name: cli.Dell{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=cli.Dell.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Dell.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=DellMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@Dell.com/msp{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Dell.com:/etc/hyperledger/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- peer0.Dell.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}cli.HP:{"\n"}{"    "}extends:{"\n"}{"      "}file: ./cli.yaml{"\n"}{"      "}service: cli{"\n"}{"    "}container_name: cli.HP{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=cli.HP.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.HP.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=HPMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@HP.com/msp{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/HP.com:/etc/hyperledger/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- peer0.HP.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}cli.Amazon:{"\n"}{"    "}extends:{"\n"}{"      "}file: ./cli.yaml{"\n"}{"      "}service: cli{"\n"}{"    "}container_name: cli.Amazon{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=cli.Amazon.com{"\n"}{"      "}- CORE_PEER_ADDRESS=peer0.Amazon.com:7051{"\n"}{"      "}- CORE_PEER_LOCALMSPID=AmazonMSP{"\n"}{"      "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@Amazon.com/msp{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Amazon.com:/etc/hyperledger/msp{"\n"}{"    "}depends_on:{"\n"}{"      "}- peer0.Amazon.com{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}</code></pre>
                    <p>It seems, that is all. Now, we have a cluster of orderer and Kafka broker. Let us test this network.</p>
                    <h3>Test</h3>
                    <p>Let us first start the network:</p>
                    <pre><code className="hljs sh">{"\n"}docker-compose -f docker-compose-pcxchg.yaml up{"\n"}</code></pre>
                    <p>If everything runs, it is time to create some channels:</p>
                    <pre><code className="hljs sh">{"\n"}docker exec cli.Amazon bash -c 'peer channel create -c asus -f ./channels/Asus.tx -o orderer0.pcxchg.com:7050 --timeout 30' {"\n"}docker exec cli.Amazon bash -c 'peer channel create -c dell -f ./channels/Dell.tx -o orderer1.pcxchg.com:7050 --timeout 30'{"\n"}docker exec cli.Amazon bash -c 'peer channel create -c hp -f ./channels/HP.tx -o orderer2.pcxchg.com:7050 --timeout 30'{"\n"}</code></pre>
                    <p>As you can see, at this stage we need a timeout. Sure, a single SOLO orderer is faster than a cluster of orderer using Kafka.</p>
                    <p>Let us join <code className="hljs hl-inline">peer0.Amazon.com</code> into the channels:</p>
                    <pre><code className="hljs sh">{"\n"}docker exec cli.Amazon bash -c 'peer channel join -b asus.block'{"\n"}docker exec cli.Amazon bash -c 'peer channel join -b dell.block'{"\n"}docker exec cli.Amazon bash -c 'peer channel join -b hp.block'{"\n"}</code></pre>
                    <p>Next, other peers should also join the channels:</p>
                    <pre><code className="hljs sh">{"\n"}docker exec cli.Asus bash -c 'peer channel join -b asus.block'{"\n"}docker exec cli.HP bash -c 'peer channel join -b hp.block'{"\n"}docker exec cli.Dell bash -c 'peer channel join -b dell.block'{"\n"}</code></pre>
                    <p>Do not forget the anchor peers:</p>
                    <pre><code className="hljs sh">{"\n"}docker exec cli.Asus bash -c 'peer channel update -o orderer0.pcxchg.com:7050 -c asus -f ./channels/asusanchor.tx'{"\n"}docker exec cli.Dell bash -c 'peer channel update -o orderer1.pcxchg.com:7050 -c dell -f ./channels/dellanchor.tx'{"\n"}docker exec cli.HP bash -c 'peer channel update -o orderer2.pcxchg.com:7050 -c hp -f ./channels/hpanchor.tx'{"\n"}{"\n"}docker exec cli.Amazon bash -c 'peer channel update -o orderer0.pcxchg.com:7050 -c asus -f ./channels/amazonanchorasus.tx'{"\n"}docker exec cli.Amazon bash -c 'peer channel update -o orderer0.pcxchg.com:7050 -c dell -f ./channels/amazonanchordell.tx'{"\n"}docker exec cli.Amazon bash -c 'peer channel update -o orderer0.pcxchg.com:7050 -c hp -f ./channels/amazonanchorhp.tx'{"\n"}{"\n"}</code></pre>
                    <p>Now, let us install the chaincode again:</p>
                    <pre><code className="hljs sh">{"\n"}docker exec cli.Asus bash -c 'peer chaincode install -p pcxchg -n pcxchg -v 0'{"\n"}docker exec cli.HP bash -c 'peer chaincode install -p pcxchg -n pcxchg -v 0'{"\n"}docker exec cli.Dell bash -c 'peer chaincode install -p pcxchg -n pcxchg -v 0'{"\n"}docker exec cli.Amazon bash -c 'peer chaincode install -p pcxchg -n pcxchg -v 0'{"\n"}</code></pre>
                    <p>And as you know, we must instantiate it:</p>
                    <pre><code className="hljs sh">{"\n"}docker exec cli.Asus bash -c "peer chaincode instantiate -C asus -n pcxchg -v 0 -c '{"{"}\"Args\":[]{"}"}'"{"\n"}docker exec cli.HP bash -c "peer chaincode instantiate -C hp -n pcxchg -v 0 -c '{"{"}\"Args\":[]{"}"}'"{"\n"}docker exec cli.Dell bash -c "peer chaincode instantiate -C dell -n pcxchg -v 0 -c '{"{"}\"Args\":[]{"}"}'"{"\n"}</code></pre>
                    <p>You know this network and this chaincode. Do some invoke transactions and query the stock.</p>
                    <p>[1] Contributed by IBM and Digital Asset Holdings, Hyperledger Fabric is one of five Hyperledger Projects hosted by The Linux Foundation.</p>
                    </div>
                </div>
                </div>
            </div>
        );
    }
}

export default Orderer;