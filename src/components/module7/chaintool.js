'use strict';

import React, { Component } from 'react';

class Chaintool extends Component {

    render () {
        return (
            <div className="xblock xblock-student_view xblock-student_view-vertical" data-runtime-class="LmsRuntime" data-init="VerticalStudentView" data-course-id="course-v1:B9lab+HLF-12+2018-07" data-request-token="079be606aa5911e8be1d0a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@vertical+block@d1f1d662cc1544588b981424bd2aa7b8" data-block-type="vertical">
                <div className="vert-mod">
                <div className="vert vert-0" data-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@adb5c6aaaeaf467d80baab611835ead8">
                    <div className="xblock xblock-student_view xblock-student_view-html xmodule_display xmodule_HtmlModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="html" data-request-token="079be606aa5911e8be1d0a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@adb5c6aaaeaf467d80baab611835ead8" data-type="HTMLModule" data-course-id="course-v1:B9lab+HLF-12+2018-07">
                    <h2>Chaintool</h2>
                    <p>We will quickly introduce a tool that is applicable in larger projects. Chaintool offers an Interface Definition Language. With this language, we can abstractly define APIs for chaincodes. </p>
                    <p>This simplifies the communication between the client and the chaincode. One does not have to study the source code of the chaincode to understand how a request should be created.</p>
                    <p>Check <a href="https://docs.google.com/document/d/1CeUpHt9tHhwuQtBcmXMHBIQJ6XnkmU733zimvuyXkZo/edit">here</a> for further benefits of this tool and abstraction. </p>
                    <p>Other helpful sites are:</p>
                    <ul>
                        <li>the <a href="https://github.com/hyperledger/fabric-chaintool">repository</a></li>
                        <li>the official <a href="http://fabric-chaintool.readthedocs.io/en/latest/">documentation</a></li>
                        <li><a href="https://chat.hyperledger.org/channel/fabric-chaintool">Hyperledger Chat</a></li>
                    </ul>
                    <div className="b9-info">
                        Chaintool is written in <a href="https://en.wikipedia.org/wiki/Clojure">Clojure</a>
                        So, you will need JRE. The official documentation states, that JRE/JDK v1.8 or higher is needed, but we have had bad experiences using other versions than 1.8. Therefore, we recommend using version 1.8.
                    </div>
                    <p>As described in the documentation, you can install chaintool:</p>
                    <pre><code className="hljs sh">sudo curl https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/chaintool-1.0.0/hyperledger-fabric-chaintool-1.0.0.jar -Lo /usr/local/bin/chaintool &amp;&amp; sudo chmod +x /usr/local/bin/chaintool{"\n"}</code></pre>
                    <p><a href="https://hub.docker.com/r/hyperledger/fabric-ccenv/">fabric-ccenv</a> image includes the tool. We utilized such a container in <strong>dev mode</strong>. We will use the <strong>dev mode</strong>.</p>
                    <h3>First Test</h3>
                    <p>As we have done before in this course, we will start with an official example and get it running. </p>
                    <p><a href="https://github.com/hyperledger/fabric-chaintool/tree/master/examples/example02">Example02</a> is the most suitable. Sadly, the instructions (at the time of writing) do not work at all. We will have to shuffle many things by hand. But that is what this training is all about! </p>
                    <h4>Cluster</h4>
                    <p>Although it is never mentioned explicitly (but can be found in the settings of the client <a href="https://github.com/hyperledger/fabric-chaintool/blob/master/examples/example02/client/cljs/sample.config">settings</a>), we should work with the <strong>Cluster</strong> example from Hyperledger Fabric repository.</p>
                    <p>At the moment, this sample works fine with HLF 1.0. So we will do our test with HLF 1.0:</p>
                    <pre><code className="hljs sh">git clone -b release-1.0 https://github.com/hyperledger/fabric/{"\n"}cd fabric{"\n"}git checkout ae4e37d{"\n"}</code></pre>
                    <p>Now go to the folder <code className="hljs hl-inline">fabric/examples/cluster/compose</code> and change <code className="hljs hl-inline">docker-compose.yaml</code> to the following:</p>
                    <pre><code className="hljs yaml">version: '2'{"\n"}networks:{"\n"}{"  "}chaintool:{"\n"}{"\n"}services:{"\n"}{"\n"}{"  "}ca:{"\n"}{"    "}container_name: ca{"\n"}{"    "}image: hyperledger/fabric-ca:x86_64-1.0.0{"\n"}{"    "}dns_search: .{"\n"}{"    "}environment:{"\n"}{"      "}- FABRIC_CA_SERVER_TLS_ENABLED=false{"\n"}{"    "}logging: &amp;logging{"\n"}{"      "}driver: json-file{"\n"}{"      "}options:{"\n"}{"        "}max-size: "25m"{"\n"}{"        "}max-file: "2"{"\n"}{"    "}volumes:{"\n"}{"      "}- ../build/nodes/ca:/etc/hyperledger/fabric-ca-server{"\n"}{"    "}ports:{"\n"}{"      "}- 7054:7054{"\n"}{"    "}networks:{"\n"}{"      "}- chaintool{"\n"}{"\n"}{"  "}tlsca:{"\n"}{"    "}container_name: tlsca{"\n"}{"    "}image: hyperledger/fabric-ca:x86_64-1.0.0{"\n"}{"    "}dns_search: .{"\n"}{"    "}environment:{"\n"}{"      "}- FABRIC_CA_SERVER_TLS_ENABLED=false{"\n"}{"    "}logging:{"\n"}{"      "}&lt;&lt;: *logging{"\n"}{"    "}volumes:{"\n"}{"      "}- ../build/nodes/tlsca:/etc/hyperledger/fabric-ca-server{"\n"}{"    "}networks:{"\n"}{"      "}- chaintool{"\n"}{"\n"}{"  "}orderer:{"\n"}{"    "}container_name: orderer{"\n"}{"    "}image: hyperledger/fabric-orderer:x86_64-1.0.0{"\n"}{"    "}dns_search: .{"\n"}{"    "}environment:{"\n"}{"      "}- ORDERER_GENERAL_TLS_ENABLED=false{"\n"}{"    "}logging:{"\n"}{"      "}&lt;&lt;: *logging{"\n"}{"    "}volumes:{"\n"}{"      "}- ../build/nodes/orderer:/etc/hyperledger/fabric{"\n"}{"    "}depends_on:{"\n"}{"      "}- ca{"\n"}{"    "}ports:{"\n"}{"      "}- 7050:7050{"\n"}{"    "}networks:{"\n"}{"      "}- chaintool{"\n"}{"\n"}{"  "}peer1:{"\n"}{"    "}container_name: peer1{"\n"}{"    "}extends:{"\n"}{"      "}file: peer-base/peer-base.yaml{"\n"}{"      "}service: peer-base{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer1{"\n"}{"      "}- CORE_PEER_ADDRESS=peer1:7051{"\n"}{"      "}- CORE_PEER_GOSSIP_ENDPOINT=peer1:7051{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1:7051{"\n"}{"    "}logging:{"\n"}{"      "}&lt;&lt;: *logging{"\n"}{"    "}volumes:{"\n"}{"        "}- ../build/nodes/peer1:/etc/hyperledger/fabric{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer{"\n"}{"    "}ports:{"\n"}{"      "}- 7051:7051{"\n"}{"      "}- 7053:7053{"\n"}{"    "}networks:{"\n"}{"      "}- chaintool{"\n"}{"\n"}{"  "}peer2:{"\n"}{"    "}container_name: peer2{"\n"}{"    "}extends:{"\n"}{"      "}file: peer-base/peer-base.yaml{"\n"}{"      "}service: peer-base{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer2{"\n"}{"      "}- CORE_PEER_ADDRESS=peer2:7051{"\n"}{"      "}- CORE_PEER_GOSSIP_ENDPOINT=peer2:7051{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2:7051{"\n"}{"    "}logging:{"\n"}{"      "}&lt;&lt;: *logging{"\n"}{"    "}volumes:{"\n"}{"        "}- ../build/nodes/peer2:/etc/hyperledger/fabric{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer{"\n"}{"      "}- peer1{"\n"}{"    "}ports:{"\n"}{"      "}- 8051:7051{"\n"}{"      "}- 8053:7053{"\n"}{"    "}networks:{"\n"}{"      "}- chaintool{"\n"}{"\n"}{"  "}peer3:{"\n"}{"    "}container_name: peer3{"\n"}{"    "}extends:{"\n"}{"      "}file: peer-base/peer-base.yaml{"\n"}{"      "}service: peer-base{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer3{"\n"}{"      "}- CORE_PEER_ADDRESS=peer3:7051{"\n"}{"      "}- CORE_PEER_GOSSIP_ENDPOINT=peer3:7051{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer3:7051{"\n"}{"    "}logging:{"\n"}{"      "}&lt;&lt;: *logging{"\n"}{"    "}volumes:{"\n"}{"        "}- ../build/nodes/peer3:/etc/hyperledger/fabric{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer{"\n"}{"      "}- peer1{"\n"}{"    "}ports:{"\n"}{"      "}- 10051:7051{"\n"}{"      "}- 10053:7053{"\n"}{"    "}networks:{"\n"}{"      "}- chaintool{"\n"}{"\n"}{"  "}peer4:{"\n"}{"    "}container_name: peer4{"\n"}{"    "}extends:{"\n"}{"      "}file: peer-base/peer-base.yaml{"\n"}{"      "}service: peer-base{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_ID=peer4{"\n"}{"      "}- CORE_PEER_ADDRESS=peer4:7051{"\n"}{"      "}- CORE_PEER_GOSSIP_ENDPOINT=peer4:7051{"\n"}{"      "}- CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer4:7051{"\n"}{"    "}logging:{"\n"}{"      "}&lt;&lt;: *logging{"\n"}{"    "}volumes:{"\n"}{"        "}- ../build/nodes/peer4:/etc/hyperledger/fabric{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer{"\n"}{"      "}- peer1{"\n"}{"    "}ports:{"\n"}{"      "}- 11051:7051{"\n"}{"      "}- 11053:7053{"\n"}{"    "}networks:{"\n"}{"      "}- chaintool{"\n"}{"\n"}{"  "}cli:{"\n"}{"    "}image: hyperledger/fabric-peer:x86_64-1.0.0{"\n"}{"    "}dns_search: .{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_TLS_ENABLED=false{"\n"}{"      "}- CORE_NEXT=true{"\n"}{"      "}- CORE_LOGGING_LEVEL=DEBUG{"\n"}{"    "}volumes:{"\n"}{"      "}- ../build/nodes/cli:/etc/hyperledger/fabric{"\n"}{"      "}- ..:/cli{"\n"}{"    "}working_dir: /cli{"\n"}{"    "}depends_on:{"\n"}{"      "}- orderer{"\n"}{"      "}- peer1{"\n"}{"    "}networks:{"\n"}{"      "}- chaintool{"\n"}</code></pre>
                    <p>Next, we will change <code className="hljs hl-inline">fabric/examples/cluster/compose/peer-base/peer-base.yaml</code>:</p>
                    <pre><code className="hljs yaml">version: '2'{"\n"}services:{"\n"}{"  "}peer-base:{"\n"}{"    "}image: hyperledger/fabric-peer:x86_64-1.0.0{"\n"}{"    "}dns_search: .{"\n"}{"    "}environment:{"\n"}{"      "}- CORE_PEER_TLS_ENABLED=false{"\n"}{"      "}- CORE_LOGGING_LEVEL=WARNING{"\n"}{"      "}- CORE_NEXT=true{"\n"}{"      "}- CORE_PEER_GOSSIP_BOOTSTRAP=peer1:7051{"\n"}{"      "}- CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock{"\n"}{"      "}- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=compose_chaintool{"\n"}{"      "}- CORE_PEER_ADDRESSAUTODETECT=true{"\n"}{"    "}volumes:{"\n"}{"      "}- /var/run/:/host/var/run/{"\n"}{"    "}command: peer node start{"\n"}</code></pre>
                    <p>Now, we can run in <code className="hljs hl-inline">fabric/examples/cluster</code>:</p>
                    <pre><code className="hljs sh">make compose-up TLS=false{"\n"}</code></pre>
                    <p>This will start the network and generate the certificates. For now, shut down the network with:</p>
                    <pre><code className="hljs sh">make compose-down{"\n"}</code></pre>
                    <h4>Chaintool in dev mode</h4>
                    <p>So, let’s download the example:</p>
                    <pre><code className="hljs sh">git clone https://github.com/hyperledger/fabric-chaintool{"\n"}</code></pre>
                    <p>Now, it is time to use the <strong>dev mode</strong>. Open <code className="hljs hl-inline">fabric-samples/chaincode-docker-devmode/docker-compose-simple.yaml</code> and add the folder <code className="hljs hl-inline">fabric-chaintool/examples/example02/</code> to the volumes of the <code className="hljs hl-inline">chaincode</code> container:</p>
                    <pre><code className="hljs yaml">chaincode:{"\n"}{"  "}container_name: chaincode{"\n"}{"  "}image: hyperledger/fabric-ccenv:x86_64-1.0.0{"\n"}{"  "}tty: true{"\n"}{"  "}environment:{"\n"}{"    "}- GOPATH=/opt/gopath{"\n"}{"    "}- CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock{"\n"}{"    "}- CORE_LOGGING_LEVEL=DEBUG{"\n"}{"    "}- CORE_PEER_ID=example02{"\n"}{"    "}- CORE_PEER_ADDRESS=peer:7051{"\n"}{"    "}- CORE_PEER_LOCALMSPID=DEFAULT{"\n"}{"    "}- CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp{"\n"}{"  "}working_dir: /opt/gopath/src/chaincode{"\n"}{"  "}command: /bin/bash -c 'sleep 6000000'{"\n"}{"  "}volumes:{"\n"}{"    "}- /var/run/:/host/var/run/{"\n"}{"    "}- ./msp:/etc/hyperledger/msp{"\n"}{"    "}- /&lt;YOUR PATH&gt;/fabric-chaintool/examples/example02/:/opt/gopath/src/chaincode{"\n"}{"  "}depends_on:{"\n"}{"    "}- orderer{"\n"}{"    "}- peer{"\n"}</code></pre>
                    <p>Next, run the <strong>dev mode</strong>:</p>
                    <pre><code className="hljs sh">docker-compose -f docker-compose-simple.yaml up{"\n"}</code></pre>
                    <p>and use the <code className="hljs hl-inline">chaincode</code> container:</p>
                    <pre><code className="hljs sh">docker exec -it chaincode bash{"\n"}</code></pre>
                    <p>We should have access to <code className="hljs hl-inline">example02</code>, so run:</p>
                    <pre><code className="hljs sh">cd app/{"\n"}chaintool build{"\n"}</code></pre>
                    <p>Let us also create a <code className="hljs hl-inline">CAR</code> package:</p>
                    <pre><code className="hljs sh">chaintool package{"\n"}</code></pre>
                    <p>You should get an output like:</p>
                    <pre><code className="hljs sh">Writing CAR to: /opt/gopath/src/chaincode/app/build/org.hyperledger.chaincode.example02-0.1-SNAPSHOT.car{"\n"}Using path ./ ["src" "chaincode.yaml"]{"\n"}|------+------------------------------------------+--------------------------------------------------------|{"\n"}| Size |{"                   "}SHA1{"                   "}|{"                          "}Path{"                          "}|{"\n"}|------+------------------------------------------+--------------------------------------------------------|{"\n"}| 466{"  "}| 2ee32c6fbc9810509d6c900b712e186c375e0ea5 | chaincode.yaml{"                                         "}|{"\n"}| 3904 | 71d7b7253158c006d2b619e192fd04812e812514 | src/chaincode/chaincode_example02.go{"                   "}|{"\n"}| 232{"  "}| 364aaceca0706ac62e0d1630aaada77aa6e99e01 | src/interfaces/appinit.cci{"                             "}|{"\n"}| 449{"  "}| 5765f4fcd38f709b4c21477965d24869b19eacb8 | src/interfaces/org.hyperledger.chaincode.example02.cci |{"\n"}|------+------------------------------------------+--------------------------------------------------------|{"\n"}Platform:{"            "}org.hyperledger.chaincode.golang version 1{"\n"}Digital Signature:{"   "}none{"\n"}Raw Data Size:{"       "}5051 bytes{"\n"}Archive Size:{"        "}2533 bytes{"\n"}Compression Alg:{"     "}gzip{"\n"}Chaincode SHA3:{"      "}0eb59f63c2ad3cddc4130d6b0d9f9576c074e30a16469f75aef792e21a1323ab8d5dc5fff80bb8667b028f3d86428d905c2759a8a5d9cd9e6518845b48c3b45f{"\n"}</code></pre>
                    <h4>Test</h4>
                    <p>Now, we have a package: <code className="hljs hl-inline">fabric-chaintool/examples/example02/app/build/org.hyperledger.chaincode.example02-0.1-SNAPSHOT.car</code></p>
                    <p>We can install it and instantiate it. How?</p>
                    <p>In a terminal, run:</p>
                    <pre><code className="hljs sh">cd /&lt;YOUR PATH&gt;/fabric-chaintool/examples/example02/client/cljs/{"\n"}make{"\n"}</code></pre>
                    <p>Next, we must change the <code className="hljs hl-inline">client/cljs/sample.config</code>:</p>
                    <pre><code className="hljs ">ca:{"\n"}{"        "}url: http://localhost:7054{"\n"}{"        "}certificate: |{"\n"}{"            "}-----BEGIN CERTIFICATE-----{"\n"}{"            "}MIICLzCCAdWgAwIBAgIQI3jhfY9bW9cE8S+yxgzzYjAKBggqhkjOPQQDAjBpMQsw{"\n"}{"            "}CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy{"\n"}{"            "}YW5jaXNjbzEUMBIGA1UEChMLb3JkZXJlci5uZXQxFzAVBgNVBAMTDmNhLm9yZGVy{"\n"}{"            "}ZXIubmV0MB4XDTE3MDkyODE4Mjk1OFoXDTI3MDkyNjE4Mjk1OFowaTELMAkGA1UE{"\n"}{"            "}BhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lz{"\n"}{"            "}Y28xFDASBgNVBAoTC29yZGVyZXIubmV0MRcwFQYDVQQDEw5jYS5vcmRlcmVyLm5l{"\n"}{"            "}dDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABDE8mlIQl2wgj9T6NGyXIfcg0oUk{"\n"}{"            "}z+HnYZK1AtMq2/TbR7SnhEy4c2M94OkJ1sv8cAi0G166V/rYWAYGZfmzs7yjXzBd{"\n"}{"            "}MA4GA1UdDwEB/wQEAwIBpjAPBgNVHSUECDAGBgRVHSUAMA8GA1UdEwEB/wQFMAMB{"\n"}{"            "}Af8wKQYDVR0OBCIEID48NXllxxspcxTM53UYjyV8tY42nimoee4R7KgV9E/sMAoG{"\n"}{"            "}CCqGSM49BAMCA0gAMEUCIQCYpSOPSoMdNkPAmYrh9VrKvoI9GligEYxVFlFM3NgJ{"\n"}{"            "}gwIgYPMrh4Gy+Tb24ZbyGusw3FYUC2Lr1rYQy287jzMRrjo={"\n"}{"            "}-----END CERTIFICATE-----{"\n"}{"\n"}orderer:{"\n"}{"        "}url:{"  "}grpc://localhost:7050{"\n"}{"        "}hostname: orderer{"\n"}{"        "}ca: |{"\n"}{"            "}-----BEGIN CERTIFICATE-----{"\n"}{"            "}MIICLzCCAdWgAwIBAgIQI3jhfY9bW9cE8S+yxgzzYjAKBggqhkjOPQQDAjBpMQsw{"\n"}{"            "}CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZy{"\n"}{"            "}YW5jaXNjbzEUMBIGA1UEChMLb3JkZXJlci5uZXQxFzAVBgNVBAMTDmNhLm9yZGVy{"\n"}{"            "}ZXIubmV0MB4XDTE3MDkyODE4Mjk1OFoXDTI3MDkyNjE4Mjk1OFowaTELMAkGA1UE{"\n"}{"            "}BhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lz{"\n"}{"            "}Y28xFDASBgNVBAoTC29yZGVyZXIubmV0MRcwFQYDVQQDEw5jYS5vcmRlcmVyLm5l{"\n"}{"            "}dDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABDE8mlIQl2wgj9T6NGyXIfcg0oUk{"\n"}{"            "}z+HnYZK1AtMq2/TbR7SnhEy4c2M94OkJ1sv8cAi0G166V/rYWAYGZfmzs7yjXzBd{"\n"}{"            "}MA4GA1UdDwEB/wQEAwIBpjAPBgNVHSUECDAGBgRVHSUAMA8GA1UdEwEB/wQFMAMB{"\n"}{"            "}Af8wKQYDVR0OBCIEID48NXllxxspcxTM53UYjyV8tY42nimoee4R7KgV9E/sMAoG{"\n"}{"            "}CCqGSM49BAMCA0gAMEUCIQCYpSOPSoMdNkPAmYrh9VrKvoI9GligEYxVFlFM3NgJ{"\n"}{"            "}gwIgYPMrh4Gy+Tb24ZbyGusw3FYUC2Lr1rYQy287jzMRrjo={"\n"}{"            "}-----END CERTIFICATE-----{"\n"}{"\n"}peers:{"\n"}{"       "}- api: grpc://localhost:7051{"\n"}{"         "}events: grpc://localhost:7053{"\n"}{"         "}hostname: peer1{"\n"}{"       "}- api: grpc://localhost:8051{"\n"}{"         "}events: grpc://localhost:8053{"\n"}{"         "}hostname: peer2{"\n"}{"       "}- api: grpc://localhost:10051{"\n"}{"         "}events: grpc://localhost:10053{"\n"}{"         "}hostname: peer3{"\n"}{"       "}- api: grpc://localhost:11051{"\n"}{"         "}events: grpc://localhost:11053{"\n"}{"         "}hostname: peer4{"\n"}{"\n"}identity:{"\n"}{"        "}principal: Admin@org1.net{"\n"}{"        "}mspid: Org1MSP{"\n"}{"        "}privatekey: |{"\n"}{"              "}-----BEGIN PRIVATE KEY-----{"\n"}{"              "}MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgwnnY219Re6tk0FzK{"\n"}{"              "}6CzTwMPakVCuwl0KD+HJzz5K2TahRANCAASJumVEGhKoWB0tuXsq0EojRPzQrG86{"\n"}{"              "}YU6zmZo6uwA+YZCgGn3hSpBZ2fcKPoMoTrdiPYveKgMDlQyIVb1z6Jf0{"\n"}{"              "}-----END PRIVATE KEY-----{"\n"}{"        "}certificate: |{"\n"}{"              "}-----BEGIN CERTIFICATE-----{"\n"}{"              "}MIICAjCCAaigAwIBAgIRAKCC4DfU2dvbw8VbZAvLfd8wCgYIKoZIzj0EAwIwYzEL{"\n"}{"              "}MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG{"\n"}{"              "}cmFuY2lzY28xETAPBgNVBAoTCG9yZzEubmV0MRQwEgYDVQQDEwtjYS5vcmcxLm5l{"\n"}{"              "}dDAeFw0xNzA5MjgxODI5NThaFw0yNzA5MjYxODI5NThaMFMxCzAJBgNVBAYTAlVT{"\n"}{"              "}MRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMRcw{"\n"}{"              "}FQYDVQQDDA5BZG1pbkBvcmcxLm5ldDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA{"\n"}{"              "}BIm6ZUQaEqhYHS25eyrQSiNE/NCsbzphTrOZmjq7AD5hkKAafeFKkFnZ9wo+gyhO{"\n"}{"              "}t2I9i94qAwOVDIhVvXPol/SjTTBLMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8E{"\n"}{"              "}AjAAMCsGA1UdIwQkMCKAIKtn8/xciijKRKv+CGSCbenl9tbMm4JFhOtX8frq5qti{"\n"}{"              "}MAoGCCqGSM49BAMCA0gAMEUCIQCdvgJhroKvARmoYA8Xh04HssJLOIkUGgnt6wNo{"\n"}{"              "}n4pDlAIgIicuLCEE5kecbVI9RELJvPtWHn0utaWuH+1Kd8K2YgQ={"\n"}{"              "}-----END CERTIFICATE-----{"\n"}</code></pre>
                    <p>You have to change the certificates in this file manually. The correct ones are under <code className="hljs hl-inline">fabric/examples/cluster/build/</code> Notice, this folder will be removed if you stop the network.</p>
                    <ul>
                        <li>nodes/ca/ca.crt is the CA certificate</li>
                        <li>nodes/orderer/msp/cacerts/ca.orderer.net-cert.pem is the orderer certificate</li>
                        <li>nodes/cli/msp/admincerts/Admin@org1.net-cert.pem is the identity certificate</li>
                        <li>nodes/cli/msp/keystore/...._sk is the identity private key</li>
                    </ul>
                    <p>Now, run the following command:</p>
                    <pre><code className="hljs sh">node target/nodecljs/main.js -c install --config ./sample.config -p ../../app/build/org.hyperledger.chaincode.example02-0.1-SNAPSHOT.car{"\n"}</code></pre>
                    <p>You should get:</p>
                    <pre><code className="hljs sh">info: [EventHub.js]: _connect - options {"{"}"grpc.ssl_target_name_override":"peer1","grpc.default_authority":"peer1"{"}"}{"\n"}Running install(null){"\n"}info: [packager/Car.js]: Packaging CAR file from ../../app/build/org.hyperledger.chaincode.example02-0.1-SNAPSHOT.car{"\n"}Success!{"\n"}</code></pre>
                    <p>Next, we can instantiate the chaincode:</p>
                    <pre><code className="hljs sh">node target/nodecljs/main.js -c instantiate --config ./sample.config{"\n"}</code></pre>
                    <p>This time, you will get:</p>
                    <pre><code className="hljs sh">info: [EventHub.js]: _connect - options {"{"}"grpc.ssl_target_name_override":"peer1","grpc.default_authority":"peer1"{"}"}{"\n"}Running instantiate({"{"}"partyA":{"{"}"entity":"A","value":100{"}"},"partyB":{"{"}"entity":"B","value":200{"}"}{"}"}){"\n"}Success!{"\n"}</code></pre>
                    <p>Ok. One more test:</p>
                    <pre><code className="hljs sh">node target/nodecljs/main.js -c check-balance --config ./sample.config{"\n"}</code></pre>
                    <p>And, you should get:</p>
                    <pre><code className="hljs sh">info: [EventHub.js]: _connect - options {"{"}"grpc.ssl_target_name_override":"peer1","grpc.default_authority":"peer1"{"}"}{"\n"}Running check-balance({"{"}"id":"A"{"}"}){"\n"}Success: Balance = 100{"\n"}</code></pre>
                    <p>Assuming all goes well, you may interested in what just happened. </p>
                    <h4>Theory</h4>
                    <p>Let us start with the interfaces, you will see two <strong>CCI(Chaincode Interface)</strong> files in <code className="hljs hl-inline">fabric-chaintool/examples/example02/app/src/interfaces</code>, <code className="hljs hl-inline">appinit.cci</code>:</p>
                    <pre><code className="hljs ">#{"\n"}# Copyright Greg Haskins All Rights Reserved{"\n"}#{"\n"}# SPDX-License-Identifier: Apache-2.0{"\n"}#{"\n"}{"\n"}message Party {"{"}{"\n"}{"        "}string entity = 1;{"\n"}{"        "}int32{"  "}value{"  "}= 2;{"\n"}{"}"}{"\n"}{"\n"}message Init {"{"}{"\n"}{"        "}Party partyA = 1;{"\n"}{"        "}Party partyB = 2;{"\n"}{"}"}{"\n"}</code></pre>
                    <p>And <code className="hljs hl-inline">org.hyperledger.chaincode.example02.cci</code>:</p>
                    <pre><code className="hljs ">#{"\n"}# Copyright Greg Haskins All Rights Reserved{"\n"}#{"\n"}# SPDX-License-Identifier: Apache-2.0{"\n"}#{"\n"}{"\n"}message PaymentParams {"{"}{"\n"}{"        "}string partySrc = 1;{"\n"}{"        "}string partyDst = 2;{"\n"}{"        "}int32{"  "}amount{"   "}= 3;{"\n"}{"}"}{"\n"}{"\n"}message Entity {"{"}{"\n"}{"        "}string id = 1;{"\n"}{"}"}{"\n"}{"\n"}message BalanceResult {"{"}{"\n"}{"        "}int32 balance = 1;{"\n"}{"}"}{"\n"}{"\n"}functions {"{"}{"\n"}{"        "}void MakePayment(PaymentParams) = 1;{"\n"}{"        "}void DeleteAccount(Entity) = 2;{"\n"}{"        "}BalanceResult CheckBalance(Entity) = 3;{"\n"}{"}"}{"\n"}</code></pre>
                    <p>They look like protobuf. However, this is the <a href="http://fabric-chaintool.readthedocs.io/en/latest/interface/">interface definition language</a>. <code className="hljs hl-inline">appinit.cci</code> is for <code className="hljs hl-inline">Init()</code>, others are in <code className="hljs hl-inline">org.hyperledger.chaincode.example02.cci</code>. This is determined by <code className="hljs hl-inline">chaincode.yaml</code>:</p>
                    <pre><code className="hljs yaml"># ----------------------------------{"\n"}# chaincode example02{"\n"}# ----------------------------------{"\n"}#{"\n"}# Copyright Greg Haskins All Rights Reserved{"\n"}#{"\n"}# SPDX-License-Identifier: Apache-2.0{"\n"}#{"\n"}{"\n"}Schema:{"  "}1{"\n"}Name:{"    "}org.hyperledger.chaincode.example02{"\n"}Version: 0.1-SNAPSHOT{"\n"}{"\n"}Platform:{"\n"}{"        "}Name: org.hyperledger.chaincode.golang{"\n"}{"        "}Version: 1{"\n"}{"\n"}Provides: [self] # 'self' is a keyword that means there should be $name.cci (e.g. org.hyperledger.chaincode.example02.cci){"\n"}</code></pre>
                    <p>This file is the project definition. </p>
                    <p>Next, let us have a look at <code className="hljs hl-inline">chaincode_example02.go</code>:</p>
                    <pre><code className="hljs golang">/*{"\n"}Licensed to the Apache Software Foundation (ASF) under one{"\n"}or more contributor license agreements.{"  "}See the NOTICE file{"\n"}distributed with this work for additional information{"\n"}regarding copyright ownership.{"  "}The ASF licenses this file{"\n"}to you under the Apache License, Version 2.0 (the{"\n"}"License"); you may not use this file except in compliance{"\n"}with the License.{"  "}You may obtain a copy of the License at{"\n"}{"\n"}{"  "}http://www.apache.org/licenses/LICENSE-2.0{"\n"}{"\n"}Unless required by applicable law or agreed to in writing,{"\n"}software distributed under the License is distributed on an{"\n"}"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY{"\n"}KIND, either express or implied.{"  "}See the License for the{"\n"}specific language governing permissions and limitations{"\n"}under the License.{"\n"}*/{"\n"}{"\n"}package main{"\n"}{"\n"}import ({"\n"}{"  "}"errors"{"\n"}{"  "}"fmt"{"\n"}{"  "}"strconv"{"\n"}{"\n"}{"  "}"hyperledger/cci/appinit"{"\n"}{"  "}"hyperledger/cci/org/hyperledger/chaincode/example02"{"\n"}{"  "}"hyperledger/ccs"{"\n"}{"\n"}{"  "}"github.com/golang/protobuf/proto"{"\n"}{"  "}"github.com/hyperledger/fabric/core/chaincode/shim"{"\n"}){"\n"}{"\n"}type ChaincodeExample struct {"{"}{"\n"}{"}"}{"\n"}{"\n"}// Called to initialize the chaincode{"\n"}func (t *ChaincodeExample) Init(stub shim.ChaincodeStubInterface, param *appinit.Init) error {"{"}{"\n"}{"\n"}{"  "}var err error{"\n"}{"\n"}{"  "}fmt.Printf("Aval = %d, Bval = %d\n", param.PartyA.Value, param.PartyB.Value){"\n"}{"\n"}{"  "}// Write the state to the ledger{"\n"}{"  "}err = t.PutState(stub, param.PartyA){"\n"}{"  "}if err != nil {"{"}{"\n"}{"    "}return err{"\n"}{"  "}{"}"}{"\n"}{"\n"}{"  "}err = t.PutState(stub, param.PartyB){"\n"}{"  "}if err != nil {"{"}{"\n"}{"    "}return err{"\n"}{"  "}{"}"}{"\n"}{"\n"}{"  "}return nil{"\n"}{"}"}{"\n"}{"\n"}// Transaction makes payment of X units from A to B{"\n"}func (t *ChaincodeExample) MakePayment(stub shim.ChaincodeStubInterface, param *example02.PaymentParams) error {"{"}{"\n"}{"\n"}{"  "}var err error{"\n"}{"\n"}{"  "}// Get the state from the ledger{"\n"}{"  "}src, err := t.GetState(stub, param.PartySrc){"\n"}{"  "}if err != nil {"{"}{"\n"}{"    "}return err{"\n"}{"  "}{"}"}{"\n"}{"\n"}{"  "}dst, err := t.GetState(stub, param.PartyDst){"\n"}{"  "}if err != nil {"{"}{"\n"}{"    "}return err{"\n"}{"  "}{"}"}{"\n"}{"\n"}{"  "}// Perform the execution{"\n"}{"  "}X := int(param.Amount){"\n"}{"  "}src = src - X{"\n"}{"  "}dst = dst + X{"\n"}{"  "}fmt.Printf("Aval = %d, Bval = %d\n", src, dst){"\n"}{"\n"}{"  "}// Write the state back to the ledger{"\n"}{"  "}err = stub.PutState(param.PartySrc, []byte(strconv.Itoa(src))){"\n"}{"  "}if err != nil {"{"}{"\n"}{"    "}return err{"\n"}{"  "}{"}"}{"\n"}{"\n"}{"  "}err = stub.PutState(param.PartyDst, []byte(strconv.Itoa(dst))){"\n"}{"  "}if err != nil {"{"}{"\n"}{"    "}return err{"\n"}{"  "}{"}"}{"\n"}{"\n"}{"  "}return nil{"\n"}{"}"}{"\n"}{"\n"}// Deletes an entity from state{"\n"}func (t *ChaincodeExample) DeleteAccount(stub shim.ChaincodeStubInterface, param *example02.Entity) error {"{"}{"\n"}{"\n"}{"  "}// Delete the key from the state in ledger{"\n"}{"  "}err := stub.DelState(param.Id){"\n"}{"  "}if err != nil {"{"}{"\n"}{"    "}return errors.New("Failed to delete state"){"\n"}{"  "}{"}"}{"\n"}{"\n"}{"  "}return nil{"\n"}{"}"}{"\n"}{"\n"}// Query callback representing the query of a chaincode{"\n"}func (t *ChaincodeExample) CheckBalance(stub shim.ChaincodeStubInterface, param *example02.Entity) (*example02.BalanceResult, error) {"{"}{"\n"}{"  "}var err error{"\n"}{"\n"}{"  "}// Get the state from the ledger{"\n"}{"  "}val, err := t.GetState(stub, param.Id){"\n"}{"  "}if err != nil {"{"}{"\n"}{"    "}return nil, err{"\n"}{"  "}{"}"}{"\n"}{"\n"}{"  "}fmt.Printf("Query Response: %d\n", val){"\n"}{"  "}return &amp;example02.BalanceResult{"{"}Balance: *proto.Int32(int32(val)){"}"}, nil{"\n"}{"}"}{"\n"}{"\n"}func main() {"{"}{"\n"}{"  "}self := &amp;ChaincodeExample{"{"}{"}"}{"\n"}{"  "}interfaces := ccs.Interfaces {"{"}{"\n"}{"    "}"org.hyperledger.chaincode.example02": self,{"\n"}{"    "}"appinit": self,{"\n"}{"  "}{"}"}{"\n"}{"\n"}{"  "}err := ccs.Start(interfaces) // Our one instance implements both Transactions and Queries interfaces{"\n"}{"  "}if err != nil {"{"}{"\n"}{"    "}fmt.Printf("Error starting example chaincode: %s", err){"\n"}{"  "}{"}"}{"\n"}{"}"}{"\n"}{"\n"}//-------------------------------------------------{"\n"}// Helpers{"\n"}//-------------------------------------------------{"\n"}func (t *ChaincodeExample) PutState(stub shim.ChaincodeStubInterface, party *appinit.Party) error {"{"}{"\n"}{"  "}return stub.PutState(party.Entity, []byte(strconv.Itoa(int(party.Value)))){"\n"}{"}"}{"\n"}{"\n"}func (t *ChaincodeExample) GetState(stub shim.ChaincodeStubInterface, entity string) (int, error) {"{"}{"\n"}{"  "}bytes, err := stub.GetState(entity){"\n"}{"  "}if err != nil {"{"}{"\n"}{"    "}return 0, errors.New("Failed to get state"){"\n"}{"  "}{"}"}{"\n"}{"  "}if bytes == nil {"{"}{"\n"}{"    "}return 0, errors.New("Entity not found"){"\n"}{"  "}{"}"}{"\n"}{"\n"}{"  "}val, _ := strconv.Atoi(string(bytes)){"\n"}{"  "}return val, nil{"\n"}{"}"}{"\n"}{"\n"}</code></pre>
                    <p>As you can see above, the <code className="hljs hl-inline">main()</code> function differs from a regular chaincode. This is called <strong>entry-point</strong>. The import section is also different. You can find the reference <a href="http://fabric-chaintool.readthedocs.io/en/latest/platforms/golang/">here</a>.</p>
                    <p>Now, have a look at the example client in <code className="hljs hl-inline">fabric-chaintool/examples/example02/client/nodejs/client.js</code>:</p>
                    <pre><code className="hljs javascript">/*{"\n"}#{"\n"}# Copyright Greg Haskins All Rights Reserved{"\n"}#{"\n"}# SPDX-License-Identifier: Apache-2.0{"\n"}#{"\n"}*/{"\n"}var program = require('commander');{"\n"}var pb = require("protobufjs");{"\n"}{"\n"}var builder = pb.newBuilder({"{"} convertFieldsToCamelCase: true {"}"});{"\n"}{"\n"}pb.loadProtoFile("./protos/appinit.proto", builder);{"\n"}var init = builder.build("appinit");{"\n"}{"\n"}pb.loadProtoFile("./protos/org.hyperledger.chaincode.example02.proto", builder);{"\n"}var app = builder.build("org.hyperledger.chaincode.example02");{"\n"}{"\n"}var path = require('path');{"\n"}var ReadYaml = require('read-yaml');{"\n"}{"\n"}var hfc = require('fabric-client');{"\n"}var hfcutils = require('fabric-client/lib/utils.js');{"\n"}var utils = require('./lib/util.js');{"\n"}var Peer = require('fabric-client/lib/Peer.js');{"\n"}var Orderer = require('fabric-client/lib/Orderer.js');{"\n"}var EventHub = require('fabric-client/lib/EventHub.js');{"\n"}var User = require('fabric-client/lib/User.js');{"\n"}{"\n"}var client;{"\n"}var chain;{"\n"}var peers = [];{"\n"}var eventhub;{"\n"}{"\n"}var channelId = 'mychannel';{"\n"}{"\n"}var config = ReadYaml.sync('client.config');{"\n"}{"\n"}function createBaseRequest() {"{"}{"\n"}{"    "}var tx_id = client.newTransactionID();{"\n"}{"\n"}{"    "}// send proposal to endorser{"\n"}{"    "}var request = {"{"}{"\n"}{"        "}chaincodeType: 'car',{"\n"}{"        "}targets: peers,{"\n"}{"        "}chainId: channelId,{"\n"}{"        "}chaincodeId: 'mycc',{"\n"}{"        "}txId: tx_id{"\n"}{"    "}{"}"};{"\n"}{"\n"}{"    "}return request;{"\n"}{"}"}{"\n"}{"\n"}function createRequest(fcn, args) {"{"}{"\n"}{"    "}var request = createBaseRequest();{"\n"}{"\n"}{"    "}request.fcn = fcn;{"\n"}{"    "}request.args = [args.toBuffer()];{"\n"}{"\n"}{"    "}return request;{"\n"}{"}"}{"\n"}{"\n"}function connect() {"{"}{"\n"}{"    "}client = new hfc();{"\n"}{"\n"}{"    "}return utils.setStateStore(client, ".hfc-kvstore"){"\n"}{"        "}.then(() =&gt; {"{"}{"\n"}{"            "}chain = client.newChannel(channelId);{"\n"}{"\n"}{"            "}chain.addOrderer(client.newOrderer(config.orderer.url, {"{"}{"\n"}{"                "}pem: config.orderer.ca,{"\n"}{"                "}'ssl-target-name-override': config.orderer.hostname{"\n"}{"            "}{"}"}));{"\n"}{"\n"}{"            "}for (var i in config.peers) {"{"}{"\n"}{"                "}var p = config.peers[i]{"\n"}{"                "}peer = client.newPeer(p.api, {"{"}{"\n"}{"                    "}pem: config.ca.certificate,{"\n"}{"                    "}'ssl-target-name-override': p.hostname,{"\n"}{"                    "}'request-timeout': 120000{"\n"}{"                "}{"}"});{"\n"}{"                "}peers.push(peer);{"\n"}{"                "}chain.addPeer(peer);{"\n"}{"            "}{"}"}{"\n"}{"\n"}{"            "}var userSpec = {"{"}{"\n"}{"                "}username: config.identity.principal,{"\n"}{"                "}mspid: config.identity.mspid,{"\n"}{"                "}cryptoContent: {"{"}{"\n"}{"                    "}privateKeyPEM: config.identity.privatekey,{"\n"}{"                    "}signedCertPEM: config.identity.certificate{"\n"}{"                "}{"}"}{"}"};{"\n"}{"            "}return client.createUser(userSpec);{"\n"}{"        "}{"}"}){"\n"}{"        "}.then((user) =&gt; {"{"}{"\n"}{"            "}var peer1 = config.peers[0]{"\n"}{"            "}eventhub = client.newEventHub();{"\n"}{"            "}eventhub.setPeerAddr(peer1.events, {"{"}{"\n"}{"                "}pem: config.ca.certificate,{"\n"}{"                "}'ssl-target-name-override': peer1.hostname{"\n"}{"            "}{"}"});{"\n"}{"            "}eventhub.connect();{"\n"}{"\n"}{"            "}return chain.initialize(){"\n"}{"                "}.then(() =&gt; {"{"}{"\n"}{"\n"}{"                    "}return user;{"\n"}{"                "}{"}"});{"\n"}{"        "}{"}"});{"\n"}{"}"}{"\n"}{"\n"}function disconnect() {"{"}{"\n"}{"    "}return new Promise((resolve, reject) =&gt; {"{"}{"\n"}{"        "}eventhub.disconnect();{"\n"}{"        "}resolve();{"\n"}{"    "}{"}"});{"\n"}{"}"}{"\n"}{"\n"}function sendInstall(path, version) {"{"}{"\n"}{"\n"}{"    "}var request = createBaseRequest();{"\n"}{"    "}if (path) {"{"}{"\n"}{"        "}request.chaincodePath = path;{"\n"}{"    "}{"}"} else {"{"}{"\n"}{"        "}chain.setDevMode(true);{"\n"}{"    "}{"}"}{"\n"}{"\n"}{"    "}console.log(version);{"\n"}{"    "}request.chaincodeVersion = "1";{"\n"}{"\n"}{"    "}// send proposal to endorser{"\n"}{"    "}return client.installChaincode(request);{"\n"}{"}"}{"\n"}{"\n"}function sendInstantiate(args) {"{"}{"\n"}{"\n"}{"    "}var request = createRequest('init', new init.Init(args));{"\n"}{"    "}request.chaincodeVersion = "1";{"\n"}{"\n"}{"    "}// send proposal to endorser{"\n"}{"    "}return chain.sendInstantiateProposal(request){"\n"}{"        "}.then((response) =&gt; {"{"}{"\n"}{"            "}return utils.processResponse(chain, eventhub, request, response, 120000);{"\n"}{"        "}{"}"});{"\n"}{"}"}{"\n"}{"\n"}function sendTransaction(fcn, args) {"{"}{"\n"}{"\n"}{"    "}var request = createRequest(fcn, args);{"\n"}{"\n"}{"    "}return chain.sendTransactionProposal(request){"\n"}{"        "}.then((response) =&gt; {"{"}{"\n"}{"            "}return utils.processResponse(chain, eventhub, request, response, 20000);{"\n"}{"        "}{"}"});{"\n"}{"}"}{"\n"}{"\n"}function sendQuery(fcn, args) {"{"}{"\n"}{"    "}var request = createRequest(fcn, args);{"\n"}{"    "}return chain.queryByChaincode(request);{"\n"}{"}"}{"\n"}{"\n"}function makePayment(args) {"{"}{"\n"}{"    "}return sendTransaction('org.hyperledger.chaincode.example02/fcn/1',{"\n"}{"                           "}new app.PaymentParams(args));{"\n"}{"}"}{"\n"}{"\n"}function checkBalance(args) {"{"}{"\n"}{"    "}return sendQuery('org.hyperledger.chaincode.example02/fcn/3',{"\n"}{"                     "}new app.Entity(args)){"\n"}{"        "}.then((results) =&gt; {"{"}{"\n"}{"            "}return app.BalanceResult.decode(results[0]);{"\n"}{"        "}{"}"});{"\n"}{"}"}{"\n"}{"\n"}program{"\n"}{"    "}.version('0.0.1');{"\n"}{"\n"}program{"\n"}{"    "}.command('install'){"\n"}{"    "}.option("-p, --path &lt;path&gt;", "Path to chaincode.car"){"\n"}{"    "}.option("-v, --version &lt;version&gt;", "Version of chaincode to install"){"\n"}{"    "}.action((options) =&gt; {"{"}{"\n"}{"        "}return connect(){"\n"}{"            "}.then(() =&gt; {"{"}{"\n"}{"                "}return sendInstall(options.path, options.version);{"\n"}{"            "}{"}"}){"\n"}{"            "}.then(() =&gt; {"{"}{"\n"}{"                "}return disconnect();{"\n"}{"            "}{"}"}){"\n"}{"            "}.catch((err) =&gt; {"{"}{"\n"}{"                "}console.log("error:" + err);{"\n"}{"            "}{"}"});{"\n"}{"    "}{"}"});{"\n"}{"\n"}program{"\n"}{"    "}.command('instantiate'){"\n"}{"    "}.action(() =&gt; {"{"}{"\n"}{"        "}return connect(){"\n"}{"            "}.then(() =&gt; {"{"}{"\n"}{"                "}return sendInstantiate({"{"}{"\n"}{"                                           "}'partyA': {"{"}'entity':'A', 'value':100{"}"},{"\n"}{"                                           "}'partyB': {"{"}'entity':'B', 'value':200{"}"}{"\n"}{"                                       "}{"}"});{"\n"}{"            "}{"}"}){"\n"}{"            "}.then(() =&gt; {"{"}{"\n"}{"                "}return disconnect();{"\n"}{"            "}{"}"}){"\n"}{"            "}.catch((err) =&gt; {"{"}{"\n"}{"                "}console.log("error:" + err);{"\n"}{"            "}{"}"});{"\n"}{"    "}{"}"});{"\n"}{"\n"}program{"\n"}{"    "}.command('makepayment &lt;partySrc&gt; &lt;partyDst&gt; &lt;amount&gt;'){"\n"}{"    "}.action((partySrc, partyDst, amount) =&gt; {"{"}{"\n"}{"        "}return connect(){"\n"}{"            "}.then(() =&gt; {"{"}{"\n"}{"                "}return makePayment({"{"}{"\n"}{"                                       "}'partySrc': partySrc,{"\n"}{"                                       "}'partyDst': partyDst,{"\n"}{"                                       "}'amount':{"   "}parseInt(amount){"\n"}{"                                   "}{"}"});{"\n"}{"            "}{"}"}){"\n"}{"            "}.then(() =&gt; {"{"}{"\n"}{"                "}return disconnect();{"\n"}{"            "}{"}"}){"\n"}{"            "}.catch((err) =&gt; {"{"}{"\n"}{"                "}console.log("error:" + err);{"\n"}{"            "}{"}"});{"\n"}{"    "}{"}"});{"\n"}{"\n"}program{"\n"}{"    "}.command('checkbalance &lt;id&gt;'){"\n"}{"    "}.action((id) =&gt; {"{"}{"\n"}{"        "}return connect(){"\n"}{"            "}.then(() =&gt; {"{"}{"\n"}{"                "}return checkBalance({"{"}'id':id{"}"});{"\n"}{"            "}{"}"}){"\n"}{"            "}.then((result) =&gt; {"{"}{"\n"}{"                "}console.log("balance:" + result.balance);{"\n"}{"                "}return disconnect();{"\n"}{"            "}{"}"}){"\n"}{"            "}.catch((err) =&gt; {"{"}{"\n"}{"                "}console.log("error:" + err);{"\n"}{"            "}{"}"});{"\n"}{"    "}{"}"});{"\n"}{"\n"}{"\n"}program.parse(process.argv);{"\n"}{"\n"}</code></pre>
                    <p>We know how to write a client using NodeJS. So, what is the difference here? First, we need <code className="hljs hl-inline">protobufjs</code> to use our interfaces. As you can see in the documentation, one can convert with:</p>
                    <pre><code className="hljs ">chaintool proto{"\n"}</code></pre>
                    <p>a <code className="hljs hl-inline">.cci</code> file to a <code className="hljs hl-inline">.proto</code> file. That is how we use the interface and what helps us.</p>
                    <p>Another nice thing, <code className="hljs hl-inline">chaintool</code> gives us is the packaging. The packages are called <strong>CAR(Chaincode Archive)</strong>. This format is supported by HFC SDK for NodeJS and the CLI.</p>
                    </div>
                </div>
                </div>
            </div>
        );
    }
}

export default Chaintool;