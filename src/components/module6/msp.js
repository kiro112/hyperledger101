'use strict';

import React, { Component } from 'react';

class Msp extends Component {

    render () {
        return (
            <div className="xblock xblock-student_view xblock-student_view-vertical" data-runtime-class="LmsRuntime" data-init="VerticalStudentView" data-course-id="course-v1:B9lab+HLF-12+2018-07" data-request-token="e795554ea1b711e8be160a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@vertical+block@a1812f0fd1a643d1bcd677a7349b7ab2" data-block-type="vertical">
        <div className="vert-mod">
          <div className="vert vert-0" data-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@2f27c8cf1e1946fa96c6b4d6fbdc3979">
            <div className="xblock xblock-student_view xblock-student_view-html xmodule_display xmodule_HtmlModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="html" data-request-token="e795554ea1b711e8be160a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@2f27c8cf1e1946fa96c6b4d6fbdc3979" data-type="HTMLModule" data-course-id="course-v1:B9lab+HLF-12+2018-07">
              <h2>MSP</h2>
              <p>We mentioned the Membership Service Provider (MSP) in Module 2. </p>
              <p>Amongst other things, it <a href="http://hyperledger-fabric.readthedocs.io/en/release-1.1/msp.html">specifies a folder structure</a> for the network.</p>
              <p>Let us briefly talk about this structure. If you look at the <code className="hljs hl-inline">crypto-config</code> folder of the PCXCHG network, you will find:</p>
              <ul>
                <li><p>ordererOrganizations</p>
                  <ul>
                    <li>pcxchg.com
                      <ul>
                        <li>ca: root CA</li>
                        <li>msp: cryptographic material for signature verification</li>
                        <li>orderers
                          <ul>
                            <li>msp: Orderer Identity</li>
                          </ul></li>
                        <li>users: cryptographic material for users of pcxchg.com</li>
                        <li>...</li>
                      </ul></li>
                  </ul></li>
                <li><p>peerOrganizations</p>
                  <ul>
                    <li>Amazon.com
                      <ul>
                        <li>...</li>
                        <li>msp: cryptographic material for signature verification</li>
                        <li>peers
                          <ul>
                            <li>peer0.Amazon.com</li>
                            <li>msp: peer0 Identity</li>
                          </ul></li>
                        <li>users: cryptographic material for users of Amazon.com</li>
                        <li>...</li>
                      </ul></li>
                    <li>Asus.com...</li>
                  </ul></li>
              </ul>
              <p>There are more subfolder, but we do not need to focus on them. Each identity MSP must have:</p>
              <ul>
                <li>admincerts: administrative user certificate</li>
                <li>cacerts: root CA certificate</li>
                <li>keystore: identity private key</li>
                <li>signcerts: identity certificate</li>
              </ul>
              <p>and each identity MSP can have:</p>
              <ul>
                <li>intermediatecerts</li>
                <li>crls</li>
                <li>tlscacerts</li>
                <li>tlsintermediatecerts</li>
              </ul>
              <p>Previously, we used <strong>cryptogen</strong> to generate our certificates. But <strong>cryptogen</strong> was not designed for production use. We have utilized it in the examples because it is easy to employ. Unfortunately, the certificates generated with <strong>cryptogen</strong> are not fully compatible with Fabric CA. </p>
              <p>In addition, private keys should be kept private, but <strong>cryptogen</strong> generates all certificates and keys on one host. </p>
              <p>So, we will replace the certificates in our PCXCHG network.</p>
              <h3>Manual Creation</h3>
              <p>At the moment, there is no direct manner, like <strong>cryptogen</strong>, to generate certificates with Fabric CA and a configuration file. But, <a href="https://jira.hyperledger.org/browse/FAB-5310">work is in progress</a>.</p>
              <p>Let us try to replace the certificates for <code className="hljs hl-inline">Amazon.com</code> in the PCXCHG network. For this purpose, we can use the network from the last section. Create a folder <code className="hljs hl-inline">AmazonCA</code> and a file <code className="hljs hl-inline">docker-compose.yaml</code> in it:</p>
              <pre><code className="hljs yaml">{"\n"}version: '2'{"\n"}{"\n"}networks:{"\n"}{"  "}AmazonCA:{"\n"}{"\n"}services:{"\n"}{"   "}ca.Amazon:{"\n"}{"     "}image: hyperledger/fabric-ca:x86_64-1.1.0{"\n"}{"     "}container_name: ca.Amazon{"\n"}{"     "}ports:{"\n"}{"       "}- 7054:7054{"\n"}{"     "}environment:{"\n"}{"       "}- FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server{"\n"}{"       "}- FABRIC_CA_SERVER_CA_NAME=ca.Amazon{"\n"}{"     "}volumes:{"\n"}{"       "}- ./fabric-ca-server:/etc/hyperledger/fabric-ca-server{"\n"}{"     "}command: sh -c 'fabric-ca-server start -b admin:adminpw'{"\n"}{"     "}networks:{"\n"}{"      "}- AmazonCA{"\n"}{"\n"}{"   "}ca.client.Amazon:{"\n"}{"     "}tty: true{"\n"}{"     "}image: hyperledger/fabric-ca:x86_64-1.1.0{"\n"}{"     "}container_name: admin-client{"\n"}{"     "}environment:{"\n"}{"       "}- FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-client{"\n"}{"       "}- CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock{"\n"}{"     "}volumes:{"\n"}{"       "}- ./fabric-ca-client:/etc/hyperledger/fabric-ca-client{"\n"}{"     "}depends_on:{"\n"}{"       "}- ca.Amazon{"\n"}{"     "}command: sh -c 'sleep 5;fabric-ca-client enroll -u http://admin:adminpw@ca.Amazon:7054;sleep 10000'{"\n"}{"     "}networks:{"\n"}{"      "}- AmazonCA{"\n"}</code></pre>
              <p>Now start the network:</p>
              <pre><code className="hljs bash">{"\n"}docker-compose up{"\n"}</code></pre>
              <p>This will immediately create an <code className="hljs hl-inline">AmazonCA/fabric-ca-client/msp</code> folder, which will be our <code className="hljs hl-inline">Admin@Amazon.com</code>. This is the bootstrap administrator of <code className="hljs hl-inline">fabric-ca-server</code> and you may want to create another user in production but let us keep things easy here. Time to use those certificates:</p>
              <ul>
                <li>replace the content of <code className="hljs hl-inline">pcxchg/crypto-config/peerOrganizations/Amazon.com/msp/admincerts/Admin@Amazon.com-cert.pem</code> with <code className="hljs hl-inline">AmazonCA/fabric-ca-client/msp/signcerts/cert.pem</code></li>
                <li>replace the content of <code className="hljs hl-inline">pcxchg/crypto-config/peerOrganizations/Amazon.com/msp/cacerts/ca.Amazon.com-cert.pem</code> with <code className="hljs hl-inline">AmazonCA/fabric-ca-client/msp/cacerts/ca-Amazon-7054.pem</code></li>
              </ul>
              <p>These certificates are what we need (for Amazon) to generate the genesis and channel configuration blocks. So, there is no need to share the private keys. </p>
              <p>Now, let us set up the certificates for an admin user of <code className="hljs hl-inline">Amazon.com</code>:</p>
              <ul>
                <li>replace the content of <code className="hljs hl-inline">pcxchg/crypto-config/peerOrganizations/Amazon.com/users/Admin@Amazon.com/msp/admincerts/Admin@Amazon.com-cert.pem</code> with <code className="hljs hl-inline">AmazonCA/fabric-ca-client/msp/signcerts/cert.pem</code></li>
                <li>replace the content of <code className="hljs hl-inline">pcxchg/crypto-config/peerOrganizations/Amazon.com/users/Admin@Amazon.com/msp/signcerts/Admin@Amazon.com-cert.pem</code> with <code className="hljs hl-inline">AmazonCA/fabric-ca-client/msp/signcerts/cert.pem</code></li>
                <li>replace the content of <code className="hljs hl-inline">pcxchg/crypto-config/peerOrganizations/Amazon.com/users/Admin@Amazon.com/msp/cacerts/ca.Amazon.com-cert.pem</code> with <code className="hljs hl-inline">AmazonCA/fabric-ca-client/msp/cacerts/ca-Amazon-7054.pem</code></li>
                <li>remove the key in <code className="hljs hl-inline">pcxchg/crypto-config/peerOrganizations/Amazon.com/users/Admin@Amazon.com/msp/keystore</code> and insert the one from <code className="hljs hl-inline">AmazonCA/fabric-ca-client/msp/keystore</code>.</li>
              </ul>
              <p>Yes, it is a lot of work to replace the certificates for the admin user. </p>
              <p>Let us replace also the certificates for the <code className="hljs hl-inline">peer0.Amazon.com</code>. Therefore, first:</p>
              <pre><code className="hljs bash">{"\n"}docker exec -it admin-client bash{"\n"}</code></pre>
              <p>And in this container run:</p>
              <pre><code className="hljs bash">{"\n"}fabric-ca-client register --id.name peer0 --id.type peer --id.affiliation org1.department1 --id.secret peerpw{"\n"}{"\n"}fabric-ca-client enroll -u http://peer0:peerpw@ca.Amazon:7054 -M peer0.Amazon.com{"\n"}</code></pre>
              <p>This will create <code className="hljs hl-inline">AmazonCA/fabric-ca-client/peer0.Amazon.com</code>. 
                Now, we will use those certificates:</p>
              <ul>
                <li>replace the content of <code className="hljs hl-inline">pcxchg/crypto-config/peerOrganizations/Amazon.com/peers/peer0.Amazon.com/msp/admincerts/Admin@Amazon.com-cert.pem</code> with <code className="hljs hl-inline">AmazonCA/fabric-ca-client/msp/signcerts/cert.pem</code></li>
                <li>replace the content of <code className="hljs hl-inline">pcxchg/crypto-config/peerOrganizations/Amazon.com/peers/peer0.Amazon.com/msp/cacerts/ca.Amazon.com-cert.pem</code> with <code className="hljs hl-inline">AmazonCA/fabric-ca-client/peer0.Amazon.com/cacerts/ca-Amazon-7054.pem</code></li>
                <li>remove the key in <code className="hljs hl-inline">pcxchg/crypto-config/peerOrganizations/Amazon.com/peers/peer0.Amazon.com/msp/keystore</code> and insert the one from <code className="hljs hl-inline">AmazonCA/fabric-ca-client/peer0.Amazon.com/keystore</code> there.</li>
                <li>replace the content of <code className="hljs hl-inline">pcxchg/crypto-config/peerOrganizations/Amazon.com/peers/peer0.Amazon.com/msp/signcerts/peer0.Amazon.com-cert.pem</code> with <code className="hljs hl-inline">AmazonCA/fabric-ca-client/peer0.Amazon.com/signcerts/cert.pem</code></li>
              </ul>
              <p>So, we did not touch TLS, because we will still use the network with TLS disabled. And there are some details like affiliations etc. we could adjust, but we do not need to at his point. If you replaced everything, generate artifacts with:</p>
              <pre><code className="hljs bash">{"\n"}export FABRIC_CFG_PATH=./{"\n"}{"\n"}configtxgen -profile PCXCHGOrdererGenesis -outputBlock ./orderer/genesis.block{"\n"}{"\n"}configtxgen -profile AsusChannel -outputCreateChannelTx ./channels/Asus.tx -channelID asus{"\n"}configtxgen -profile DellChannel -outputCreateChannelTx ./channels/Dell.tx -channelID dell{"\n"}configtxgen -profile HPChannel -outputCreateChannelTx ./channels/HP.tx -channelID hp{"\n"}{"\n"}configtxgen -profile AsusChannel -outputAnchorPeersUpdate ./channels/asusanchor.tx -channelID asus -asOrg AsusMSP{"\n"}configtxgen -profile DellChannel -outputAnchorPeersUpdate ./channels/dellanchor.tx -channelID dell -asOrg DellMSP{"\n"}configtxgen -profile HPChannel -outputAnchorPeersUpdate ./channels/hpanchor.tx -channelID hp -asOrg HPMSP{"\n"}{"\n"}configtxgen -profile AsusChannel -outputAnchorPeersUpdate ./channels/amazonanchorasus.tx -channelID asus -asOrg AmazonMSP{"\n"}configtxgen -profile DellChannel -outputAnchorPeersUpdate ./channels/amazonanchordell.tx -channelID dell -asOrg AmazonMSP{"\n"}configtxgen -profile HPChannel -outputAnchorPeersUpdate ./channels/amazonanchorhp.tx -channelID hp -asOrg AmazonMSP{"\n"}</code></pre>
              <p>And start the network. Now, the PCXCHG network should work well, like it did before. </p>
              <h3>Compromise Solution</h3>
              <p>On the other hand, we can use a script. You can <a href="https://gerrit.hyperledger.org/r/#/c/10871/6/examples/e2e_cli/fabric-ca-cryptogen.sh">find one</a> in the <code className="hljs hl-inline">e2e_cli</code> example. Let us analyse it, before we use it in the next section:</p>
              <pre><code className="hljs sh">{"\n"}#!/bin/bash +x{"\n"}#{"\n"}# Copyright IBM Corp. All Rights Reserved.{"\n"}#{"\n"}# SPDX-License-Identifier: Apache-2.0{"\n"}#{"\n"}{"\n"}#set -e{"\n"}{"\n"}# Organization info where each line is of the form:{"\n"}#{"    "}&lt;type&gt;:&lt;orgName&gt;:&lt;rootCAPort&gt;:&lt;intermediateCAPort&gt;:&lt;numOrderersOrPeers&gt;{"\n"}ORGS="\{"\n"}{"   "}orderer:example.com:7054:7055:1 \{"\n"}{"   "}peer:org1.example.com:7056:7057:2 \{"\n"}{"   "}peer:org2.example.com:7058:7059:2 \{"\n"}"{"\n"}</code></pre>
              <p>So, we will have to change this part according to our network. For now, let us continue:</p>
              <pre><code className="hljs sh">{"\n"}# If true, uses both a root and intermediate CA{"\n"}INTERMEDIATE_CA=true{"\n"}{"\n"}# If true, recreate crypto if it already exists{"\n"}RECREATE=false{"\n"}{"\n"}# Path to fabric CA executables{"\n"}FCAHOME=$GOPATH/src/github.com/hyperledger/fabric-ca{"\n"}SERVER=$FCAHOME/bin/fabric-ca-server{"\n"}CLIENT=$FCAHOME/bin/fabric-ca-client{"\n"}{"\n"}# Crypto-config directory{"\n"}CDIR="crypto-config"{"\n"}{"\n"}# More verbose logging for fabric-ca-server &amp; fabric-ca-client{"\n"}DEBUG=-d{"\n"}</code></pre>
              <p>We will not run this script in a container. Therefore, your (virtual) machine needs the Fabric CA. You can get it with:</p>
              <pre><code className="hljs sh">{"\n"}cd $GOPATH/src/github.com/hyperledger{"\n"}git clone -b release-1.1 https://github.com/hyperledger/fabric-ca/{"\n"}</code></pre>
              <p>To run the script, be sure that both your <code className="hljs hl-inline">GOPATH</code> and <code className="hljs hl-inline">PATH</code> are well set. 
                You should have <code className="hljs hl-inline">$GOPATH/bin</code> in your <code className="hljs hl-inline">PATH</code>.</p>
              <div className="b9-warning">
                You will need Go version 1.9 to run this script. If you installed <a href="https://github.com/travis-ci/gimme">gimmi</a>, you can run <code>eval "$(gimme 1.9)"</code>
              </div>
              <p>Also, you may find you need to install dependencies for your platform. For example libtool for Ubuntu. <code className="hljs hl-inline">sudo apt-get install libtool</code>. </p>
              <p>Ok, let us continue looking into the script:</p>
              <pre><code className="hljs sh">{"\n"}# Main fabric CA crypto config function{"\n"}function main {"{"}{"\n"}{"   "}if [ -d $CDIR -a "$RECREATE" = false ]; then{"\n"}{"      "}echo "#################################################################"{"\n"}{"      "}echo "#######{"    "}Crypto material already exists{"   "}#####################"{"\n"}{"      "}echo "#################################################################"{"\n"}{"      "}exit 0{"\n"}{"   "}fi{"\n"}{"   "}echo "#################################################################"{"\n"}{"   "}echo "#######{"    "}Generating crypto material using Fabric CA{"  "}##########"{"\n"}{"   "}echo "#################################################################"{"\n"}{"   "}echo "Checking executables ..."{"\n"}{"   "}mydir=`pwd`{"\n"}{"   "}checkExecutables{"\n"}{"   "}cd $mydir{"\n"}{"   "}if [ -d $CDIR ]; then{"\n"}{"      "}echo "Cleaning up ..."{"\n"}{"      "}stopAllCAs{"\n"}{"      "}rm -rf $CDIR{"\n"}{"   "}fi{"\n"}{"   "}echo "Setting up organizations ..."{"\n"}{"   "}setupOrgs{"\n"}{"   "}echo "Finishing ..."{"\n"}{"   "}stopAllCAs{"\n"}{"   "}echo "Complete"{"\n"}{"}"}{"\n"}{"\n"}# Check and build executables as needed{"\n"}function checkExecutables {"{"}{"\n"}{"   "}if [ ! -d $FCAHOME ]; then{"\n"}{"      "}fatal "Directory does not exist: $FCAHOME"{"\n"}{"   "}fi{"\n"}{"   "}if [ ! -x $SERVER ]; then{"\n"}{"      "}dir=`pwd`{"\n"}{"      "}cd $FCAHOME{"\n"}{"      "}make fabric-ca-server{"\n"}{"      "}if [ $? -ne 0 ]; then{"\n"}{"         "}fatal "Failed to build $SERVER"{"\n"}{"      "}fi{"\n"}{"   "}fi{"\n"}{"   "}if [ ! -x $CLIENT ]; then{"\n"}{"      "}dir=`pwd`{"\n"}{"      "}cd $FCAHOME{"\n"}{"      "}make fabric-ca-client{"\n"}{"      "}if [ $? -ne 0 ]; then{"\n"}{"         "}fatal "Failed to build $CLIENT"{"\n"}{"      "}fi{"\n"}{"   "}fi{"\n"}{"}"}{"\n"}</code></pre>
              <p>So, what is important? Yes, <code className="hljs hl-inline">setupOrgs</code>:</p>
              <pre><code className="hljs sh">{"\n"}# Setup orderer and peer organizations{"\n"}function setupOrgs {"{"}{"\n"}{"   "}for ORG in $ORGS{"\n"}{"   "}do{"\n"}{"      "}setupOrg $ORG{"\n"}{"   "}done{"\n"}{"}"}{"\n"}{"\n"}# Start an organization's root and intermediate CA servers{"\n"}#{"   "}setupOrg &lt;type&gt;:&lt;orgName&gt;:&lt;rootCAPort&gt;:&lt;intermediateCAPort&gt;:&lt;numNodes&gt;{"\n"}function setupOrg {"{"}{"\n"}{"   "}IFSBU=$IFS{"\n"}{"   "}IFS=: args=($1){"\n"}{"   "}if [ ${"{"}#args[@]{"}"} -ne 5 ]; then{"\n"}{"      "}fatal "setupOrg: bad org spec: $1"{"\n"}{"   "}fi{"\n"}{"   "}type=${"{"}args[0]{"}"}{"\n"}{"   "}orgName=${"{"}args[1]{"}"}{"\n"}{"   "}orgDir=${"{"}CDIR{"}"}/${"{"}type{"}"}Organizations/${"{"}args[1]{"}"}{"\n"}{"   "}rootCAPort=${"{"}args[2]{"}"}{"\n"}{"   "}intermediateCAPort=${"{"}args[3]{"}"}{"\n"}{"   "}numNodes=${"{"}args[4]{"}"}{"\n"}{"   "}IFS=$IFSBU{"\n"}{"   "}# Start the root CA server{"\n"}{"   "}startCA $orgDir/ca/root $rootCAPort $orgName{"\n"}{"   "}# Enroll an admin user with the root CA{"\n"}{"   "}usersDir=$orgDir/users{"\n"}{"   "}adminHome=$usersDir/rootAdmin{"\n"}{"   "}enroll $adminHome http://admin:adminpw@localhost:$rootCAPort $orgName{"\n"}{"   "}if [ "$INTERMEDIATE_CA" == "true" ]; then{"\n"}{"      "}# Start the intermediate CA server{"\n"}{"      "}startCA $orgDir/ca/intermediate $intermediateCAPort $orgName http://admin:adminpw@localhost:$rootCAPort{"\n"}{"      "}# Enroll an admin user with the intermediate CA{"\n"}{"      "}adminHome=$usersDir/intermediateAdmin{"\n"}{"      "}intermediateCAURL=http://admin:adminpw@localhost:$intermediateCAPort{"\n"}{"      "}enroll $adminHome $intermediateCAURL $orgName{"\n"}{"   "}else{"\n"}{"      "}intermediateCAPort=$rootCAPort{"\n"}{"      "}intermediateCAURL=http://admin:adminpw@localhost:$rootCAPort{"\n"}{"   "}fi{"\n"}{"   "}# Register and enroll admin with the intermediate CA{"\n"}{"   "}adminUserHome=$usersDir/Admin@${"{"}orgName{"}"}{"\n"}{"   "}registerAndEnroll $adminHome $adminUserHome $intermediateCAPort $orgName nodeAdmin{"\n"}{"   "}# Register and enroll user1 with the intermediate CA{"\n"}{"   "}user1UserHome=$usersDir/User1@${"{"}orgName{"}"}{"\n"}{"   "}registerAndEnroll $adminHome $user1UserHome $intermediateCAPort $orgName{"\n"}{"   "}# Create nodes (orderers or peers){"\n"}{"   "}nodeCount=0{"\n"}{"   "}while [ $nodeCount -lt $numNodes ]; do{"\n"}{"      "}if [ $numNodes -gt 1 ]; then{"\n"}{"         "}nodeDir=$orgDir/${"{"}type{"}"}s/${"{"}type{"}"}${"{"}nodeCount{"}"}.${"{"}orgName{"}"}{"\n"}{"      "}else{"\n"}{"         "}nodeDir=$orgDir/${"{"}type{"}"}s/${"{"}type{"}"}.${"{"}orgName{"}"}{"\n"}{"      "}fi{"\n"}{"      "}mkdir -p $nodeDir{"\n"}{"      "}# Get TLS crypto for this node{"\n"}{"      "}tlsEnroll $nodeDir $rootCAPort $orgName{"\n"}{"      "}# Register and enroll this node's identity{"\n"}{"      "}registerAndEnroll $adminHome $nodeDir $intermediateCAPort $orgName{"\n"}{"      "}normalizeMSP $nodeDir $orgName $adminUserHome{"\n"}{"      "}nodeCount=$(expr $nodeCount + 1){"\n"}{"   "}done{"\n"}{"   "}# Get CA certs from intermediate CA{"\n"}{"   "}getcacerts $orgDir $intermediateCAURL{"\n"}{"   "}# Rename MSP files to names expected by end-to-end{"\n"}{"   "}normalizeMSP $orgDir $orgName $adminUserHome{"\n"}{"   "}normalizeMSP $adminHome $orgName{"\n"}{"   "}normalizeMSP $adminUserHome $orgName{"\n"}{"   "}normalizeMSP $user1UserHome $orgName{"\n"}{"}"}{"\n"}</code></pre>
              <p>This part <em>implements</em> the MSP with Fabric CA. 
                You can observe, that it assumes two CAs for each organisation by default. One is a root CA, the other one is an intermediate CA. At this point, an overview is helpful:</p>
              <p><img src="https://s3-eu-west-1.amazonaws.com/b9-academy-assets/course-assets/HLF-0/scriptoverview.png" /></p>
              <p>You know how to start a Fabric CA server and how to enroll the admin with it. Starting an intermediate CA server looks like this:</p>
              <pre><code className="hljs sh">{"\n"}fabric-ca-server start -b admin:adminpw -u http://&lt;enrollmentID&gt;:&lt;secret&gt;@&lt;parentserver&gt;:&lt;parentport&gt;{"\n"}</code></pre>
              <p>The <code className="hljs hl-inline">-u</code> flag specifies the URL of the parent CA. Remember, we have to enrol the intermediate CA. Ok, let's continue:</p>
              <pre><code className="hljs sh">{"\n"}# Start a root CA server:{"\n"}#{"    "}startCA &lt;homeDirectory&gt; &lt;listeningPort&gt; &lt;orgName&gt;{"\n"}# Start an intermediate CA server:{"\n"}#{"    "}startCA &lt;homeDirectory&gt; &lt;listeningPort&gt; &lt;orgName&gt; &lt;parentURL&gt;{"\n"}function startCA {"{"}{"\n"}{"   "}homeDir=$1; shift{"\n"}{"   "}port=$1; shift{"\n"}{"   "}orgName=$1; shift{"\n"}{"   "}mkdir -p $homeDir{"\n"}{"   "}export FABRIC_CA_SERVER_HOME=$homeDir{"\n"}{"   "}if [ $# -gt 0 ]; then{"\n"}{"      "}$SERVER start -p $port -b admin:adminpw -u $1 $DEBUG &gt; $homeDir/server.log 2&gt;&amp;1&amp;{"\n"}{"   "}else{"\n"}{"      "}$SERVER start -p $port -b admin:adminpw $DEBUG &gt; $homeDir/server.log 2&gt;&amp;1&amp;{"\n"}{"   "}fi{"\n"}{"   "}echo $! &gt; $homeDir/server.pid{"\n"}{"   "}if [ $? -ne 0 ]; then{"\n"}{"      "}fatal "Failed to start server in $homeDir"{"\n"}{"   "}fi{"\n"}{"   "}debug "Starting CA server in $homeDir on port $port ..."{"\n"}{"   "}sleep 1{"\n"}{"   "}checkCA $homeDir $port{"\n"}{"   "}# Get the TLS crypto for this CA{"\n"}{"   "}tlsEnroll $homeDir $port $orgName{"\n"}{"}"}{"\n"}</code></pre>
              <p>Since you have previously used the Fabric CA, you should understand the commands above.</p>
              <p>The script has some helper functions to control the CA servers, which you can skip if you want:</p>
              <pre><code className="hljs sh">{"\n"}# Make sure a CA server is running{"\n"}#{"    "}checkCA &lt;homeDirectory&gt;{"\n"}function checkCA {"{"}{"\n"}{"   "}pidFile=$1/server.pid{"\n"}{"   "}if [ ! -f $pidFile ]; then{"\n"}{"      "}fatal{"  "}"No PID file for CA server at $1"{"\n"}{"   "}fi{"\n"}{"   "}pid=`cat $pidFile`{"\n"}{"   "}if ps -p $pid &gt; /dev/null{"\n"}{"   "}then{"\n"}{"      "}debug "CA server is started in $1 and listening on port $2"{"\n"}{"   "}else{"\n"}{"      "}fatal "CA server is not running at $1; see logs at $1/server.log"{"\n"}{"   "}fi{"\n"}{"}"}{"\n"}{"\n"}# Stop all CA servers{"\n"}function stopAllCAs {"{"}{"\n"}{"   "}for pidFile in `find $CDIR -name server.pid`{"\n"}{"   "}do{"\n"}{"      "}if [ ! -f $pidFile ]; then{"\n"}{"         "}fatal "\"$pidFile\" is not a file"{"\n"}{"      "}fi{"\n"}{"      "}pid=`cat $pidFile`{"\n"}{"      "}dir=$(dirname $pidFile){"\n"}{"      "}debug "Stopping CA server in $dir with PID $pid ..."{"\n"}{"      "}if ps -p $pid &gt; /dev/null{"\n"}{"      "}then{"\n"}{"         "}kill -9 $pid{"\n"}{"         "}wait $pid 2&gt;/dev/null{"\n"}{"         "}rm -f $pidFile{"\n"}{"         "}debug "Stopped CA server in $dir with PID $pid"{"\n"}{"      "}fi{"\n"}{"   "}done{"\n"}{"}"}{"\n"}</code></pre>
              <p>Next there are other commands, which you have used before:</p>
              <pre><code className="hljs sh">{"\n"}# Register a new user{"\n"}#{"    "}register &lt;user&gt; &lt;password&gt; &lt;registrarHomeDir&gt;{"\n"}function register {"{"}{"\n"}{"   "}export FABRIC_CA_CLIENT_HOME=$3{"\n"}{"   "}mkdir -p $3{"\n"}{"   "}logFile=$3/register.log{"\n"}{"   "}$CLIENT register --id.name $1 --id.secret $2 --id.type user --id.affiliation org1 $DEBUG &gt; $logFile 2&gt;&amp;1{"\n"}{"   "}if [ $? -ne 0 ]; then{"\n"}{"      "}fatal "Failed to register $1 with CA as $3; see $logFile"{"\n"}{"   "}fi{"\n"}{"   "}debug "Registered user $1 with intermediate CA as $3"{"\n"}{"}"}{"\n"}{"\n"}# Enroll an identity{"\n"}#{"    "}enroll &lt;homeDir&gt; &lt;serverURL&gt; &lt;orgName&gt; [&lt;args&gt;]{"\n"}function enroll {"{"}{"\n"}{"   "}homeDir=$1; shift{"\n"}{"   "}url=$1; shift{"\n"}{"   "}orgName=$1; shift{"\n"}{"   "}mkdir -p $homeDir{"\n"}{"   "}export FABRIC_CA_CLIENT_HOME=$homeDir{"\n"}{"   "}logFile=$homeDir/enroll.log{"\n"}{"   "}# Get an enrollment certificate{"\n"}{"   "}$CLIENT enroll -u $url $DEBUG $* &gt; $logFile 2&gt;&amp;1{"\n"}{"   "}if [ $? -ne 0 ]; then{"\n"}{"      "}fatal "Failed to enroll $homeDir with CA at $url; see $logFile"{"\n"}{"   "}fi{"\n"}{"   "}# Get a TLS certificate{"\n"}{"   "}debug "Enrolled $homeDir with CA at $url"{"\n"}{"}"}{"\n"}{"\n"}# Register and enroll a new user{"\n"}#{"    "}registerAndEnroll &lt;registrarHomeDir&gt; &lt;registreeHomeDir&gt; &lt;serverPort&gt; &lt;orgName&gt; [&lt;userName&gt;]{"\n"}function registerAndEnroll {"{"}{"\n"}{"   "}userName=$5{"\n"}{"   "}if [ "$userName" = "" ]; then{"\n"}{"      "}userName=$(basename $2){"\n"}{"   "}fi{"\n"}{"   "}register $userName "secret" $1{"\n"}{"   "}enroll $2 http://${"{"}userName{"}"}:secret@localhost:$3 $4{"\n"}{"}"}{"\n"}</code></pre>
              <p>Nothing new happens above. Here, the <code className="hljs hl-inline">fabric-ca-client register</code> and <code className="hljs hl-inline">fabric-ca-client enroll</code> are used like we saw earlier.</p>
              <p>Something new happens here though:</p>
              <pre><code className="hljs sh">{"\n"}# Enroll to get TLS crypto material{"\n"}#{"    "}tlsEnroll &lt;homeDir&gt; &lt;serverPort&gt; &lt;orgName&gt;{"\n"}function tlsEnroll {"{"}{"\n"}{"   "}homeDir=$1{"\n"}{"   "}port=$2{"\n"}{"   "}orgName=$3{"\n"}{"   "}host=$(basename $homeDir),$(basename $homeDir | cut -d'.' -f1){"\n"}{"   "}tlsDir=$homeDir/tls{"\n"}{"   "}srcMSP=$tlsDir/msp{"\n"}{"   "}dstMSP=$homeDir/msp{"\n"}{"   "}enroll $tlsDir http://admin:adminpw@localhost:$port $orgName --csr.hosts $host --enrollment.profile tls{"\n"}{"   "}cp $srcMSP/signcerts/* $tlsDir/server.crt{"\n"}{"   "}cp $srcMSP/keystore/* $tlsDir/server.key{"\n"}{"   "}mkdir -p $dstMSP/keystore{"\n"}{"   "}cp $srcMSP/keystore/* $dstMSP/keystore{"\n"}{"   "}mkdir -p $dstMSP/tlscacerts{"\n"}{"   "}cp $srcMSP/tlscacerts/* $dstMSP/tlscacerts/tlsca.${"{"}orgName{"}"}-cert.pem{"\n"}{"   "}if [ -d $srcMSP/tlsintermediatecerts ]; then{"\n"}{"      "}cp $srcMSP/tlsintermediatecerts/* $tlsDir/ca.crt{"\n"}{"      "}mkdir -p $dstMSP/tlsintermediatecerts{"\n"}{"      "}cp $srcMSP/tlsintermediatecerts/* $dstMSP/tlsintermediatecerts{"\n"}{"   "}else{"\n"}{"      "}cp $srcMSP/tlscacerts/* $tlsDir/ca.crt{"\n"}{"   "}fi{"\n"}{"   "}rm -rf $srcMSP $homeDir/enroll.log $homeDir/fabric-ca-client-config.yaml{"\n"}{"}"}{"\n"}</code></pre>
              <p>This generates TLS certificates. We did it before with <strong>cryptogen</strong>, although we did not use them at the time. The difference is the use of:</p>
              <pre><code className="hljs sh">{"\n"}--csr.hosts ... --enrollment.profile tls{"\n"}</code></pre>
              <p>The first option is for the host names, the second is the name of your signing profile. If you are unfamiliar with TLS, <a href="https://www.youtube.com/watch?v=Rp3iZUvXWlM">this</a> is a useful presentation.</p>
              <p><strong>cryptogen</strong> generates MSP files in a way that we want to reproduce with <code className="hljs hl-inline">fabric-ca-cryptogen.sh</code>:</p>
              <pre><code className="hljs sh">{"\n"}# Rename MSP files as is expected by the e2e example{"\n"}#{"    "}normalizeMSP &lt;home&gt; &lt;orgName&gt; &lt;adminHome&gt;{"\n"}function normalizeMSP {"{"}{"\n"}{"   "}userName=$(basename $1){"\n"}{"   "}mspDir=$1/msp{"\n"}{"   "}orgName=$2{"\n"}{"   "}admincerts=$mspDir/admincerts{"\n"}{"   "}cacerts=$mspDir/cacerts{"\n"}{"   "}intcerts=$mspDir/intermediatecerts{"\n"}{"   "}signcerts=$mspDir/signcerts{"\n"}{"   "}cacertsfname=$cacerts/ca.${"{"}orgName{"}"}-cert.pem{"\n"}{"   "}if [ ! -f $cacertsfname ]; then{"\n"}{"      "}mv $cacerts/* $cacertsfname{"\n"}{"   "}fi{"\n"}{"   "}intcertsfname=$intcerts/ca.${"{"}orgName{"}"}-cert.pem{"\n"}{"   "}if [ ! -f $intcertsfname ]; then{"\n"}{"      "}if [ -d $intcerts ]; then{"\n"}{"         "}mv $intcerts/* $intcertsfname{"\n"}{"      "}fi{"\n"}{"   "}fi{"\n"}{"   "}signcertsfname=$signcerts/${"{"}userName{"}"}-cert.pem{"\n"}{"   "}if [ ! -f $signcertsfname ]; then{"\n"}{"      "}fname=`ls $signcerts 2&gt; /dev/null`{"\n"}{"      "}if [ "$fname" = "" ]; then{"\n"}{"         "}mkdir -p $signcerts{"\n"}{"         "}cp $cacertsfname $signcertsfname{"\n"}{"      "}else{"\n"}{"         "}mv $signcerts/* $signcertsfname{"\n"}{"      "}fi{"\n"}{"   "}fi{"\n"}{"   "}# Copy the admin cert, which would need to be done out-of-band in the real world{"\n"}{"   "}mkdir -p $admincerts{"\n"}{"   "}if [ $# -gt 2 ]; then{"\n"}{"      "}src=`ls $3/msp/signcerts/*`{"\n"}{"      "}dst=$admincerts/Admin@${"{"}orgName{"}"}-cert.pem{"\n"}{"   "}else{"\n"}{"      "}src=`ls $signcerts/*`{"\n"}{"      "}dst=$admincerts{"\n"}{"   "}fi{"\n"}{"   "}if [ ! -f $src ]; then{"\n"}{"      "}fatal "admin certificate file not found at $src"{"\n"}{"   "}fi{"\n"}{"   "}cp $src $dst{"\n"}{"}"}{"\n"}# Get the CA certificates and place in MSP directory in &lt;dir&gt;{"\n"}#{"    "}getcacerts &lt;dir&gt; &lt;serverURL&gt;{"\n"}function getcacerts {"{"}{"\n"}{"   "}mkdir -p $1{"\n"}{"   "}export FABRIC_CA_CLIENT_HOME=$1{"\n"}{"   "}$CLIENT getcacert -u $2 &gt; $1/getcacert.out 2&gt;&amp;1{"\n"}{"   "}if [ $? -ne 0 ]; then{"\n"}{"      "}fatal "Failed to get CA certificates $1 with CA at $2; see $logFile"{"\n"}{"   "}fi{"\n"}{"   "}mkdir $1/msp/tlscacerts{"\n"}{"   "}cp $1/msp/cacerts/* $1/msp/tlscacerts{"\n"}{"   "}debug "Loaded CA certificates into $1 from CA at $2"{"\n"}{"}"}{"\n"}{"\n"}# Print a fatal error message and exit{"\n"}function fatal {"{"}{"\n"}{"   "}echo "FATAL: $*"{"\n"}{"   "}exit 1{"\n"}{"}"}{"\n"}{"\n"}# Print a debug message{"\n"}function debug {"{"}{"\n"}{"   "}echo "{"    "}$*"{"\n"}{"}"}{"\n"}{"\n"}main{"\n"}</code></pre>
              <p>We will add at the end of <code className="hljs hl-inline">normalizeMSP</code>:</p>
              <pre><code className="hljs ">{"\n"}{"   "}if [ "$INTERMEDIATE_CA" == "false" ]; then{"\n"}{"      "}rm -rf $intcerts{"\n"}{"   "}fi{"\n"}</code></pre>
              <p>to remove the empty certificates.</p>
              <p>So, we can use this script instead of <strong>cryptogen</strong> for the PCXCHG network.</p>
              <h3>Configtxlator</h3>
              <p>If you want to add or remove nodes from a channel, you must change the genesis.block and the channel blocks, which can be done by using the tool <a href="https://github.com/hyperledger/fabric/tree/master/examples/configtxupdate">configtxlator</a>. This tool provides a REST API. It generates a readable JSON configuration. One can create a new configuration using the old one and generate a configuration update. At the end, you can update the channel configuration with the Fabric CLI. </p>
              <p>There is a good <a href="https://www.youtube.com/watch?v=DKuGU5CYV_E">video</a> about <strong>configtxlator</strong> in the Hyperledger Fabric channel on Youtube. </p>
              <p>You will come across a variety of instructions online. The fact is, that this tool properly functions beginning with version <code>1.1.0-preview</code>. In the moment, you do not need to further concern yourself with it. You will deal with it in due time. ;)</p>
              {/*[Watch Rob install the Fabric CA on Ubuntu](6_2_go-get.mp4)*/}
              <h3>Further reading</h3>
              <ul>
                <li><a href="https://linuxctl.com/2017/08/bootstrapping-hyperledger-fabric-1.0/">Bootstrapping Hyperledger Fabric 1.0</a>. It shows you another way to generate the certificates.</li>
              </ul>
              <p>[1] Contributed by IBM and Digital Asset Holdings, Hyperledger Fabric is one of five Hyperledger Projects hosted by The Linux Foundation.</p>
            </div>
          </div>
        </div>
      </div>
        );
    }
}

export default Msp;