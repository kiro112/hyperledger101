'use strict';

import React, { Component } from 'react';

class PcXchg extends Component {

    render () {
        return (
            <div className="xblock xblock-student_view xblock-student_view-vertical" data-runtime-class="LmsRuntime" data-init="VerticalStudentView" data-course-id="course-v1:B9lab+HLF-12+2018-07" data-request-token="5f175a36a1b811e8be160a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@vertical+block@c3ab77f2d76743029e4e298699e1b2d4" data-block-type="vertical">
        <div className="vert-mod">
          <div className="vert vert-0" data-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@248ce39bf37a4f0c9750b2cece07b470">
            <div className="xblock xblock-student_view xblock-student_view-html xmodule_display xmodule_HtmlModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="html" data-request-token="5f175a36a1b811e8be160a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@248ce39bf37a4f0c9750b2cece07b470" data-type="HTMLModule" data-course-id="course-v1:B9lab+HLF-12+2018-07">
              <h2>PCXCHG</h2>
              <p>We need some preparation to generate all certificates with Fabric CA. We will use the script from the last section. You may ask why we want to do this. In the next section, we are going to try the Node.js SDK to enroll an user with Fabric CA. Therefore, we will need <strong>Fabric CA servers</strong> running in our network. They do not like <strong>cryptogen</strong> certificates, so we will provide them with <strong>Fabric CA</strong> certificates. </p>
              <p>Alternatively, you can also generate the certificates with the simple Fabric CA network from the last section. But we have a lot of nodes in our network. However, it could help you to practice. You need to register and enroll your nodes and copy the artifacts into their respective folders.</p>
              <h3>Replace Certificates</h3>
              <p>Go to your <code className="hljs hl-inline">pcxchg</code> folder and rename the <strong>cryptogen</strong> certificates:</p>
              <pre><code className="hljs sh">{"\n"}mv crypto-config _crypto-config{"\n"}</code></pre>
              <p>Of course, you can also remove this folder. But you may want to compare the old certificates to the new ones.</p>
              <p>Now, create a file named <code className="hljs hl-inline">crypto.sh</code> with the following in it:</p>
              <pre><code className="hljs sh">{"\n"}#!/bin/bash +x{"\n"}#{"\n"}# Copyright IBM Corp. All Rights Reserved.{"\n"}#{"\n"}# SPDX-License-Identifier: Apache-2.0{"\n"}#{"\n"}{"\n"}{"\n"}#set -e{"\n"}{"\n"}# Organization info where each line is of the form:{"\n"}#{"    "}&lt;type&gt;:&lt;orgName&gt;:&lt;rootCAPort&gt;:&lt;intermediateCAPort&gt;:&lt;numOrderersOrPeers&gt;{"\n"}ORGS="\{"\n"}{"   "}orderer:pcxchg.com:7100:7101:1 \{"\n"}{"   "}peer:Asus.com:7102:7103:2 \{"\n"}{"   "}peer:Amazon.com:7104:7105:2 \{"\n"}{"   "}peer:HP.com:7106:7107:2 \{"\n"}{"   "}peer:Dell.com:7108:7109:2 \{"\n"}"{"\n"}{"\n"}# If true, uses both a root and intermediate CA{"\n"}INTERMEDIATE_CA=false{"\n"}{"\n"}# If true, recreate crypto if it already exists{"\n"}RECREATE=false{"\n"}{"\n"}# Path to fabric CA executables{"\n"}FCAHOME=$GOPATH/src/github.com/hyperledger/fabric-ca{"\n"}SERVER=$FCAHOME/bin/fabric-ca-server{"\n"}CLIENT=$FCAHOME/bin/fabric-ca-client{"\n"}{"\n"}# Crypto-config directory{"\n"}CDIR="crypto-config"{"\n"}{"\n"}# More verbose logging for fabric-ca-server &amp; fabric-ca-client{"\n"}DEBUG=-d{"\n"}{"\n"}# Main fabric CA crypto config function{"\n"}function main {"{"}{"\n"}{"   "}if [ -d $CDIR -a "$RECREATE" = false ]; then{"\n"}{"      "}echo "#################################################################"{"\n"}{"      "}echo "#######{"    "}Crypto material already exists{"   "}#####################"{"\n"}{"      "}echo "#################################################################"{"\n"}{"      "}exit 0{"\n"}{"   "}fi{"\n"}{"   "}echo "#################################################################"{"\n"}{"   "}echo "#######{"    "}Generating crypto material using Fabric CA{"  "}##########"{"\n"}{"   "}echo "#################################################################"{"\n"}{"   "}echo "Checking executables ..."{"\n"}{"   "}mydir=`pwd`{"\n"}{"   "}checkExecutables{"\n"}{"   "}cd $mydir{"\n"}{"   "}if [ -d $CDIR ]; then{"\n"}{"      "}echo "Cleaning up ..."{"\n"}{"      "}stopAllCAs{"\n"}{"      "}rm -rf $CDIR{"\n"}{"   "}fi{"\n"}{"   "}echo "Setting up organizations ..."{"\n"}{"   "}setupOrgs{"\n"}{"   "}echo "Finishing ..."{"\n"}{"   "}stopAllCAs{"\n"}{"   "}echo "Complete"{"\n"}{"}"}{"\n"}{"\n"}# Check and build executables as needed{"\n"}function checkExecutables {"{"}{"\n"}{"   "}if [ ! -d $FCAHOME ]; then{"\n"}{"      "}fatal "Directory does not exist: $FCAHOME"{"\n"}{"   "}fi{"\n"}{"   "}if [ ! -x $SERVER ]; then{"\n"}{"      "}dir=`pwd`{"\n"}{"      "}cd $FCAHOME{"\n"}{"      "}make fabric-ca-server{"\n"}{"      "}if [ $? -ne 0 ]; then{"\n"}{"         "}fatal "Failed to build $SERVER"{"\n"}{"      "}fi{"\n"}{"   "}fi{"\n"}{"   "}if [ ! -x $CLIENT ]; then{"\n"}{"      "}dir=`pwd`{"\n"}{"      "}cd $FCAHOME{"\n"}{"      "}make fabric-ca-client{"\n"}{"      "}if [ $? -ne 0 ]; then{"\n"}{"         "}fatal "Failed to build $CLIENT"{"\n"}{"      "}fi{"\n"}{"   "}fi{"\n"}{"}"}{"\n"}{"\n"}# Setup orderer and peer organizations{"\n"}function setupOrgs {"{"}{"\n"}{"   "}for ORG in $ORGS{"\n"}{"   "}do{"\n"}{"      "}setupOrg $ORG{"\n"}{"   "}done{"\n"}{"}"}{"\n"}{"\n"}# Start an organization's root and intermediate CA servers{"\n"}#{"   "}setupOrg &lt;type&gt;:&lt;orgName&gt;:&lt;rootCAPort&gt;:&lt;intermediateCAPort&gt;:&lt;numNodes&gt;{"\n"}function setupOrg {"{"}{"\n"}{"   "}IFSBU=$IFS{"\n"}{"   "}IFS=: args=($1){"\n"}{"   "}if [ ${"{"}#args[@]{"}"} -ne 5 ]; then{"\n"}{"      "}fatal "setupOrg: bad org spec: $1"{"\n"}{"   "}fi{"\n"}{"   "}type=${"{"}args[0]{"}"}{"\n"}{"   "}orgName=${"{"}args[1]{"}"}{"\n"}{"   "}orgDir=${"{"}CDIR{"}"}/${"{"}type{"}"}Organizations/${"{"}args[1]{"}"}{"\n"}{"   "}rootCAPort=${"{"}args[2]{"}"}{"\n"}{"   "}intermediateCAPort=${"{"}args[3]{"}"}{"\n"}{"   "}numNodes=${"{"}args[4]{"}"}{"\n"}{"   "}IFS=$IFSBU{"\n"}{"   "}# Start the root CA server{"\n"}{"   "}startCA $orgDir/ca/root $rootCAPort $orgName{"\n"}{"   "}# Enroll an admin user with the root CA{"\n"}{"   "}usersDir=$orgDir/users{"\n"}{"   "}adminHome=$usersDir/rootAdmin{"\n"}{"   "}enroll $adminHome http://admin:adminpw@localhost:$rootCAPort $orgName{"\n"}{"   "}if [ "$INTERMEDIATE_CA" == "true" ]; then{"\n"}{"      "}# Start the intermediate CA server{"\n"}{"      "}startCA $orgDir/ca/intermediate $intermediateCAPort $orgName http://admin:adminpw@localhost:$rootCAPort{"\n"}{"      "}# Enroll an admin user with the intermediate CA{"\n"}{"      "}adminHome=$usersDir/intermediateAdmin{"\n"}{"      "}intermediateCAURL=http://admin:adminpw@localhost:$intermediateCAPort{"\n"}{"      "}enroll $adminHome $intermediateCAURL $orgName{"\n"}{"   "}else{"\n"}{"      "}intermediateCAPort=$rootCAPort{"\n"}{"      "}intermediateCAURL=http://admin:adminpw@localhost:$rootCAPort{"\n"}{"   "}fi{"\n"}{"   "}# Register and enroll admin with the intermediate CA{"\n"}{"   "}adminUserHome=$usersDir/Admin@${"{"}orgName{"}"}{"\n"}{"   "}registerAndEnroll $adminHome $adminUserHome $intermediateCAPort $orgName nodeAdmin{"\n"}{"   "}# Register and enroll user1 with the intermediate CA{"\n"}{"   "}user1UserHome=$usersDir/User1@${"{"}orgName{"}"}{"\n"}{"   "}registerAndEnroll $adminHome $user1UserHome $intermediateCAPort $orgName{"\n"}{"   "}# Create nodes (orderers or peers){"\n"}{"   "}nodeCount=0{"\n"}{"   "}while [ $nodeCount -lt $numNodes ]; do{"\n"}{"      "}if [ $numNodes -gt 1 ]; then{"\n"}{"         "}nodeDir=$orgDir/${"{"}type{"}"}s/${"{"}type{"}"}${"{"}nodeCount{"}"}.${"{"}orgName{"}"}{"\n"}{"      "}else{"\n"}{"         "}nodeDir=$orgDir/${"{"}type{"}"}s/${"{"}type{"}"}.${"{"}orgName{"}"}{"\n"}{"      "}fi{"\n"}{"      "}mkdir -p $nodeDir{"\n"}{"      "}# Get TLS crypto for this node{"\n"}{"      "}tlsEnroll $nodeDir $rootCAPort $orgName{"\n"}{"      "}# Register and enroll this node's identity{"\n"}{"      "}registerAndEnroll $adminHome $nodeDir $intermediateCAPort $orgName{"\n"}{"      "}normalizeMSP $nodeDir $orgName $adminUserHome{"\n"}{"      "}nodeCount=$(expr $nodeCount + 1){"\n"}{"   "}done{"\n"}{"   "}# Get CA certs from intermediate CA{"\n"}{"   "}getcacerts $orgDir $intermediateCAURL{"\n"}{"   "}# Rename MSP files to names expected by end-to-end{"\n"}{"   "}normalizeMSP $orgDir $orgName $adminUserHome{"\n"}{"   "}normalizeMSP $adminHome $orgName{"\n"}{"   "}normalizeMSP $adminUserHome $orgName{"\n"}{"   "}normalizeMSP $user1UserHome $orgName{"\n"}{"}"}{"\n"}{"\n"}# Start a root CA server:{"\n"}#{"    "}startCA &lt;homeDirectory&gt; &lt;listeningPort&gt; &lt;orgName&gt;{"\n"}# Start an intermediate CA server:{"\n"}#{"    "}startCA &lt;homeDirectory&gt; &lt;listeningPort&gt; &lt;orgName&gt; &lt;parentURL&gt;{"\n"}function startCA {"{"}{"\n"}{"   "}homeDir=$1; shift{"\n"}{"   "}port=$1; shift{"\n"}{"   "}orgName=$1; shift{"\n"}{"   "}mkdir -p $homeDir{"\n"}{"   "}export FABRIC_CA_SERVER_HOME=$homeDir{"\n"}{"   "}if [ $# -gt 0 ]; then{"\n"}{"      "}$SERVER start -p $port -b admin:adminpw -u $1 $DEBUG &gt; $homeDir/server.log 2&gt;&amp;1&amp;{"\n"}{"   "}else{"\n"}{"      "}$SERVER start -p $port -b admin:adminpw $DEBUG &gt; $homeDir/server.log 2&gt;&amp;1&amp;{"\n"}{"   "}fi{"\n"}{"   "}echo $! &gt; $homeDir/server.pid{"\n"}{"   "}if [ $? -ne 0 ]; then{"\n"}{"      "}fatal "Failed to start server in $homeDir"{"\n"}{"   "}fi{"\n"}{"   "}debug "Starting CA server in $homeDir on port $port ..."{"\n"}{"   "}sleep 1{"\n"}{"   "}checkCA $homeDir $port{"\n"}{"   "}# Get the TLS crypto for this CA{"\n"}{"   "}tlsEnroll $homeDir $port $orgName{"\n"}{"}"}{"\n"}{"\n"}# Make sure a CA server is running{"\n"}#{"    "}checkCA &lt;homeDirectory&gt;{"\n"}function checkCA {"{"}{"\n"}{"   "}pidFile=$1/server.pid{"\n"}{"   "}if [ ! -f $pidFile ]; then{"\n"}{"      "}fatal{"  "}"No PID file for CA server at $1"{"\n"}{"   "}fi{"\n"}{"   "}pid=`cat $pidFile`{"\n"}{"   "}if ps -p $pid &gt; /dev/null{"\n"}{"   "}then{"\n"}{"      "}debug "CA server is started in $1 and listening on port $2"{"\n"}{"   "}else{"\n"}{"      "}fatal "CA server is not running at $1; see logs at $1/server.log"{"\n"}{"   "}fi{"\n"}{"}"}{"\n"}{"\n"}# Stop all CA servers{"\n"}function stopAllCAs {"{"}{"\n"}{"   "}for pidFile in `find $CDIR -name server.pid`{"\n"}{"   "}do{"\n"}{"      "}if [ ! -f $pidFile ]; then{"\n"}{"         "}fatal "\"$pidFile\" is not a file"{"\n"}{"      "}fi{"\n"}{"      "}pid=`cat $pidFile`{"\n"}{"      "}dir=$(dirname $pidFile){"\n"}{"      "}debug "Stopping CA server in $dir with PID $pid ..."{"\n"}{"      "}if ps -p $pid &gt; /dev/null{"\n"}{"      "}then{"\n"}{"         "}kill -9 $pid{"\n"}{"         "}wait $pid 2&gt;/dev/null{"\n"}{"         "}rm -f $pidFile{"\n"}{"         "}debug "Stopped CA server in $dir with PID $pid"{"\n"}{"      "}fi{"\n"}{"   "}done{"\n"}{"}"}{"\n"}{"\n"}# Register a new user{"\n"}#{"    "}register &lt;user&gt; &lt;password&gt; &lt;registrarHomeDir&gt;{"\n"}function register {"{"}{"\n"}{"   "}export FABRIC_CA_CLIENT_HOME=$3{"\n"}{"   "}mkdir -p $3{"\n"}{"   "}logFile=$3/register.log{"\n"}{"   "}$CLIENT register --id.name $1 --id.secret $2 --id.type user --id.affiliation org1 $DEBUG &gt; $logFile 2&gt;&amp;1{"\n"}{"   "}if [ $? -ne 0 ]; then{"\n"}{"      "}fatal "Failed to register $1 with CA as $3; see $logFile"{"\n"}{"   "}fi{"\n"}{"   "}debug "Registered user $1 with intermediate CA as $3"{"\n"}{"}"}{"\n"}{"\n"}# Enroll an identity{"\n"}#{"    "}enroll &lt;homeDir&gt; &lt;serverURL&gt; &lt;orgName&gt; [&lt;args&gt;]{"\n"}function enroll {"{"}{"\n"}{"   "}homeDir=$1; shift{"\n"}{"   "}url=$1; shift{"\n"}{"   "}orgName=$1; shift{"\n"}{"   "}mkdir -p $homeDir{"\n"}{"   "}export FABRIC_CA_CLIENT_HOME=$homeDir{"\n"}{"   "}logFile=$homeDir/enroll.log{"\n"}{"   "}# Get an enrollment certificate{"\n"}{"   "}$CLIENT enroll -u $url $DEBUG $* &gt; $logFile 2&gt;&amp;1{"\n"}{"   "}if [ $? -ne 0 ]; then{"\n"}{"      "}fatal "Failed to enroll $homeDir with CA at $url; see $logFile"{"\n"}{"   "}fi{"\n"}{"   "}# Get a TLS certificate{"\n"}{"   "}debug "Enrolled $homeDir with CA at $url"{"\n"}{"}"}{"\n"}{"\n"}# Register and enroll a new user{"\n"}#{"    "}registerAndEnroll &lt;registrarHomeDir&gt; &lt;registreeHomeDir&gt; &lt;serverPort&gt; &lt;orgName&gt; [&lt;userName&gt;]{"\n"}function registerAndEnroll {"{"}{"\n"}{"   "}userName=$5{"\n"}{"   "}if [ "$userName" = "" ]; then{"\n"}{"      "}userName=$(basename $2){"\n"}{"   "}fi{"\n"}{"   "}register $userName "secret" $1{"\n"}{"   "}enroll $2 http://${"{"}userName{"}"}:secret@localhost:$3 $4{"\n"}{"}"}{"\n"}{"\n"}# Enroll to get TLS crypto material{"\n"}#{"    "}tlsEnroll &lt;homeDir&gt; &lt;serverPort&gt; &lt;orgName&gt;{"\n"}function tlsEnroll {"{"}{"\n"}{"   "}homeDir=$1{"\n"}{"   "}port=$2{"\n"}{"   "}orgName=$3{"\n"}{"   "}host=$(basename $homeDir),$(basename $homeDir | cut -d'.' -f1){"\n"}{"   "}tlsDir=$homeDir/tls{"\n"}{"   "}srcMSP=$tlsDir/msp{"\n"}{"   "}dstMSP=$homeDir/msp{"\n"}{"   "}enroll $tlsDir http://admin:adminpw@localhost:$port $orgName --csr.hosts $host --enrollment.profile tls{"\n"}{"   "}cp $srcMSP/signcerts/* $tlsDir/server.crt{"\n"}{"   "}cp $srcMSP/keystore/* $tlsDir/server.key{"\n"}{"   "}mkdir -p $dstMSP/keystore{"\n"}{"   "}cp $srcMSP/keystore/* $dstMSP/keystore{"\n"}{"   "}mkdir -p $dstMSP/tlscacerts{"\n"}{"   "}cp $srcMSP/tlscacerts/* $dstMSP/tlscacerts/tlsca.${"{"}orgName{"}"}-cert.pem{"\n"}{"   "}if [ -d $srcMSP/tlsintermediatecerts ]; then{"\n"}{"      "}cp $srcMSP/tlsintermediatecerts/* $tlsDir/ca.crt{"\n"}{"      "}mkdir -p $dstMSP/tlsintermediatecerts{"\n"}{"      "}cp $srcMSP/tlsintermediatecerts/* $dstMSP/tlsintermediatecerts{"\n"}{"   "}else{"\n"}{"      "}cp $srcMSP/tlscacerts/* $tlsDir/ca.crt{"\n"}{"   "}fi{"\n"}{"   "}rm -rf $srcMSP $homeDir/enroll.log $homeDir/fabric-ca-client-config.yaml{"\n"}{"}"}{"\n"}{"\n"}# Rename MSP files as is expected by the e2e example{"\n"}#{"    "}normalizeMSP &lt;home&gt; &lt;orgName&gt; &lt;adminHome&gt;{"\n"}function normalizeMSP {"{"}{"\n"}{"   "}userName=$(basename $1){"\n"}{"   "}mspDir=$1/msp{"\n"}{"   "}orgName=$2{"\n"}{"   "}admincerts=$mspDir/admincerts{"\n"}{"   "}cacerts=$mspDir/cacerts{"\n"}{"   "}intcerts=$mspDir/intermediatecerts{"\n"}{"   "}signcerts=$mspDir/signcerts{"\n"}{"   "}cacertsfname=$cacerts/ca.${"{"}orgName{"}"}-cert.pem{"\n"}{"   "}if [ ! -f $cacertsfname ]; then{"\n"}{"      "}mv $cacerts/* $cacertsfname{"\n"}{"   "}fi{"\n"}{"   "}intcertsfname=$intcerts/ca.${"{"}orgName{"}"}-cert.pem{"\n"}{"   "}if [ ! -f $intcertsfname ]; then{"\n"}{"      "}if [ -d $intcerts ]; then{"\n"}{"         "}mv $intcerts/* $intcertsfname{"\n"}{"      "}fi{"\n"}{"   "}fi{"\n"}{"   "}signcertsfname=$signcerts/${"{"}userName{"}"}-cert.pem{"\n"}{"   "}if [ ! -f $signcertsfname ]; then{"\n"}{"      "}fname=`ls $signcerts 2&gt; /dev/null`{"\n"}{"      "}if [ "$fname" = "" ]; then{"\n"}{"         "}mkdir -p $signcerts{"\n"}{"         "}cp $cacertsfname $signcertsfname{"\n"}{"      "}else{"\n"}{"         "}mv $signcerts/* $signcertsfname{"\n"}{"      "}fi{"\n"}{"   "}fi{"\n"}{"   "}# Copy the admin cert, which would need to be done out-of-band in the real world{"\n"}{"   "}mkdir -p $admincerts{"\n"}{"   "}if [ $# -gt 2 ]; then{"\n"}{"      "}src=`ls $3/msp/signcerts/*`{"\n"}{"      "}dst=$admincerts/Admin@${"{"}orgName{"}"}-cert.pem{"\n"}{"   "}else{"\n"}{"      "}src=`ls $signcerts/*`{"\n"}{"      "}dst=$admincerts{"\n"}{"   "}fi{"\n"}{"   "}if [ ! -f $src ]; then{"\n"}{"      "}fatal "admin certificate file not found at $src"{"\n"}{"   "}fi{"\n"}{"   "}cp $src $dst{"\n"}{"\n"}{"   "}if [ "$INTERMEDIATE_CA" == "false" ]; then{"\n"}{"      "}rm -rf $intcerts{"\n"}{"   "}fi{"\n"}{"}"}{"\n"}# Get the CA certificates and place in MSP directory in &lt;dir&gt;{"\n"}#{"    "}getcacerts &lt;dir&gt; &lt;serverURL&gt;{"\n"}function getcacerts {"{"}{"\n"}{"   "}mkdir -p $1{"\n"}{"   "}export FABRIC_CA_CLIENT_HOME=$1{"\n"}{"   "}$CLIENT getcacert -u $2 &gt; $1/getcacert.out 2&gt;&amp;1{"\n"}{"   "}if [ $? -ne 0 ]; then{"\n"}{"      "}fatal "Failed to get CA certificates $1 with CA at $2; see $logFile"{"\n"}{"   "}fi{"\n"}{"   "}mkdir $1/msp/tlscacerts{"\n"}{"   "}cp $1/msp/cacerts/* $1/msp/tlscacerts{"\n"}{"   "}debug "Loaded CA certificates into $1 from CA at $2"{"\n"}{"}"}{"\n"}{"\n"}# Print a fatal error message and exit{"\n"}function fatal {"{"}{"\n"}{"   "}echo "FATAL: $*"{"\n"}{"   "}exit 1{"\n"}{"}"}{"\n"}{"\n"}# Print a debug message{"\n"}function debug {"{"}{"\n"}{"   "}echo "{"    "}$*"{"\n"}{"}"}{"\n"}{"\n"}main{"\n"}</code></pre>
              <p>Even though this script will generate more certificates than we need, we will not change it at the moment. You can see at the beginning of the script, that we do not use an intermediate CA. We set the number of peers to two for each organisation so as to show you how to use this script. </p>
              <p>Now make it runnable, and run it, with:</p>
              <pre><code className="hljs sh">{"\n"}chmod +x crypto.sh{"\n"}{"\n"}./crypto.sh{"\n"}</code></pre>
              <p>All certificates we need should be generated. 
                Before we can use them in our network, we have to generate the genesis block and the channel update configuration again. We can do the same as in section 4, save this in a file called <code className="hljs hl-inline">setup.sh</code>, if you have not already done so:</p>
              <pre><code className="hljs sh">{"\n"}{"\n"}export FABRIC_CFG_PATH=./{"\n"}{"\n"}configtxgen -profile PCXCHGOrdererGenesis -outputBlock ./orderer/genesis.block{"\n"}{"\n"}configtxgen -profile AsusChannel -outputCreateChannelTx ./channels/Asus.tx -channelID asus{"\n"}configtxgen -profile DellChannel -outputCreateChannelTx ./channels/Dell.tx -channelID dell{"\n"}configtxgen -profile HPChannel -outputCreateChannelTx ./channels/HP.tx -channelID hp{"\n"}{"\n"}configtxgen -profile AsusChannel -outputAnchorPeersUpdate ./channels/asusanchor.tx -channelID asus -asOrg AsusMSP{"\n"}configtxgen -profile DellChannel -outputAnchorPeersUpdate ./channels/dellanchor.tx -channelID dell -asOrg DellMSP{"\n"}configtxgen -profile HPChannel -outputAnchorPeersUpdate ./channels/hpanchor.tx -channelID hp -asOrg HPMSP{"\n"}configtxgen -profile AsusChannel -outputAnchorPeersUpdate ./channels/amazonanchorasus.tx -channelID asus -asOrg AmazonMSP{"\n"}configtxgen -profile DellChannel -outputAnchorPeersUpdate ./channels/amazonanchordell.tx -channelID dell -asOrg AmazonMSP{"\n"}configtxgen -profile HPChannel -outputAnchorPeersUpdate ./channels/amazonanchorhp.tx -channelID hp -asOrg AmazonMSP{"\n"}</code></pre>
              <p>and, make it runnable and run it with:</p>
              <pre><code className="hljs sh">{"\n"}chmod +x setup.sh{"\n"}{"\n"}./setup.sh{"\n"}</code></pre>
              <p>You need the binary <code className="hljs hl-inline">configtxgen</code>, so do not forget to export its path like we did in module 4. </p>
              <p>It is time to run the network:</p>
              <pre><code className="hljs sh">{"\n"}docker-compose -f docker-compose-pcxchg.yaml up{"\n"}</code></pre>
              <p>Now use the <code className="hljs hl-inline">network.sh</code> from module 5 to generate the channels, to join the peers and to instantiate the chaincode.</p>
              <p>You know how to play with this network. Do some tests.</p>
              <h3>Start Fabric CA</h3>
              <p>Ok, now we are ready to run Fabric CA server containers in our PCXCHG network. Therefore, we will add this to <code className="hljs hl-inline">docker-compose-pcxchg.yaml</code>:</p>
              <pre><code className="hljs yaml">{"\n"}{"  "}ca.Amazon:{"\n"}{"    "}image: hyperledger/fabric-ca:x86_64-1.1.0{"\n"}{"    "}environment:{"\n"}{"      "}- FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server-config{"\n"}{"      "}- FABRIC_CA_SERVER_CA_NAME=ca.Amazon{"\n"}{"    "}ports:{"\n"}{"      "}- "7054:7054"{"\n"}{"    "}command: sh -c 'fabric-ca-server start -b admin:adminpw'{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Amazon.com/ca/root/:/etc/hyperledger/fabric-ca-server-config{"\n"}{"    "}container_name: ca.Amazon{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}ca.Asus:{"\n"}{"    "}image: hyperledger/fabric-ca:x86_64-1.1.0{"\n"}{"    "}environment:{"\n"}{"      "}- FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server-config{"\n"}{"      "}- FABRIC_CA_SERVER_CA_NAME=ca.Asus{"\n"}{"    "}ports:{"\n"}{"      "}- "8054:7054"{"\n"}{"    "}command: sh -c 'fabric-ca-server start -b admin:adminpw'{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Asus.com/ca/root/:/etc/hyperledger/fabric-ca-server-config{"\n"}{"    "}container_name: ca.Asus{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}ca.Dell:{"\n"}{"    "}image: hyperledger/fabric-ca:x86_64-1.1.0{"\n"}{"    "}environment:{"\n"}{"      "}- FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server-config{"\n"}{"      "}- FABRIC_CA_SERVER_CA_NAME=ca.Dell{"\n"}{"    "}ports:{"\n"}{"      "}- "10054:7054"{"\n"}{"    "}command: sh -c 'fabric-ca-server start -b admin:adminpw'{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/Dell.com/ca/root/:/etc/hyperledger/fabric-ca-server-config{"\n"}{"    "}container_name: ca.Dell{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}{"\n"}{"  "}ca.HP:{"\n"}{"    "}image: hyperledger/fabric-ca:x86_64-1.1.0{"\n"}{"    "}environment:{"\n"}{"      "}- FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server-config{"\n"}{"      "}- FABRIC_CA_SERVER_CA_NAME=ca.HP{"\n"}{"    "}ports:{"\n"}{"      "}- "9054:7054"{"\n"}{"    "}command: sh -c 'fabric-ca-server start -b admin:adminpw'{"\n"}{"    "}volumes:{"\n"}{"      "}- ./crypto-config/peerOrganizations/HP.com/ca/root/:/etc/hyperledger/fabric-ca-server-config{"\n"}{"    "}container_name: ca.HP{"\n"}{"    "}networks:{"\n"}{"      "}- pcxchg{"\n"}</code></pre>
              <p>If you compare the new certificates with the cryptogen certificates, you will see that we now have a <code className="hljs hl-inline">root</code> folder for the root CA server. If you run the script, you will also get new configuration files for the servers. <code className="hljs hl-inline">go get</code> will pull the master branch, so you need to change the <code className="hljs hl-inline">version</code> to <code className="hljs hl-inline">version: 1.1.0</code> in the <code className="hljs hl-inline">fabric-ca-server-config.yaml</code> files if it is different. </p>
              <p>You can use something like:</p>
              <pre><code>{"\n"}awk '{"{"} if ($1=="version:") print $1, 1.1.0; else print $0{"}"}' fabric-ca-server-config.yaml &gt; temp.out | mv temp.out fabric-ca-server-config.yaml{"\n"}</code></pre>
              <p>and save it as a script to map it into <code>/etc/hyperledger/fabric-ca-server-config</code> of the CA containers. Just set the same path as <code>working_dir</code> and change the <code>command</code> to:</p>
              <pre><code>{"\n"}command: sh -c './correctversion.sh; sleep 10; fabric-ca-server start -b admin:adminpw'{"\n"}</code></pre>
              <p>For the sake of simplicity, we will use the same username and password for the admins of the Fabric CA server.</p>
              <p>Now, run your network with:</p>
              <pre><code className="hljs sh">{"\n"}docker-compose -f docker-compose-pcxchg.yaml up | grep "ca\."{"\n"}</code></pre>
              <p>and confirm that the Fabric CA server started correctly.</p>
              <h3>Test a client</h3>
              <p>In the next section, we will use the HFC SDK for Node.js to interact with the Fabric CA. For now, we can do a quick test with Fabric CA client. We have to extend our <code className="hljs hl-inline">docker-compose-pcxchg.yaml</code> yet again:</p>
              <pre><code className="hljs yaml">{"\n"}client.Amazon:{"\n"}{"  "}tty: true{"\n"}{"  "}image: hyperledger/fabric-ca:x86_64-1.1.0{"\n"}{"  "}container_name: client.Amazon{"\n"}{"  "}environment:{"\n"}{"    "}- FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-client{"\n"}{"    "}- CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock{"\n"}{"  "}volumes:{"\n"}{"    "}- ./crypto-config/peerOrganizations/Amazon.com/users/:/etc/hyperledger/fabric-ca-client{"\n"}{"  "}depends_on:{"\n"}{"    "}- ca.Amazon{"\n"}{"  "}command: sh -c 'sleep 5;fabric-ca-client enroll -u http://admin:adminpw@ca.Amazon:7054;sleep 10000'{"\n"}{"  "}networks:{"\n"}{"    "}- pcxchg{"\n"}</code></pre>
              <p>Now, run your network with:</p>
              <pre><code className="hljs sh">{"\n"}docker-compose -f docker-compose-pcxchg.yaml up | grep "client"{"\n"}</code></pre>
              <p>If everything seems ok, you use the client:</p>
              <pre><code className="hljs sh">{"\n"}docker exec -it client.Amazon bash{"\n"}</code></pre>
              <p>And register a user:</p>
              <pre><code className="hljs sh">{"\n"}fabric-ca-client register --id.name admin2 --id.type user --id.secret adminpw{"\n"}</code></pre>
              <p>Finally enroll:</p>
              <pre><code className="hljs sh">{"\n"}fabric-ca-client enroll -u http://admin2:adminpw@ca.Amazon:7054 -M Admin2@Amazon.com/msp{"\n"}</code></pre>
              <p>This creates a new folder with certificates. Its structure is different from the pre-created certificates. Have a look into it. If you compare it with <code className="hljs hl-inline">Admin@Amazon.com</code>, you will see that the <code className="hljs hl-inline">admincerts</code> folder is missing. </p>
              <p>It is not a problem in this case since this folder is simply a duplicate of <code className="hljs hl-inline">signcerts</code> for a user.</p>
              {/*[Watch Rob work his way through this module and learn how to troubleshoot common issues](6_3_pcxchng.mp4)*/}
            </div>
          </div>
        </div>
      </div>
        );
    }
}

export default PcXchg;