'use strict';

import React, { Component } from 'react';

class ProducerApp extends Component {

    render () {
        return (
            <div className="xblock xblock-student_view xblock-student_view-vertical" data-runtime-class="LmsRuntime" data-init="VerticalStudentView" data-course-id="course-v1:B9lab+HLF-12+2018-07" data-request-token="a1825740a1b811e8be160a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@vertical+block@f765ddb7670d49c38b4c97eadcde6ca0" data-block-type="vertical">
        <div className="vert-mod">
          <div className="vert vert-0" data-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@15bed847f1ae428fb2c0bec6a89c75bd">
            <div className="xblock xblock-student_view xblock-student_view-html xmodule_display xmodule_HtmlModule" data-runtime-class="LmsRuntime" data-init="XBlockToXModuleShim" data-block-type="html" data-request-token="a1825740a1b811e8be160a059cba8688" data-runtime-version={1} data-usage-id="block-v1:B9lab+HLF-12+2018-07+type@html+block@15bed847f1ae428fb2c0bec6a89c75bd" data-type="HTMLModule" data-course-id="course-v1:B9lab+HLF-12+2018-07">
              <h2>producerApp</h2>
              <p>All right, we are now ready to use the Fabric CA in our <code className="hljs hl-inline">producerApp</code>. You will see that, in spite of all the pain, it simplifies a lot!</p>
              <h3>Remove Certificates</h3>
              <p>First, go to your <code className="hljs hl-inline">producerApp</code> folder and remove the certificates we used before:</p>
              <pre><code className="hljs sh">{"\n"}rm -r certs{"\n"}</code></pre>
              <p>then remove them also from <code className="hljs hl-inline">~/.hfc-key-store</code>:</p>
              <pre><code className="hljs sh">{"\n"}rm ~/.hfc-key-store/*{"\n"}</code></pre>
              <p>After you have done that, the <code className="hljs hl-inline">producerApp</code> will not work anymore. Trust, but verify!</p>
              <h3>Make it work again</h3>
              <p>For the next steps, you need the PCXCHG network from the previous section. So, your network should have four Fabric CA servers. Except that you remove the <code className="hljs hl-inline">client.Amazon</code>, as we will not use it.
                Ok, first add the Fabric CA servers to the options. After that, your options should look like:</p>
              <pre><code className="hljs javascript">{"\n"}var options= {"{"}{"\n"}{"  "}Asus : {"{"}{"\n"}{"    "}wallet_path: './certs/asus',{"\n"}{"    "}user_id: 'AsusAdmin',{"\n"}{"    "}channel_id: 'asus',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:7051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050',{"\n"}{"    "}event_url: 'grpc://localhost:7053',{"\n"}{"    "}ca_url: 'http://localhost:8054',{"\n"}{"    "}msp: `AsusMSP`{"\n"}{"  "}{"}"},{"\n"}{"  "}Hp : {"{"}{"\n"}{"    "}wallet_path: './certs/hp',{"\n"}{"    "}user_id: 'HpAdmin',{"\n"}{"    "}channel_id: 'hp',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:9051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050',{"\n"}{"    "}event_url: 'grpc://localhost:9053',{"\n"}{"    "}ca_url: 'http://localhost:9054',{"\n"}{"    "}msp: `HPMSP`{"\n"}{"  "}{"}"},{"\n"}{"  "}Dell : {"{"}{"\n"}{"    "}wallet_path: './certs/dell',{"\n"}{"    "}user_id: 'DellAdmin',{"\n"}{"    "}channel_id: 'dell',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:10051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050',{"\n"}{"    "}event_url: 'grpc://localhost:10053',{"\n"}{"    "}ca_url: 'http://localhost:10054',{"\n"}{"    "}msp: `DellMSP`{"\n"}{"  "}{"}"}{"\n"}{"}"};{"\n"}</code></pre>
              <p>Ok, now we can add the following at the top of <code className="hljs hl-inline">producerApp</code>:</p>
              <pre><code className="hljs javascript">{"\n"}const ca = require('fabric-ca-client');{"\n"}const User = require('fabric-client/lib/User.js');{"\n"}{"\n"}const enrolUserCA = function(client, opt) {"{"}{"\n"}{"  "}// Create the ca client{"\n"}{"  "}const caClient = new ca(opt.ca_url, null, '');{"\n"}{"\n"}{"  "}return hfc.newDefaultKeyValueStore({"{"} path: opt.wallet_path {"}"}){"\n"}{"    "}.then(wallet =&gt; {"{"}{"\n"}{"      "}client.setStateStore(wallet);{"\n"}{"      "}return caClient.enroll({"{"}{"\n"}{"        "}enrollmentID: "admin",{"\n"}{"        "}enrollmentSecret: "adminpw"{"\n"}{"      "}{"}"});{"\n"}{"    "}{"}"}){"\n"}{"    "}.then(enrollment =&gt; {"{"}{"\n"}{"      "}const admin = new User("admin");{"\n"}{"      "}admin.setCryptoSuite(client.getCryptoSuite());{"\n"}{"      "}return admin.setEnrollment(enrollment.key, enrollment.certificate, opt.msp){"\n"}{"        "}.then(() =&gt; client.setUserContext(admin)){"\n"}{"        "}.then(() =&gt; admin);{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}</code></pre>
              <p>Up next you can replace the <code className="hljs hl-inline">enrolUser</code> in <code className="hljs hl-inline">invoke</code> and use <code className="hljs hl-inline">enrolUserCA</code>:</p>
              <pre><code className="hljs javascript">{"\n"}// Function invokes createPC on pcxchg{"\n"}function invoke(opt, param) {"{"}{"\n"}{"  "}return enrolUserCA(client, opt);{"\n"}{"  "}...{"\n"}{"}"}{"\n"}</code></pre>
              <p>Run <code className="hljs hl-inline">producerApp</code> again.  Hopefully it works now. If you have issues, please find our reference implementation at the end of this section.</p>
              <div className="b9-info">
                Don't forget to install the dependicies: <code>npm install fabric-client@^1.1.0 fabric-ca-client@^1.1.0 express@^4.15.2 body-parser@^1.17.1 --save</code>
              </div>
              <h3>What happens</h3>
              <p>This time, we use the <code className="hljs hl-inline">fabric-ca-client</code>. First, we create the <a href="https://fabric-sdk-node.github.io/FabricCAServices.html#toc0__anchor">client object</a>.
                Because we do not use TLS, the URL starts with <code className="hljs hl-inline">http://</code> and the second parameter is <code className="hljs hl-inline">null</code>. 
                At this point, we still use <code className="hljs hl-inline">newDefaultKeyValueStore</code>, which is a file based key-store mechanism. </p>
              <p>We use <code className="hljs hl-inline">enroll(req)</code> to enrol the admin. Next, we create a <code className="hljs hl-inline">User</code> and we use</p>
              <pre><code className="hljs javascript">{"\n"}admin.setCryptoSuite(client.getCryptoSuite());{"\n"}</code></pre>
              <p>to get the same <code className="hljs hl-inline">cryptoSuite</code> as the <code className="hljs hl-inline">client</code>. See <a href="https://fabric-sdk-node.github.io/module-api.CryptoSuite.html">here</a>.</p>
              <p>With <code className="hljs hl-inline">admin.setEnrollment</code>, we create the signing identity.</p>
              <p>After <code className="hljs hl-inline">client.setUserContext(admin)</code>, the client will sign all requests with the <code className="hljs hl-inline">admin</code> user.</p>
              <div className="b9-info">
                You will find two classes for the Fabric CA in the fabric-sdk-node-github.io documentation. One is called <code>FabricCAServices</code>. The other one is called <code>FabricCAClient</code>. In <code>FabricCAClientImpl.js</code> of fabric-ca-client, you can see, that we use <code>FabricCAServices</code>.
              </div>
              <p>Here is an overview:</p>
              <p><img src="https://s3-eu-west-1.amazonaws.com/b9-academy-assets/course-assets/HLF-0/caclientoverview.png" /></p>
              <p>If you look into <code className="hljs hl-inline">helper.js</code> of <code className="hljs hl-inline">balance-transfer</code>, you will see that only an admin can register and enrol a new user. </p>
              <h3>Further reading</h3>
              <p>Have a look at this example project:</p>
              <ul>
                <li><a href="https://github.com/LedgerDomain/FabricWebApp">FabricWebApp</a></li>
              </ul>
              <h3>Reference implementation</h3>
              <p>It will help you to start the network with:</p>
              <pre><code className="hljs sh">{"\n"}docker-compose -f docker-compose-pcxchg.yaml up | grep "ca\."{"\n"}</code></pre>
              <p>and do not forget to run the <code className="hljs hl-inline">./network.sh</code> before you run the producerApp.</p>
              <pre><code className="hljs javascript">{"\n"}'use strict'; // self-defence{"\n"}{"\n"}// Functions from figure{"\n"}const hfc = require('fabric-client');{"\n"}let channel;{"\n"}const enrolUser = function(client, options) {"{"}{"\n"}{"  "}return hfc.newDefaultKeyValueStore({"{"} path: options.wallet_path {"}"}){"\n"}{"    "}.then(wallet =&gt; {"{"}{"\n"}{"      "}client.setStateStore(wallet);{"\n"}{"      "}return client.getUserContext(options.user_id, true);{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}{"\n"}const ca = require('fabric-ca-client');{"\n"}const User = require('fabric-client/lib/User.js');{"\n"}{"\n"}const enrolUserCA = function(client, opt) {"{"}{"\n"}{"  "}// Create the ca client{"\n"}{"  "}const caClient = new ca(opt.ca_url, null, '');{"\n"}{"\n"}{"  "}return hfc.newDefaultKeyValueStore({"{"} path: opt.wallet_path {"}"}){"\n"}{"    "}.then(wallet =&gt; {"{"}{"\n"}{"      "}client.setStateStore(wallet);{"\n"}{"      "}return caClient.enroll({"{"}{"\n"}{"        "}enrollmentID: "admin",{"\n"}{"        "}enrollmentSecret: "adminpw"{"\n"}{"      "}{"}"});{"\n"}{"    "}{"}"}){"\n"}{"    "}.then(enrollment =&gt; {"{"}{"\n"}{"      "}const admin = new User("admin");{"\n"}{"      "}admin.setCryptoSuite(client.getCryptoSuite());{"\n"}{"      "}return admin.setEnrollment(enrollment.key, enrollment.certificate, opt.msp){"\n"}{"        "}.then(() =&gt; client.setUserContext(admin)){"\n"}{"        "}.then(() =&gt; admin);{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}{"\n"}const initNetwork = function(client, options, target) {"{"}{"\n"}{"  "}let channel;{"\n"}{"  "}try {"{"}{"\n"}{"    "}channel = client.newChannel(options.channel_id);{"\n"}{"    "}const peer = client.newPeer(options.peer_url);{"\n"}{"    "}target = peer;{"\n"}{"    "}channel.addPeer(peer);{"\n"}{"    "}channel.addOrderer(client.newOrderer(options.orderer_url));{"\n"}{"  "}{"}"} catch(e) {"{"} // channel already exists{"\n"}{"    "}channel = client.getChannel(options.channel_id);{"\n"}{"  "}{"}"}{"\n"}{"  "}return channel;{"\n"}{"}"};{"\n"}{"\n"}const transactionProposal = function(client, channel, request) {"{"}{"\n"}{"  "}request.txId = client.newTransactionID();{"\n"}{"  "}return channel.sendTransactionProposal(request);{"\n"}{"}"};{"\n"}{"\n"}const responseInspect = function(results) {"{"}{"\n"}{"  "}const proposalResponses = results[0];{"\n"}{"  "}const proposal = results[1];{"\n"}{"  "}const header = results[2];{"\n"}{"\n"}{"  "}if (proposalResponses &amp;&amp; proposalResponses.length &gt; 0 &amp;&amp;{"\n"}{"    "}proposalResponses[0].response &amp;&amp;{"\n"}{"    "}proposalResponses[0].response.status === 200) {"{"}{"\n"}{"    "}return true;{"\n"}{"  "}{"}"}{"\n"}{"  "}return false;{"\n"}{"}"};{"\n"}{"\n"}const sendOrderer = function(channel, request) {"{"}{"\n"}{"  "}return channel.sendTransaction(request);{"\n"}{"}"};{"\n"}{"\n"}const target = [];{"\n"}const client = new hfc();{"\n"}{"\n"}// Function invokes createPC on pcxchg{"\n"}function invoke(opt, param) {"{"}{"\n"}{"  "}return enrolUserCA(client, opt){"\n"}{"    "}.then(user =&gt; {"{"}{"\n"}{"      "}if(typeof user === "undefined" || !user.isEnrolled()){"\n"}{"        "}throw "User not enrolled";{"\n"}{"\n"}{"      "}channel = initNetwork(client, opt, target);{"\n"}{"      "}const request = {"{"}{"\n"}{"          "}targets: target,{"\n"}{"          "}chaincodeId: opt.chaincode_id,{"\n"}{"          "}fcn: 'createPC',{"\n"}{"          "}args: param,{"\n"}{"          "}chainId: opt.channel_id,{"\n"}{"          "}txId: null{"\n"}{"      "}{"}"};{"\n"}{"      "}return transactionProposal(client, channel, request);{"\n"}{"    "}{"}"}){"\n"}{"    "}.then(results =&gt; {"{"}{"\n"}{"      "}if (responseInspect(results)) {"{"}{"\n"}{"        "}const request = {"{"}{"\n"}{"          "}proposalResponses: results[0],{"\n"}{"          "}proposal: results[1],{"\n"}{"          "}header: results[2]{"\n"}{"        "}{"}"};{"\n"}{"        "}return sendOrderer(channel, request);{"\n"}{"      "}{"}"} else {"{"}{"\n"}{"        "}throw "Response is bad";{"\n"}{"      "}{"}"}{"\n"}{"    "}{"}"}){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}console.log(err);{"\n"}{"      "}throw err;{"\n"}{"    "}{"}"});{"\n"}{"}"};{"\n"}{"\n"}// Options{"\n"}var options= {"{"}{"\n"}{"  "}Asus : {"{"}{"\n"}{"    "}wallet_path: './certs/asus',{"\n"}{"    "}user_id: 'AsusAdmin',{"\n"}{"    "}channel_id: 'asus',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:7051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050',{"\n"}{"    "}event_url: 'grpc://localhost:7053',{"\n"}{"    "}ca_url: 'http://localhost:8054',{"\n"}{"    "}msp: `AsusMSP`{"\n"}{"  "}{"}"},{"\n"}{"  "}Hp : {"{"}{"\n"}{"    "}wallet_path: './certs/hp',{"\n"}{"    "}user_id: 'HpAdmin',{"\n"}{"    "}channel_id: 'hp',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:9051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050',{"\n"}{"    "}event_url: 'grpc://localhost:9053',{"\n"}{"    "}ca_url: 'http://localhost:9054',{"\n"}{"    "}msp: `HPMSP`{"\n"}{"  "}{"}"},{"\n"}{"  "}Dell : {"{"}{"\n"}{"    "}wallet_path: './certs/dell',{"\n"}{"    "}user_id: 'DellAdmin',{"\n"}{"    "}channel_id: 'dell',{"\n"}{"    "}chaincode_id: 'pcxchg',{"\n"}{"    "}peer_url: 'grpc://localhost:10051',{"\n"}{"    "}orderer_url: 'grpc://localhost:7050',{"\n"}{"    "}event_url: 'grpc://localhost:10053',{"\n"}{"    "}ca_url: 'http://localhost:10054',{"\n"}{"    "}msp: `DellMSP`{"\n"}{"  "}{"}"}{"\n"}{"}"};{"\n"}{"\n"}{"\n"}// Server{"\n"}const express = require("express");{"\n"}const app = express();{"\n"}const http = require('http');{"\n"}const bodyParser = require('body-parser');{"\n"}const path = require('path');{"\n"}{"\n"}app.engine('html', require('ejs').renderFile);{"\n"}{"\n"}const server = http.createServer(app).listen(4000, function() {"{"}{"}"});{"\n"}app.use(bodyParser.json());{"\n"}app.use(bodyParser.urlencoded({"{"} extended: true {"}"}));{"\n"}app.use(express.static(__dirname));{"\n"}app.set('views', __dirname);{"\n"}{"\n"}app.post('/invoke', function(req, res, next) {"{"}{"\n"}{"  "}const args = req.body.args;{"\n"}{"  "}invoke(options[args[0]], args.slice(1)){"\n"}{"    "}.then(() =&gt; res.send("Chaincode invoked")){"\n"}{"    "}.catch(err =&gt; {"{"}{"\n"}{"      "}res.status(500);{"\n"}{"      "}res.send(err.toString());{"\n"}{"    "}{"}"});{"\n"}{"}"});{"\n"}{"\n"}app.get('/', function(req, res) {"{"}{"\n"}{"  "}res.render('UI.html');{"\n"}{"}"});{"\n"}</code></pre>
              <h2>Some notes on production</h2>
              <p>The client is still made for teaching. For this reason, we do a minimal change to use the Fabric-CA. This way, we will enrol a new user each time we invoke the chaincode. You should not do that in production :)</p>
              <p>Another important aspect is enabling TLS. You will enable TLS later and see which changes you need to make in the compose file. Don't worry, it is not a big deal. But if you want to use the client you will also need to make some changes in the client. </p>
              <p>First of all, you will need to change the address from <code className="hljs hl-inline">http</code> to <code className="hljs hl-inline">https</code> and from <code className="hljs hl-inline">grpc</code> to <code className="hljs hl-inline">grpcs</code> in the options.
                In addition, you will need to change how we initiate the client:</p>
              <pre><code className="hljs ">{"\n"}const fs = require('fs'){"\n"}{"\n"}const initNetwork = function(client, options, target) {"{"}{"\n"}{"  "}let channel;{"\n"}{"  "}try {"{"}{"\n"}{"    "}channel = client.newChannel(options.channel_id);{"\n"}{"    "}const peertlscacert = fs.readFileSync('./certs/peer-cert.pem');{"\n"}{"    "}const orderertlscacert = fs.readFileSync('./certs/orderer-cert.pem');{"\n"}{"    "}const peer = client.newPeer(options.peer_url, {"\n"}{"      "}{"{"} {"\n"}{"        "}pem: Buffer.from(peertlscacert).toString(),{"\n"}{"        "}'ssl-target-name-override': "peer0.Amazon.com"{"\n"}{"      "}{"}"});{"\n"}{"    "}target.push(peer);{"\n"}{"    "}channel.addPeer(peer);{"\n"}{"    "}channel.addOrderer(client.newOrderer(options.orderer_url, {"\n"}{"      "}{"{"}{"\n"}{"        "}pem: Buffer.from(orderertlscacert).toString(),{"\n"}{"        "}'ssl-target-name-override': "orderer.pcxchg.com"{"\n"}{"      "}{"}"}));{"\n"}{"  "}{"}"} catch(e) {"{"} // channel already exists{"\n"}{"    "}channel = client.getChannel(options.channel_id);{"\n"}{"  "}{"}"}{"\n"}{"  "}return channel;{"\n"}{"}"};{"\n"}</code></pre>
              <p>Both certificates are in corresponding <code className="hljs hl-inline">tlscacerts</code> folders. Notice, we are talking about enabling TLS for the peers and orderers. If you also want to enable TLS for the Fabric-CA, you will need some additional changes. </p>
            </div>
          </div>
        </div>
      </div>
        );
    }
}

export default ProducerApp;